var vec2={};if(!GLMAT_EPSILON)var GLMAT_EPSILON=1e-6;if(vec2.create=function(){return new Float32Array(2)},vec2.clone=function(e){var t=new Float32Array(2);return t[0]=e[0],t[1]=e[1],t},vec2.fromValues=function(e,t){var r=new Float32Array(2);return r[0]=e,r[1]=t,r},vec2.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e},vec2.set=function(e,t,r){return e[0]=t,e[1]=r,e},vec2.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e},vec2.sub=vec2.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e},vec2.mul=vec2.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e},vec2.div=vec2.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e},vec2.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e},vec2.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e},vec2.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e},vec2.dist=vec2.distance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1];return Math.sqrt(r*r+n*n)},vec2.sqrDist=vec2.squaredDistance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1];return r*r+n*n},vec2.len=vec2.length=function(e){var t=e[0],r=e[1];return Math.sqrt(t*t+r*r)},vec2.sqrLen=vec2.squaredLength=function(e){var t=e[0],r=e[1];return t*t+r*r},vec2.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e},vec2.normalize=function(e,t){var r=t[0],n=t[1],i=r*r+n*n;return 0<i&&(i=1/Math.sqrt(i),e[0]=t[0]*i,e[1]=t[1]*i),e},vec2.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]},vec2.cross=function(e,t,r){var n=t[0]*r[1]-t[1]*r[0];return e[0]=e[1]=0,e[2]=n,e},vec2.lerp=function(e,t,r,n){var i=t[0],o=t[1];return e[0]=i+n*(r[0]-i),e[1]=o+n*(r[1]-o),e},vec2.transformMat2=function(e,t,r){var n=t[0],i=t[1];return e[0]=n*r[0]+i*r[1],e[1]=n*r[2]+i*r[3],e},vec2.forEach=function(){var l=new Float32Array(2);return function(e,t,r,n,i,o){var a,s;for(t||(t=2),r||(r=0),s=n?Math.min(n*t+r,e.length):e.length,a=r;a<s;a+=t)l[0]=e[a],l[1]=e[a+1],i(l,l,o),e[a]=l[0],e[a+1]=l[1];return e}}(),vec2.str=function(e){return"vec2("+e[0]+", "+e[1]+")"},"undefined"!=typeof exports&&(exports.vec2=vec2),void 0===vec3)var vec3={};if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;vec3.create=function(){return new Float32Array(3)},vec3.clone=function(e){var t=new Float32Array(3);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t},vec3.fromValues=function(e,t,r){var n=new Float32Array(3);return n[0]=e,n[1]=t,n[2]=r,n},vec3.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e},vec3.set=function(e,t,r,n){return e[0]=t,e[1]=r,e[2]=n,e},vec3.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e},vec3.sub=vec3.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e},vec3.mul=vec3.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e},vec3.div=vec3.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e},vec3.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e},vec3.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e},vec3.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e},vec3.dist=vec3.distance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1],i=t[2]-e[2];return Math.sqrt(r*r+n*n+i*i)},vec3.sqrDist=vec3.squaredDistance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1],i=t[2]-e[2];return r*r+n*n+i*i},vec3.len=vec3.length=function(e){var t=e[0],r=e[1],n=e[2];return Math.sqrt(t*t+r*r+n*n)},vec3.sqrLen=vec3.squaredLength=function(e){var t=e[0],r=e[1],n=e[2];return t*t+r*r+n*n},vec3.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e},vec3.normalize=function(e,t){var r=t[0],n=t[1],i=t[2],o=r*r+n*n+i*i;return 0<o&&(o=1/Math.sqrt(o),e[0]=t[0]*o,e[1]=t[1]*o,e[2]=t[2]*o),e},vec3.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]},vec3.cross=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=r[0],s=r[1],l=r[2];return e[0]=i*l-o*s,e[1]=o*a-n*l,e[2]=n*s-i*a,e},vec3.lerp=function(e,t,r,n){var i=t[0],o=t[1],a=t[2];return e[0]=i+n*(r[0]-i),e[1]=o+n*(r[1]-o),e[2]=a+n*(r[2]-a),e},vec3.transformMat4=function(e,t,r){var n=t[0],i=t[1],o=t[2];return e[0]=r[0]*n+r[4]*i+r[8]*o+r[12],e[1]=r[1]*n+r[5]*i+r[9]*o+r[13],e[2]=r[2]*n+r[6]*i+r[10]*o+r[14],e},vec3.transformQuat=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=r[0],s=r[1],l=r[2],c=r[3],h=c*n+s*o-l*i,u=c*i+l*n-a*o,d=c*o+a*i-s*n,f=-a*n-s*i-l*o;return e[0]=h*c+f*-a+u*-l-d*-s,e[1]=u*c+f*-s+d*-a-h*-l,e[2]=d*c+f*-l+h*-s-u*-a,e},vec3.forEach=function(){var l=new Float32Array(3);return function(e,t,r,n,i,o){var a,s;for(t||(t=3),r||(r=0),s=n?Math.min(n*t+r,e.length):e.length,a=r;a<s;a+=t)l[0]=e[a],l[1]=e[a+1],l[2]=e[a+2],i(l,l,o),e[a]=l[0],e[a+1]=l[1],e[a+2]=l[2];return e}}(),vec3.str=function(e){return"vec3("+e[0]+", "+e[1]+", "+e[2]+")"},"undefined"!=typeof exports&&(exports.vec3=vec3);var vec4={};if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;vec4.create=function(){return new Float32Array(4)},vec4.clone=function(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},vec4.fromValues=function(e,t,r,n){var i=new Float32Array(4);return i[0]=e,i[1]=t,i[2]=r,i[3]=n,i},vec4.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},vec4.set=function(e,t,r,n,i){return e[0]=t,e[1]=r,e[2]=n,e[3]=i,e},vec4.add=function(e,t,r){return e[0]=t[0]+r[0],e[1]=t[1]+r[1],e[2]=t[2]+r[2],e[3]=t[3]+r[3],e},vec4.sub=vec4.subtract=function(e,t,r){return e[0]=t[0]-r[0],e[1]=t[1]-r[1],e[2]=t[2]-r[2],e[3]=t[3]-r[3],e},vec4.mul=vec4.multiply=function(e,t,r){return e[0]=t[0]*r[0],e[1]=t[1]*r[1],e[2]=t[2]*r[2],e[3]=t[3]*r[3],e},vec4.div=vec4.divide=function(e,t,r){return e[0]=t[0]/r[0],e[1]=t[1]/r[1],e[2]=t[2]/r[2],e[3]=t[3]/r[3],e},vec4.min=function(e,t,r){return e[0]=Math.min(t[0],r[0]),e[1]=Math.min(t[1],r[1]),e[2]=Math.min(t[2],r[2]),e[3]=Math.min(t[3],r[3]),e},vec4.max=function(e,t,r){return e[0]=Math.max(t[0],r[0]),e[1]=Math.max(t[1],r[1]),e[2]=Math.max(t[2],r[2]),e[3]=Math.max(t[3],r[3]),e},vec4.scale=function(e,t,r){return e[0]=t[0]*r,e[1]=t[1]*r,e[2]=t[2]*r,e[3]=t[3]*r,e},vec4.dist=vec4.distance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return Math.sqrt(r*r+n*n+i*i+o*o)},vec4.sqrDist=vec4.squaredDistance=function(e,t){var r=t[0]-e[0],n=t[1]-e[1],i=t[2]-e[2],o=t[3]-e[3];return r*r+n*n+i*i+o*o},vec4.len=vec4.length=function(e){var t=e[0],r=e[1],n=e[2],i=e[3];return Math.sqrt(t*t+r*r+n*n+i*i)},vec4.sqrLen=vec4.squaredLength=function(e){var t=e[0],r=e[1],n=e[2],i=e[3];return t*t+r*r+n*n+i*i},vec4.negate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=-t[3],e},vec4.normalize=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=r*r+n*n+i*i+o*o;return 0<a&&(a=1/Math.sqrt(a),e[0]=t[0]*a,e[1]=t[1]*a,e[2]=t[2]*a,e[3]=t[3]*a),e},vec4.dot=function(e,t){return e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3]},vec4.lerp=function(e,t,r,n){var i=t[0],o=t[1],a=t[2],s=t[3];return e[0]=i+n*(r[0]-i),e[1]=o+n*(r[1]-o),e[2]=a+n*(r[2]-a),e[3]=s+n*(r[3]-s),e},vec4.transformMat4=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3];return e[0]=r[0]*n+r[4]*i+r[8]*o+r[12]*a,e[1]=r[1]*n+r[5]*i+r[9]*o+r[13]*a,e[2]=r[2]*n+r[6]*i+r[10]*o+r[14]*a,e[3]=r[3]*n+r[7]*i+r[11]*o+r[15]*a,e},vec4.transformQuat=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=r[0],s=r[1],l=r[2],c=r[3],h=c*n+s*o-l*i,u=c*i+l*n-a*o,d=c*o+a*i-s*n,f=-a*n-s*i-l*o;return e[0]=h*c+f*-a+u*-l-d*-s,e[1]=u*c+f*-s+d*-a-h*-l,e[2]=d*c+f*-l+h*-s-u*-a,e},vec4.forEach=function(){var l=new Float32Array(4);return function(e,t,r,n,i,o){var a,s;for(t||(t=4),r||(r=0),s=n?Math.min(n*t+r,e.length):e.length,a=r;a<s;a+=t)l[0]=e[a],l[1]=e[a+1],l[2]=e[a+2],l[3]=e[a+3],i(l,l,o),e[a]=l[0],e[a+1]=l[1],e[a+2]=l[2],e[a+3]=l[3];return e}}(),vec4.str=function(e){return"vec4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"},"undefined"!=typeof exports&&(exports.vec4=vec4);var mat2={},mat2Identity=new Float32Array([1,0,0,1]);if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;if(mat2.create=function(){return new Float32Array(mat2Identity)},mat2.clone=function(e){var t=new Float32Array(4);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t},mat2.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e},mat2.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=1,e},mat2.transpose=function(e,t){if(e===t){var r=t[1];e[1]=t[2],e[2]=r}else e[0]=t[0],e[1]=t[2],e[2]=t[1],e[3]=t[3];return e},mat2.invert=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=r*o-i*n;return a?(a=1/a,e[0]=o*a,e[1]=-n*a,e[2]=-i*a,e[3]=r*a,e):null},mat2.adjoint=function(e,t){var r=t[0];return e[0]=t[3],e[1]=-t[1],e[2]=-t[2],e[3]=r,e},mat2.determinant=function(e){return e[0]*e[3]-e[2]*e[1]},mat2.mul=mat2.multiply=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=r[0],l=r[1],c=r[2],h=r[3];return e[0]=n*s+i*c,e[1]=n*l+i*h,e[2]=o*s+a*c,e[3]=o*l+a*h,e},mat2.rotate=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(r),l=Math.cos(r);return e[0]=n*l+i*s,e[1]=n*-s+i*l,e[2]=o*l+a*s,e[3]=o*-s+a*l,e},mat2.scale=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=r[0],l=r[1];return e[0]=n*s,e[1]=i*l,e[2]=o*s,e[3]=a*l,e},mat2.str=function(e){return"mat2("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"},"undefined"!=typeof exports&&(exports.mat2=mat2),void 0===mat3)var mat3={};var mat3Identity=new Float32Array([1,0,0,0,1,0,0,0,1]);if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;if(mat3.create=function(){return new Float32Array(mat3Identity)},mat3.clone=function(e){var t=new Float32Array(9);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t},mat3.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e},mat3.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=1,e[5]=0,e[6]=0,e[7]=0,e[8]=1,e},mat3.transpose=function(e,t){if(e===t){var r=t[1],n=t[2],i=t[5];e[1]=t[3],e[2]=t[6],e[3]=r,e[5]=t[7],e[6]=n,e[7]=i}else e[0]=t[0],e[1]=t[3],e[2]=t[6],e[3]=t[1],e[4]=t[4],e[5]=t[7],e[6]=t[2],e[7]=t[5],e[8]=t[8];return e},mat3.invert=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=t[4],s=t[5],l=t[6],c=t[7],h=t[8],u=h*a-s*c,d=-h*o+s*l,f=c*o-a*l,m=r*u+n*d+i*f;return m?(m=1/m,e[0]=u*m,e[1]=(-h*n+i*c)*m,e[2]=(s*n-i*a)*m,e[3]=d*m,e[4]=(h*r-i*l)*m,e[5]=(-s*r+i*o)*m,e[6]=f*m,e[7]=(-c*r+n*l)*m,e[8]=(a*r-n*o)*m,e):null},mat3.adjoint=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=t[4],s=t[5],l=t[6],c=t[7],h=t[8];return e[0]=a*h-s*c,e[1]=i*c-n*h,e[2]=n*s-i*a,e[3]=s*l-o*h,e[4]=r*h-i*l,e[5]=i*o-r*s,e[6]=o*c-a*l,e[7]=n*l-r*c,e[8]=r*a-n*o,e},mat3.determinant=function(e){var t=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],s=e[6],l=e[7],c=e[8];return t*(c*o-a*l)+r*(-c*i+a*s)+n*(l*i-o*s)},mat3.mul=mat3.multiply=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=t[4],l=t[5],c=t[6],h=t[7],u=t[8],d=r[0],f=r[1],m=r[2],v=r[3],p=r[4],g=r[5],x=r[6],w=r[7],b=r[8];return e[0]=d*n+f*a+m*c,e[1]=d*i+f*s+m*h,e[2]=d*o+f*l+m*u,e[3]=v*n+p*a+g*c,e[4]=v*i+p*s+g*h,e[5]=v*o+p*l+g*u,e[6]=x*n+w*a+b*c,e[7]=x*i+w*s+b*h,e[8]=x*o+w*l+b*u,e},mat3.str=function(e){return"mat3("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+")"},"undefined"!=typeof exports&&(exports.mat3=mat3),void 0===mat4)var mat4={};var mat4Identity=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;if(mat4.create=function(){return new Float32Array(mat4Identity)},mat4.clone=function(e){var t=new Float32Array(16);return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t},mat4.copy=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},mat4.identity=function(e){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},mat4.transpose=function(e,t){if(e===t){var r=t[1],n=t[2],i=t[3],o=t[6],a=t[7],s=t[11];e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=r,e[6]=t[9],e[7]=t[13],e[8]=n,e[9]=o,e[11]=t[14],e[12]=i,e[13]=a,e[14]=s}else e[0]=t[0],e[1]=t[4],e[2]=t[8],e[3]=t[12],e[4]=t[1],e[5]=t[5],e[6]=t[9],e[7]=t[13],e[8]=t[2],e[9]=t[6],e[10]=t[10],e[11]=t[14],e[12]=t[3],e[13]=t[7],e[14]=t[11],e[15]=t[15];return e},mat4.invert=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=t[4],s=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],m=t[12],v=t[13],p=t[14],g=t[15],x=r*s-n*a,w=r*l-i*a,b=r*c-o*a,y=n*l-i*s,T=n*c-o*s,S=i*c-o*l,C=h*v-u*m,E=h*p-d*m,_=h*g-f*m,R=u*p-d*v,D=u*g-f*v,P=d*g-f*p,M=x*P-w*D+b*R+y*_-T*E+S*C;return M?(M=1/M,e[0]=(s*P-l*D+c*R)*M,e[1]=(i*D-n*P-o*R)*M,e[2]=(v*S-p*T+g*y)*M,e[3]=(d*T-u*S-f*y)*M,e[4]=(l*_-a*P-c*E)*M,e[5]=(r*P-i*_+o*E)*M,e[6]=(p*b-m*S-g*w)*M,e[7]=(h*S-d*b+f*w)*M,e[8]=(a*D-s*_+c*C)*M,e[9]=(n*_-r*D-o*C)*M,e[10]=(m*T-v*b+g*x)*M,e[11]=(u*b-h*T-f*x)*M,e[12]=(s*E-a*R-l*C)*M,e[13]=(r*R-n*E+i*C)*M,e[14]=(v*w-m*y-p*x)*M,e[15]=(h*y-u*w+d*x)*M,e):null},mat4.adjoint=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=t[4],s=t[5],l=t[6],c=t[7],h=t[8],u=t[9],d=t[10],f=t[11],m=t[12],v=t[13],p=t[14],g=t[15];return e[0]=s*(d*g-f*p)-u*(l*g-c*p)+v*(l*f-c*d),e[1]=-(n*(d*g-f*p)-u*(i*g-o*p)+v*(i*f-o*d)),e[2]=n*(l*g-c*p)-s*(i*g-o*p)+v*(i*c-o*l),e[3]=-(n*(l*f-c*d)-s*(i*f-o*d)+u*(i*c-o*l)),e[4]=-(a*(d*g-f*p)-h*(l*g-c*p)+m*(l*f-c*d)),e[5]=r*(d*g-f*p)-h*(i*g-o*p)+m*(i*f-o*d),e[6]=-(r*(l*g-c*p)-a*(i*g-o*p)+m*(i*c-o*l)),e[7]=r*(l*f-c*d)-a*(i*f-o*d)+h*(i*c-o*l),e[8]=a*(u*g-f*v)-h*(s*g-c*v)+m*(s*f-c*u),e[9]=-(r*(u*g-f*v)-h*(n*g-o*v)+m*(n*f-o*u)),e[10]=r*(s*g-c*v)-a*(n*g-o*v)+m*(n*c-o*s),e[11]=-(r*(s*f-c*u)-a*(n*f-o*u)+h*(n*c-o*s)),e[12]=-(a*(u*p-d*v)-h*(s*p-l*v)+m*(s*d-l*u)),e[13]=r*(u*p-d*v)-h*(n*p-i*v)+m*(n*d-i*u),e[14]=-(r*(s*p-l*v)-a*(n*p-i*v)+m*(n*l-i*s)),e[15]=r*(s*d-l*u)-a*(n*d-i*u)+h*(n*l-i*s),e},mat4.determinant=function(e){var t=e[0],r=e[1],n=e[2],i=e[3],o=e[4],a=e[5],s=e[6],l=e[7],c=e[8],h=e[9],u=e[10],d=e[11],f=e[12],m=e[13],v=e[14],p=e[15];return(t*a-r*o)*(u*p-d*v)-(t*s-n*o)*(h*p-d*m)+(t*l-i*o)*(h*v-u*m)+(r*s-n*a)*(c*p-d*f)-(r*l-i*a)*(c*v-u*f)+(n*l-i*s)*(c*m-h*f)},mat4.mul=mat4.multiply=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=t[4],l=t[5],c=t[6],h=t[7],u=t[8],d=t[9],f=t[10],m=t[11],v=t[12],p=t[13],g=t[14],x=t[15],w=r[0],b=r[1],y=r[2],T=r[3];return e[0]=w*n+b*s+y*u+T*v,e[1]=w*i+b*l+y*d+T*p,e[2]=w*o+b*c+y*f+T*g,e[3]=w*a+b*h+y*m+T*x,w=r[4],b=r[5],y=r[6],T=r[7],e[4]=w*n+b*s+y*u+T*v,e[5]=w*i+b*l+y*d+T*p,e[6]=w*o+b*c+y*f+T*g,e[7]=w*a+b*h+y*m+T*x,w=r[8],b=r[9],y=r[10],T=r[11],e[8]=w*n+b*s+y*u+T*v,e[9]=w*i+b*l+y*d+T*p,e[10]=w*o+b*c+y*f+T*g,e[11]=w*a+b*h+y*m+T*x,w=r[12],b=r[13],y=r[14],T=r[15],e[12]=w*n+b*s+y*u+T*v,e[13]=w*i+b*l+y*d+T*p,e[14]=w*o+b*c+y*f+T*g,e[15]=w*a+b*h+y*m+T*x,e},mat4.translate=function(e,t,r){var n,i,o,a,s,l,c,h,u,d,f,m,v=r[0],p=r[1],g=r[2];return e[15]=t===e?(e[12]=t[0]*v+t[4]*p+t[8]*g+t[12],e[13]=t[1]*v+t[5]*p+t[9]*g+t[13],e[14]=t[2]*v+t[6]*p+t[10]*g+t[14],t[3]*v+t[7]*p+t[11]*g+t[15]):(n=t[0],i=t[1],o=t[2],a=t[3],s=t[4],l=t[5],c=t[6],h=t[7],u=t[8],d=t[9],f=t[10],m=t[11],e[0]=n,e[1]=i,e[2]=o,e[3]=a,e[4]=s,e[5]=l,e[6]=c,e[7]=h,e[8]=u,e[9]=d,e[10]=f,e[11]=m,e[12]=n*v+s*p+u*g+t[12],e[13]=i*v+l*p+d*g+t[13],e[14]=o*v+c*p+f*g+t[14],a*v+h*p+m*g+t[15]),e},mat4.scale=function(e,t,r){var n=r[0],i=r[1],o=r[2];return e[0]=t[0]*n,e[1]=t[1]*n,e[2]=t[2]*n,e[3]=t[3]*n,e[4]=t[4]*i,e[5]=t[5]*i,e[6]=t[6]*i,e[7]=t[7]*i,e[8]=t[8]*o,e[9]=t[9]*o,e[10]=t[10]*o,e[11]=t[11]*o,e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e},mat4.rotate=function(e,t,r,n){var i,o,a,s,l,c,h,u,d,f,m,v,p,g,x,w,b,y,T,S,C,E,_,R,D=n[0],P=n[1],M=n[2],F=Math.sqrt(D*D+P*P+M*M);return Math.abs(F)<GLMAT_EPSILON?null:(D*=F=1/F,P*=F,M*=F,i=Math.sin(r),a=1-(o=Math.cos(r)),s=t[0],l=t[1],c=t[2],h=t[3],u=t[4],d=t[5],f=t[6],m=t[7],v=t[8],p=t[9],g=t[10],x=t[11],w=D*D*a+o,b=P*D*a+M*i,y=M*D*a-P*i,T=D*P*a-M*i,S=P*P*a+o,C=M*P*a+D*i,E=D*M*a+P*i,_=P*M*a-D*i,R=M*M*a+o,e[0]=s*w+u*b+v*y,e[1]=l*w+d*b+p*y,e[2]=c*w+f*b+g*y,e[3]=h*w+m*b+x*y,e[4]=s*T+u*S+v*C,e[5]=l*T+d*S+p*C,e[6]=c*T+f*S+g*C,e[7]=h*T+m*S+x*C,e[8]=s*E+u*_+v*R,e[9]=l*E+d*_+p*R,e[10]=c*E+f*_+g*R,e[11]=h*E+m*_+x*R,t!==e&&(e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e)},mat4.rotateX=function(e,t,r){var n=Math.sin(r),i=Math.cos(r),o=t[4],a=t[5],s=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11];return t!==e&&(e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[4]=o*i+c*n,e[5]=a*i+h*n,e[6]=s*i+u*n,e[7]=l*i+d*n,e[8]=c*i-o*n,e[9]=h*i-a*n,e[10]=u*i-s*n,e[11]=d*i-l*n,e},mat4.rotateY=function(e,t,r){var n=Math.sin(r),i=Math.cos(r),o=t[0],a=t[1],s=t[2],l=t[3],c=t[8],h=t[9],u=t[10],d=t[11];return t!==e&&(e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i-c*n,e[1]=a*i-h*n,e[2]=s*i-u*n,e[3]=l*i-d*n,e[8]=o*n+c*i,e[9]=a*n+h*i,e[10]=s*n+u*i,e[11]=l*n+d*i,e},mat4.rotateZ=function(e,t,r){var n=Math.sin(r),i=Math.cos(r),o=t[0],a=t[1],s=t[2],l=t[3],c=t[4],h=t[5],u=t[6],d=t[7];return t!==e&&(e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15]),e[0]=o*i+c*n,e[1]=a*i+h*n,e[2]=s*i+u*n,e[3]=l*i+d*n,e[4]=c*i-o*n,e[5]=h*i-a*n,e[6]=u*i-s*n,e[7]=d*i-l*n,e},mat4.fromRotationTranslation=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=n+n,l=i+i,c=o+o,h=n*s,u=n*l,d=n*c,f=i*l,m=i*c,v=o*c,p=a*s,g=a*l,x=a*c;return e[0]=1-(f+v),e[1]=u+x,e[2]=d-g,e[3]=0,e[4]=u-x,e[5]=1-(h+v),e[6]=m+p,e[7]=0,e[8]=d+g,e[9]=m-p,e[10]=1-(h+f),e[11]=0,e[12]=r[0],e[13]=r[1],e[14]=r[2],e[15]=1,e},mat4.frustum=function(e,t,r,n,i,o,a){var s=1/(r-t),l=1/(i-n),c=1/(o-a);return e[0]=2*o*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=2*o*l,e[6]=0,e[7]=0,e[8]=(r+t)*s,e[9]=(i+n)*l,e[10]=(a+o)*c,e[11]=-1,e[12]=0,e[13]=0,e[14]=a*o*2*c,e[15]=0,e},mat4.perspective=function(e,t,r,n,i){var o=1/Math.tan(t/2),a=1/(n-i);return e[0]=o/r,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=o,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=(i+n)*a,e[11]=-1,e[12]=0,e[13]=0,e[14]=2*i*n*a,e[15]=0,e},mat4.ortho=function(e,t,r,n,i,o,a){var s=1/(t-r),l=1/(n-i),c=1/(o-a);return e[0]=-2*s,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=-2*l,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=2*c,e[11]=0,e[12]=(t+r)*s,e[13]=(i+n)*l,e[14]=(a+o)*c,e[15]=1,e},mat4.lookAt=function(e,t,r,n){var i,o,a,s,l,c,h,u,d,f,m=t[0],v=t[1],p=t[2],g=n[0],x=n[1],w=n[2],b=r[0],y=r[1],T=r[2];return Math.abs(m-b)<GLMAT_EPSILON&&Math.abs(v-y)<GLMAT_EPSILON&&Math.abs(p-T)<GLMAT_EPSILON?mat4.identity(e):(h=m-b,u=v-y,d=p-T,i=x*(d*=f=1/Math.sqrt(h*h+u*u+d*d))-w*(u*=f),o=w*(h*=f)-g*d,a=g*u-x*h,(f=Math.sqrt(i*i+o*o+a*a))?(i*=f=1/f,o*=f,a*=f):a=o=i=0,s=u*a-d*o,l=d*i-h*a,c=h*o-u*i,(f=Math.sqrt(s*s+l*l+c*c))?(s*=f=1/f,l*=f,c*=f):c=l=s=0,e[0]=i,e[1]=s,e[2]=h,e[3]=0,e[4]=o,e[5]=l,e[6]=u,e[7]=0,e[8]=a,e[9]=c,e[10]=d,e[11]=0,e[12]=-(i*m+o*v+a*p),e[13]=-(s*m+l*v+c*p),e[14]=-(h*m+u*v+d*p),e[15]=1,e)},mat4.str=function(e){return"mat4("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+", "+e[4]+", "+e[5]+", "+e[6]+", "+e[7]+", "+e[8]+", "+e[9]+", "+e[10]+", "+e[11]+", "+e[12]+", "+e[13]+", "+e[14]+", "+e[15]+")"},"undefined"!=typeof exports&&(exports.mat4=mat4),void 0===quat)var quat={};var quatIdentity=new Float32Array([0,0,0,1]);if(!GLMAT_EPSILON)GLMAT_EPSILON=1e-6;quat.create=function(){return new Float32Array(quatIdentity)},quat.clone=vec4.clone,quat.fromValues=vec4.fromValues,quat.copy=vec4.copy,quat.set=vec4.set,quat.identity=function(e){return e[0]=0,e[1]=0,e[2]=0,e[3]=1,e},quat.setAxisAngle=function(e,t,r){r*=.5;var n=Math.sin(r);return e[0]=n*t[0],e[1]=n*t[1],e[2]=n*t[2],e[3]=Math.cos(r),e},quat.add=vec4.add,quat.mul=quat.multiply=function(e,t,r){var n=t[0],i=t[1],o=t[2],a=t[3],s=r[0],l=r[1],c=r[2],h=r[3];return e[0]=n*h+a*s+i*c-o*l,e[1]=i*h+a*l+o*s-n*c,e[2]=o*h+a*c+n*l-i*s,e[3]=a*h-n*s-i*l-o*c,e},quat.scale=vec4.scale,quat.rotateX=function(e,t,r){r*=.5;var n=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(r),l=Math.cos(r);return e[0]=n*l+a*s,e[1]=i*l+o*s,e[2]=o*l-i*s,e[3]=a*l-n*s,e},quat.rotateY=function(e,t,r){r*=.5;var n=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(r),l=Math.cos(r);return e[0]=n*l-o*s,e[1]=i*l+a*s,e[2]=o*l+n*s,e[3]=a*l-i*s,e},quat.rotateZ=function(e,t,r){r*=.5;var n=t[0],i=t[1],o=t[2],a=t[3],s=Math.sin(r),l=Math.cos(r);return e[0]=n*l+i*s,e[1]=i*l-n*s,e[2]=o*l+a*s,e[3]=a*l-o*s,e},quat.calculateW=function(e,t){var r=t[0],n=t[1],i=t[2];return e[0]=r,e[1]=n,e[2]=i,e[3]=-Math.sqrt(Math.abs(1-r*r-n*n-i*i)),e},quat.dot=vec4.dot,quat.lerp=vec4.lerp,quat.slerp=function(e,t,r,n){var i,o,a,s,l=t[0],c=t[1],h=t[2],u=t[3],d=r[0],f=r[1],m=r[2],v=t[3],p=l*d+c*f+h*m+u*v;return 1<=Math.abs(p)?(e!==t&&(e[0]=l,e[1]=c,e[2]=h,e[3]=u),e):(i=Math.acos(p),o=Math.sqrt(1-p*p),Math.abs(o)<.001?(e[0]=.5*l+.5*d,e[1]=.5*c+.5*f,e[2]=.5*h+.5*m,e[3]=.5*u+.5*v):(a=Math.sin((1-n)*i)/o,s=Math.sin(n*i)/o,e[0]=l*a+d*s,e[1]=c*a+f*s,e[2]=h*a+m*s,e[3]=u*a+v*s),e)},quat.invert=function(e,t){var r=t[0],n=t[1],i=t[2],o=t[3],a=r*r+n*n+i*i+o*o,s=a?1/a:0;return e[0]=-r*s,e[1]=-n*s,e[2]=-i*s,e[3]=o*s,e},quat.conjugate=function(e,t){return e[0]=-t[0],e[1]=-t[1],e[2]=-t[2],e[3]=t[3],e},quat.len=quat.length=vec4.length,quat.sqrLen=quat.squaredLength=vec4.squaredLength,quat.normalize=vec4.normalize,quat.str=function(e){return"quat("+e[0]+", "+e[1]+", "+e[2]+", "+e[3]+")"};var EPSILON=1e-6;if(void 0===mat3)mat3={};if(mat3.normalize=function(e,t){var r;return r=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]),e[0]=t[0]/r,e[1]=t[1]/r,e[2]=t[2]/r,r=Math.sqrt(t[3]*t[3]+t[4]*t[4]+t[5]*t[5]),e[3]=t[3]/r,e[4]=t[4]/r,e[5]=t[5]/r,r=Math.sqrt(t[6]*t[6]+t[7]*t[7]+t[8]*t[8]),e[6]=t[6]/r,e[7]=t[7]/r,e[8]=t[8]/r,e},void 0===mat4)mat4={};if(mat4.submat3=function(e,t,r){return e[0]=t[0+r[0]+4*r[1]],e[1]=t[1+r[0]+4*r[1]],e[2]=t[2+r[0]+4*r[1]],e[3]=t[4+r[0]+4*r[1]],e[4]=t[5+r[0]+4*r[1]],e[5]=t[6+r[0]+4*r[1]],e[6]=t[8+r[0]+4*r[1]],e[7]=t[9+r[0]+4*r[1]],e[8]=t[10+r[0]+4*r[1]],e},mat4.setsubmat3=function(e,t,r){return e[0+r[0]+4*r[1]]=t[0],e[1+r[0]+4*r[1]]=t[1],e[2+r[0]+4*r[1]]=t[2],e[4+r[0]+4*r[1]]=t[3],e[5+r[0]+4*r[1]]=t[4],e[6+r[0]+4*r[1]]=t[5],e[8+r[0]+4*r[1]]=t[6],e[9+r[0]+4*r[1]]=t[7],e[10+r[0]+4*r[1]]=t[8],e},mat4.rotation=function(e,t){return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=0,e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=0,e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,e},mat4.translation=function(e,t){return e[0]=t[12],e[1]=t[13],e[2]=t[14],e},mat4.getScale=function(e,t){return e[0]=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]+t[3]*t[3]),e[1]=Math.sqrt(t[4]*t[4]+t[5]*t[5]+t[6]*t[6]+t[7]*t[7]),e[2]=Math.sqrt(t[8]*t[8]+t[9]*t[9]+t[10]*t[10]+t[11]*t[11]),e},mat4.normalize=function(e,t){var r;return r=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]+t[3]*t[3]),e[0]=t[0]/r,e[1]=t[1]/r,e[2]=t[2]/r,e[3]=t[3]/r,r=Math.sqrt(t[4]*t[4]+t[5]*t[5]+t[6]*t[6]+t[7]*t[7]),e[4]=t[4]/r,e[5]=t[5]/r,e[6]=t[6]/r,e[7]=t[7]/r,r=Math.sqrt(t[8]*t[8]+t[9]*t[9]+t[10]*t[10]+t[11]*t[11]),e[8]=t[8]/r,e[9]=t[9]/r,e[10]=t[10]/r,e[11]=t[11]/r,r=Math.sqrt(t[12]*t[12]+t[13]*t[13]+t[14]*t[14]+t[15]*t[15]),e[12]=t[12]/r,e[13]=t[13]/r,e[14]=t[14]/r,e[15]=t[15]/r,e},mat4.fromRotationTranslationScale=function(e,t,r,n){return mat4.fromRotationTranslation(e,t,r),mat4.scale(e,e,n),e},mat4.fromTranslation=function(e,t){return e[0]=1,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e[5]=1,e[6]=0,e[7]=0,e[8]=0,e[9]=0,e[10]=1,e[11]=0,e[12]=t[0],e[13]=t[1],e[14]=t[2],e[15]=1,e},mat4.decompose=function(e,t,r,n){mat4.translation(e,n),quat.fromMat4(t,n),mat4.getScale(r,n)},mat4.isIdentity=function(e){return!(Math.abs(e[0]-1)>EPSILON)&&(!(Math.abs(e[5]-1)>EPSILON)&&(!(Math.abs(e[10]-1)>EPSILON)&&(!(Math.abs(e[15]-1)>EPSILON)&&(!(Math.abs(e[1])>EPSILON)&&(!(Math.abs(e[2])>EPSILON)&&(!(Math.abs(e[3])>EPSILON)&&(!(Math.abs(e[4])>EPSILON)&&(!(Math.abs(e[6])>EPSILON)&&(!(Math.abs(e[7])>EPSILON)&&(!(Math.abs(e[8])>EPSILON)&&(!(Math.abs(e[9])>EPSILON)&&(!(Math.abs(e[11])>EPSILON)&&(!(Math.abs(e[12])>EPSILON)&&(!(Math.abs(e[13])>EPSILON)&&!(Math.abs(e[14])>EPSILON)))))))))))))))},void 0===quat)quat={};if(quat.euler=function(e,t,r,n){var i=2*Math.PI/360,o=quat.create(),a=vec3.fromValues(0,0,1);return quat.setAxisAngle(e,a,i*n),vec3.set(a,0,1,0),quat.setAxisAngle(o,a,i*r),quat.mul(e,e,o),vec3.set(a,1,0,0),quat.setAxisAngle(o,a,i*t),quat.mul(e,e,o),e},quat.getEuler=function(r,e){var n=360/(2*Math.PI),i=mat4.fromRotationTranslation(mat4.create(),e,[0,0,0]),t=function(e,t){return Math.abs(e-t)<=EPSILON};if(t(Math.abs(i[2]),1))t(i[2],-1)?(r[0]=0,r[1]=90,r[2]=-n*Math.atan2(i[4],i[8])):(r[0]=0,r[1]=-90,r[2]=n*Math.atan2(-i[4],-i[8]));else{var o=function(e){var t=Math.cos(e);r[0]=Math.atan2(i[6]/t,i[10]/t)*n,r[1]=e*n,r[2]=Math.atan2(i[1]/t,i[0]/t)*n},a=-Math.asin(i[2]);o(a),function(e,t){var r=quat.euler(quat.create(),t[0],t[1],t[2]);quat.normalize(r,r);var n=quat.rotationDifference(quat.create(),e,r);return Math.abs(1-n[3])<EPSILON}(e,r)||o(a=Math.PI-a)}return r},quat.fromMat3=function(e,t){var r=t[0]+t[4]+t[8];if(EPSILON<r){var n=2*Math.sqrt(1+r);e[3]=.25*n,e[0]=(t[5]-t[7])/n,e[1]=(t[6]-t[2])/n,e[2]=(t[1]-t[3])/n}else if(t[0]>t[4]&&t[0]>t[8]){n=2*Math.sqrt(1+t[0]-t[4]-t[8]);e[3]=(t[5]-t[7])/n,e[0]=.25*n,e[1]=(t[1]+t[3])/n,e[2]=(t[6]+t[2])/n}else if(t[4]>t[8]){n=2*Math.sqrt(1+t[4]-t[0]-t[8]);e[3]=(t[6]-t[2])/n,e[0]=(t[1]+t[3])/n,e[1]=.25*n,e[2]=(t[5]+t[7])/n}else{n=2*Math.sqrt(1+t[8]-t[0]-t[4]);e[3]=(t[1]-t[3])/n,e[0]=(t[6]+t[2])/n,e[1]=(t[5]+t[7])/n,e[2]=.25*n}return e},quat.fromMat4=function(e,t){var r=mat4.submat3(mat3.create(),t,[0,0]);return mat3.normalize(r,r),quat.fromMat3(e,r),quat.normalize(e,e),e},quat.rotationDifference=function(e,t,r){return quat.multiply(e,r,quat.conjugate(quat.create(),t)),e},quat.angle=function(e,t){var r=e[0]*t[0]+e[1]*t[1]+e[2]*t[2]+e[3]*t[3];return Math.abs(1-r)<EPSILON&&(r=1),Math.abs(1+r)<EPSILON&&(r=-1),2*Math.acos(r)},quat.slerp=function(e,t,r,n){var i,o,a=t[0]*r[0]+t[1]*r[1]+t[2]*r[2]+t[3]*r[3];if(Math.abs(1-a)<EPSILON&&(a=1),Math.abs(1+a)<EPSILON&&(a=-1),1-Math.abs(a)>EPSILON){var s=Math.acos(Math.abs(a)),l=Math.sin(s);i=Math.sin((1-n)*s/l),o=Math.sin(n*s/l)}else i=1-n,o=n;a<0&&(o=-o);var c=quat.scale(quat.create(),t,i),h=quat.scale(quat.create(),r,o);return quat.add(e,c,h),e},quat.getTwist=function(e,t){var r=vec3.create(),n=vec3.transformQuat(vec3.create(),t,quat.euler(quat.create(),90,0,0)),i=vec3.dot(t,n);.6<Math.abs(i)&&(n=vec3.transformQuat(t,quat.euler(quat.create(),0,90,0))),vec3.normalize(n,n),vec3.cross(r,t,n),vec3.normalize(r,r);var o=vec3.transformQuat(vec3.create(),r,e),a=vec3.sub(vec3.create(),o,vec3.scale(vec3.create(),t,vec3.dot(o,t)));return vec3.normalize(a,a),Math.acos(vec3.dot(r,a))},void 0===vec3)vec3={};function lerp(e,t,r){return e+(t-e)*r}function clampAngle(e,t,r){return e<-2*Math.PI&&(e+=2*Math.PI),e>2*Math.PI&&(e-=2*Math.PI),e=Math.max(t,e),e=Math.min(r,e)}function nextLowestPowerOfTwo(e){return Math.max(Math.min(Math.pow(2,Math.floor(Math.log(e)/Math.log(2))),2048),1)}function nextHighestPowerOfTwo(e){return Math.max(Math.min(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))),2048),1)}vec3.transformVertexArrayMat4=function(e,t,r){for(var n=0,i=0,o=0,a=r;a<e.length;a+=3)n=e[a],i=e[a+1],o=e[a+2],e[a]=t[0]*n+t[4]*i+t[8]*o+t[12],e[a+1]=t[1]*n+t[5]*i+t[9]*o+t[13],e[a+2]=t[2]*n+t[6]*i+t[10]*o+t[14];return e},vec3.transformVertexArrayQuat=function(e,t,r){for(var n=0,i=0,o=0,a=t[0],s=t[1],l=t[2],c=t[3],h=0,u=0,d=0,f=0,m=r;m<e.length;m+=3)n=e[m],i=e[m+1],h=c*n+s*(o=e[m+2])-l*i,u=c*i+l*n-a*o,d=c*o+a*i-s*n,f=-a*n-s*i-l*o,e[m]=h*c+f*-a+u*-l-d*-s,e[m+1]=u*c+f*-s+d*-a-h*-l,e[m+2]=d*c+f*-l+h*-s-u*-a;return e},vec3.scaleAndAdd=function(e,t,r,n){return e[0]=t[0]+r[0]*n,e[1]=t[1]+r[1]*n,e[2]=t[2]+r[2]*n,e},function(a){var s={ArrayBuffer:"undefined"!=typeof ArrayBuffer,DataView:"undefined"!=typeof DataView&&("getFloat64"in DataView.prototype||"getFloat64"in new DataView(new ArrayBuffer(1))),NodeBuffer:"undefined"!=typeof Buffer&&"readInt16LE"in Buffer.prototype},l={Int8:1,Int16:2,Int32:4,Uint8:1,Uint16:2,Uint32:4,Float32:4,Float64:8},c={Int8:"Int8",Int16:"Int16",Int32:"Int32",Uint8:"UInt8",Uint16:"UInt16",Uint32:"UInt32",Float32:"Float",Float64:"Double"},h=function(e,t,r,n){if(!(this instanceof h))throw new Error("jDataView constructor may not be called as a function");if(this.buffer=e,!(s.NodeBuffer&&e instanceof Buffer||s.ArrayBuffer&&e instanceof ArrayBuffer||"string"==typeof e))throw new TypeError("jDataView buffer has an incompatible type");this._isArrayBuffer=s.ArrayBuffer&&e instanceof ArrayBuffer,this._isDataView=s.DataView&&this._isArrayBuffer,this._isNodeBuffer=s.NodeBuffer&&e instanceof Buffer,this._littleEndian=void 0!==n&&n;var i=this._isArrayBuffer?e.byteLength:e.length;if(void 0===t&&(t=0),this.byteOffset=t,void 0===r&&(r=i-t),this.byteLength=r,!this._isDataView){if("number"!=typeof t)throw new TypeError("jDataView byteOffset is not a number");if("number"!=typeof r)throw new TypeError("jDataView byteLength is not a number");if(t<0)throw new Error("jDataView byteOffset is negative");if(r<0)throw new Error("jDataView byteLength is negative")}if(this._isDataView&&(this._view=new DataView(e,t,r),this._start=0),i<(this._start=t)+r)throw new Error("jDataView (byteOffset + byteLength) value is out of bounds");if(this._offset=0,this._isDataView)for(var o in l)l.hasOwnProperty(o)&&function(r,n){var i=l[r];n["get"+r]=function(e,t){return void 0===t&&(t=n._littleEndian),void 0===e&&(e=n._offset),n._offset=e+i,n._view["get"+r](e,t)}}(o,this);else if(this._isNodeBuffer&&s.NodeBuffer)for(var o in l){if(l.hasOwnProperty(o))(function(e,r,n){var i=l[e];r["get"+e]=function(e,t){return void 0===t&&(t=r._littleEndian),void 0===e&&(e=r._offset),r._offset=e+i,r.buffer[n](r._start+e)}})(o,this,"Int8"===o||"Uint8"===o?"read"+c[o]:n?"read"+c[o]+"LE":"read"+c[o]+"BE")}else for(var o in l)l.hasOwnProperty(o)&&function(r,n){var i=l[r];n["get"+r]=function(e,t){if(void 0===t&&(t=n._littleEndian),void 0===e&&(e=n._offset),n._offset=e+i,n._isArrayBuffer&&(n._start+e)%i==0&&(1===i||t))return new a[r+"Array"](n.buffer,n._start+e,1)[0];if("number"!=typeof e)throw new TypeError("jDataView byteOffset is not a number");if(e+i>n.byteLength)throw new Error("jDataView (byteOffset + size) value is out of bounds");return n["_get"+r](n._start+e,t)}}(o,this)};if(h.createBuffer=s.NodeBuffer?function(){for(var e=new Buffer(arguments.length),t=0;t<arguments.length;++t)e[t]=arguments[t];return e}:s.ArrayBuffer?function(){for(var e=new ArrayBuffer(arguments.length),t=new Int8Array(e),r=0;r<arguments.length;++r)t[r]=arguments[r];return e}:function(){return String.fromCharCode.apply(null,arguments)},h.prototype={compatibility:s,getString:function(e,t){var r;if(void 0===t&&(t=this._offset),"number"!=typeof t)throw new TypeError("jDataView byteOffset is not a number");if(e<0||t+e>this.byteLength)throw new Error("jDataView length or (byteOffset+length) value is out of bounds");if(this._isNodeBuffer)r=this.buffer.toString("ascii",this._start+t,this._start+t+e);else{r="";for(var n=0;n<e;++n){var i=this.getUint8(t+n);r+=String.fromCharCode(127<i?65533:i)}}return this._offset=t+e,r},getChar:function(e){return this.getString(1,e)},tell:function(){return this._offset},seek:function(e){if("number"!=typeof e)throw new TypeError("jDataView byteOffset is not a number");if(e<0||e>this.byteLength)throw new Error("jDataView byteOffset value is out of bounds");return this._offset=e},_endianness:function(e,t,r,n){return e+(n?r-t-1:t)},_getFloat64:function(e,t){var r=this._getUint8(this._endianness(e,0,8,t)),n=this._getUint8(this._endianness(e,1,8,t)),i=this._getUint8(this._endianness(e,2,8,t)),o=this._getUint8(this._endianness(e,3,8,t)),a=this._getUint8(this._endianness(e,4,8,t)),s=this._getUint8(this._endianness(e,5,8,t)),l=this._getUint8(this._endianness(e,6,8,t)),c=this._getUint8(this._endianness(e,7,8,t)),h=1-2*(r>>7),u=((r<<1&255)<<3|n>>4)-(Math.pow(2,10)-1),d=(15&n)*Math.pow(2,48)+i*Math.pow(2,40)+o*Math.pow(2,32)+a*Math.pow(2,24)+s*Math.pow(2,16)+l*Math.pow(2,8)+c;return 1024===u?0!==d?NaN:h*(1/0):-1023===u?h*d*Math.pow(2,-1074):h*(1+d*Math.pow(2,-52))*Math.pow(2,u)},_getFloat32:function(e,t){var r=this._getUint8(this._endianness(e,0,4,t)),n=this._getUint8(this._endianness(e,1,4,t)),i=1-2*(r>>7),o=(r<<1&255|n>>7)-127,a=(127&n)<<16|this._getUint8(this._endianness(e,2,4,t))<<8|this._getUint8(this._endianness(e,3,4,t));return 128===o?0!==a?NaN:i*(1/0):-127===o?i*a*Math.pow(2,-149):i*(1+a*Math.pow(2,-23))*Math.pow(2,o)},_getInt32:function(e,t){var r=this._getUint32(e,t);return r>Math.pow(2,31)-1?r-Math.pow(2,32):r},_getUint32:function(e,t){var r=this._getUint8(this._endianness(e,0,4,t)),n=this._getUint8(this._endianness(e,1,4,t)),i=this._getUint8(this._endianness(e,2,4,t)),o=this._getUint8(this._endianness(e,3,4,t));return r*Math.pow(2,24)+(n<<16)+(i<<8)+o},_getInt16:function(e,t){var r=this._getUint16(e,t);return r>Math.pow(2,15)-1?r-Math.pow(2,16):r},_getUint16:function(e,t){return(this._getUint8(this._endianness(e,0,2,t))<<8)+this._getUint8(this._endianness(e,1,2,t))},_getInt8:function(e){var t=this._getUint8(e);return t>Math.pow(2,7)-1?t-Math.pow(2,8):t},_getUint8:function(e){return this._isArrayBuffer?new Uint8Array(this.buffer,e,1)[0]:this._isNodeBuffer?this.buffer[e]:255&this.buffer.charCodeAt(e)}},"undefined"!=typeof jQuery&&"1.6.2"<=jQuery.fn.jquery){jQuery.ajaxSetup({converters:{"* dataview":function(e){return new h(e)}},accepts:{dataview:"text/plain; charset=x-user-defined"},responseHandler:{dataview:function(e,t,r){"mozResponseArrayBuffer"in r?e.text=r.mozResponseArrayBuffer:"responseType"in r&&"arraybuffer"===r.responseType&&r.response?e.text=r.response:e.text="responseBody"in r?function(t){var r;try{r=IEBinaryToArray_ByteStr(t)}catch(e){window.execScript("Function IEBinaryToArray_ByteStr(Binary)\r\n\tIEBinaryToArray_ByteStr = CStr(Binary)\r\nEnd Function\r\nFunction IEBinaryToArray_ByteStr_Last(Binary)\r\n\tDim lastIndex\r\n\tlastIndex = LenB(Binary)\r\n\tif lastIndex mod 2 Then\r\n\t\tIEBinaryToArray_ByteStr_Last = AscB( MidB( Binary, lastIndex, 1 ) )\r\n\tElse\r\n\t\tIEBinaryToArray_ByteStr_Last = -1\r\n\tEnd If\r\nEnd Function\r\n","vbscript"),r=IEBinaryToArray_ByteStr(t)}for(var e,n=IEBinaryToArray_ByteStr_Last(t),i="",o=0,a=r.length%8;o<a;)e=r.charCodeAt(o++),i+=String.fromCharCode(255&e,e>>8);for(a=r.length;o<a;)i+=String.fromCharCode(255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8,255&(e=r.charCodeAt(o++)),e>>8);return-1<n&&(i+=String.fromCharCode(n)),i}(r.responseBody):r.responseText}}}),jQuery.ajaxPrefilter("dataview",function(e,t,r){jQuery.support.ajaxResponseType&&(e.hasOwnProperty("xhrFields")||(e.xhrFields={}),e.xhrFields.responseType="arraybuffer"),e.mimeType="text/plain; charset=x-user-defined"})}a.jDataView=(a.module||{}).exports=h,"undefined"!=typeof module&&(module.exports=h)}(this);var FrakClass=function(){};function FrakCallback(e,t){return function(){return t.apply(e,arguments)}}!function(){var r=!1,n=/\b_super\b/;this.FrakClass=function(){},FrakClass.extend=function(s){var i=this.prototype;r=!0;var l=new this;for(var e in r=!1,s)l[e]="function"==typeof s[e]&&"function"==typeof i[e]&&n.test(s[e])?function(r,n){return function(){var e=this._super;this._super=i[r];var t=n.apply(this,arguments);return this._super=e,t}}(e,s[e]):s[e];function t(){!r&&this.init&&this.init.apply(this,arguments)}return l._getset=function(t,e){var r,n,i,o=function(){return t},a=function(e){t=e};l[r="get"+e]=r in s?(n=s[r],function(){var e=this._super;this._super=o;var t=n.apply(this,arguments);return this._super=e,t}):o,l[r="set"+e]=r in s?(i=s[r],function(){var e=this._super;this._super=a;var t=i.apply(this,arguments);return this._super=e,t}):a},((t.prototype=l).constructor=t).extend=arguments.callee,t}}(),"undefined"!=typeof window&&(window.requestAnimFrame=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||function(e){window.setTimeout(e,16)}),"undefined"!=typeof window&&(window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})),"function"!=typeof String.prototype.format&&(String.prototype.format=function(){var r=arguments;return this.replace(/{(\d+)}/g,function(e,t){return void 0!==r[t]?r[t]:e})}),"function"!=typeof String.prototype.endsWith&&(String.prototype.endsWith=function(e){return-1!==this.indexOf(e,this.length-e.length)});var Logistics=function(){var t=!1;"undefined"!=typeof window&&(t="localStorage"in window&&null!==window.localStorage);var a=[],i=[],o=0,r=null,n=null,e=null,s={loadFromLocalStorage:!1,storeToLocalStorage:!1,loadFromFile:!1,enableCORS:!0,useCookies:!1,fallbackFromStorage:!1},l={text:{load:function(e){x(e)},parse:function(e,t){e.data=t.responseText},store:function(e){return e.data},restore:function(e,t){return t}},json:{load:function(e){x(e)},parse:function(t,e){try{t.data=JSON.parse(e.responseText)}catch(e){"undefined"!=typeof console&&console.error&&console.error("JSON parsing failed for "+t.url,e)}},store:function(e){return JSON.stringify(e.data)},restore:function(e,t){return t?JSON.parse(t):{}}},xml:{load:function(e){x(e)},parse:function(e,t){t.responseXML?e.data=t.responseXML:e.data=w(t.responseText)},store:function(e){return XMLSerializer?(new XMLSerializer).serializeToString(e.data):""},restore:function(e,t){return w(t)}},image:{load:function(e){e&&(e.data=new Image,e.useCORS&&(e.data.crossOrigin="Anonymous"),e.data.onload=function(){e.ready()},e.data.onerror=function(){e.failed()},e.data.src=e.url)},parse:function(e){},store:function(e){var t=document.createElement("canvas");t.width=e.data.width,t.height=e.data.height,t.getContext("2d").drawImage(e.data,0,0);var r=t.toDataURL("image/png");return t=null,r},restore:function(e,t){var r=new Image;return r.src=t,r}},binary:{load:function(e){x(e)},parse:function(e,t){e.data=t.response},store:function(e){for(var t="",r=new Uint8Array(e.data),n=r.byteLength,i=0;i<n;i++)t+=String.fromCharCode(r[i]);return window.btoa(t)},restore:function(e,t){for(var r=new ArrayBuffer(2*t.length),n=new Uint16Array(r),i=0,o=t.length;i<o;i++)n[i]=t.charCodeAt(i);return r}}},c=function(e,t,r,n,i){this.url=e,this.params=t,this.success=r,this.dataType=n,this.loaded=!1,this.data=!1,this.requestType=i,this.useCORS=!1,this.options={},this.successCallback=r,this.errorCallback=!1,this.alwaysCallback=!1,this.progressCallback=!1,this.setOption=function(e,t){this.options[e]=t},this.getOption=function(e){return this.options[e]},this.ready=function(){this.loaded=!0,o++,S(this),E()},this.failed=function(){o++,E(),C(this)},this.done=function(e){this.successCallback=e},this.fail=function(e){this.errorCallback=e},this.error=function(e){this.errorCallback=e},this.always=function(e){this.alwaysCallback=e},this.progress=function(e){this.progressCallback=e},this.toString=function(){return this.data}},h=function(e,t){this.urls=e,this.results={},this.loadedCount=0,this.count=0,this.successCallback=t,this.load=function(){var e=null,t=null;for(var r in this.urls)this.urls.hasOwnProperty(r)&&this.count++;for(var n in this.urls)(t=this.urls[n])&&t.url&&t.type&&((e=u(t.url,void 0,D(this,this.ready,n),t.type)).setOption("logistics.multi.key",n),e.fail(D(this,this.fail)))},this.ready=function(e,t,r){var n=r.getOption("logistics.multi.key");this.results[n]=e,this.loadedCount++,this.checkIfAllReady()},this.fail=function(e){this.loadedCount++,this.checkIfAllReady()},this.getKeyForURL=function(e){},this.checkIfAllReady=function(){this.loadedCount>=this.count&&"function"==typeof this.successCallback&&this.successCallback(this.results)}},u=function(e,t,r,n){var i="GET";"function"==typeof t?(r=t,t=void 0):t&&"object"==typeof t&&(i="POST");var o=new c(e,t,r,n,i);return s.enableCORS&&(o.useCORS=d(e)),o&&(a.push(o),f(o)),o},d=function(e){if("undefined"==typeof document)return!1;var t=e.match(/(https?:)?\/\/([^\/]+)\/(.*)/);return!!t&&t[1]!==document.location.origin},f=function(e){return m(e),!0},m=function(e){s.loadFromLocalStorage&&v(e)?p(e):g(e.dataType,"load")(e)},v=function(e){return!(!t||null===localStorage.getItem(e.url))},p=function(e){e.data=g(e.dataType,"restore")(e,T(e)),e.ready()},g=function(e,t){return l&&l[e]&&l[e][t]?l[e][t]:l&&l[e]?l[e]:function(){"undefined"!=typeof console&&console.warn&&console.warn("Method "+t+" for "+e+" not found")}},x=function(e){var t=b(e);if(!t||!e)throw"http failed";var r=e.url;t.open(e.requestType,r,!0),t.overrideMimeType&&t.overrideMimeType("text/plain"),"binary"==e.dataType&&(t.responseType="arraybuffer",e.useCORS&&t.setRequestHeader("Content-Type","application/x-3dtechdata")),e.useCORS&&s.useCookies&&(t.withCredentials=!0),t.onreadystatechange=function(){4==t.readyState?200==t.status?(e.loaded=!0,o++,g(e.dataType,"parse")(e,t),S(e)):(o++,C(e)):"function"==typeof e.progressCallback&&e.progressCallback(t)},t.ontimeout=function(){o++,C(e)},E(),t.send(null)},w=function(e){var t=null;if(!e||"string"!=typeof e)return t;window.DOMParser?t=(new DOMParser).parseFromString(e,"text/xml"):((t=new ActiveXObject("Microsoft.XMLDOM")).async=!1,t.loadXML(e));if(!t||t.getElementsByTagName("parsererror").length)throw"XML parsing failed";return t},b=function(e){var t=!1;if(e.useCORS&&window.XDomainRequest)try{t=new XDomainRequest}catch(e){t=!1}else if(XMLHttpRequest)try{t=new XMLHttpRequest}catch(e){t=!1}else if("undefined"!=typeof ActiveXObject)try{t=new ActiveXObject("Msxml2.XMLHTTP"),alert(2)}catch(e){try{t=new ActiveXObject("Microsoft.XMLHTTP"),alert(3)}catch(e){t=!1}}return t},y=function(e){if(t)try{localStorage[e.url]=g(e.dataType,"store")(e)}catch(e){console.warn("localStorage limit exceeded")}else console.warn("localStorage isn't supported")},T=function(e){return localStorage[e.url]},S=function(e){e&&"function"==typeof e.successCallback&&(e.successCallback(e.data,"success",e),_()),e&&s.storeToLocalStorage&&y(e)},C=function(e){e&&s.fallbackFromStorage&&v(e)?p(e):(e&&"function"==typeof e.errorCallback&&e.errorCallback(e,"error",""),_())},E=function(){n&&"function"==typeof n&&a.length&&o&&n(o/a.length)},_=function(){null===e&&(e=setTimeout(R,5))},R=function(){e=null,a.length==o&&r&&"function"==typeof r&&r()},D=function(e,t){return function(){return t.apply(e,arguments)}};return{count:function(){return a.length},loadedCount:function(){return o},clear:function(){a=[],o=0,!(i=[])},get:function(e,t,r,n,i){return u(e,t,r,toLowerCase(n))},getJSON:function(e,t,r,n){return u(e,t,r,"json",n)},getImage:function(e,t,r,n){return u(e,t,r,"image",n)},getBinary:function(e,t,r,n){return u(e,t,r,"binary",n)},getXML:function(e,t,r,n){return u(e,t,r,"xml",n)},getText:function(e,t,r,n){return u(e,t,r,"text",n)},getMultiple:function(e,t,r){var n;n=new h(e,t),i.push(n),n.load()},store:function(){!function(){if(t)for(var e in a)y(a[e]);else console.warn("localStorage isn't supported")}()},clearStorage:function(){localStorage.clear()},types:function(){return l},onFinishedLoading:function(e){r=e},onProgress:function(e){n=e},getQueue:function(){return a},getTypeFunction:function(e,t){return g(e,t)},setTypeFunction:function(e,t){return n=t,void((r=e)&&n&&(l[r]=n));var r,n},getOption:function(e){return s[e]},setOption:function(e,t){var r;r=t,s[e]=r}}}();!function(r,s,e,b){"use strict";function l(e,t,r){return setTimeout(c(e,r),t)}function n(e,t,r){return!!Array.isArray(e)&&(i(e,r[t],r),!0)}function i(e,t,r){var n;if(e)if(e.forEach)e.forEach(t,r);else if(e.length!==b)for(n=0;n<e.length;)t.call(r,e[n],n,e),n++;else for(n in e)e.hasOwnProperty(n)&&t.call(r,e[n],n,e)}function o(e,t,r){for(var n=Object.keys(t),i=0;i<n.length;)(!r||r&&e[n[i]]===b)&&(e[n[i]]=t[n[i]]),i++;return e}function a(e,t){return o(e,t,!0)}function t(e,t,r){var n,i=t.prototype;(n=e.prototype=Object.create(i)).constructor=e,n._super=i,r&&o(n,r)}function c(e,t){return function(){return e.apply(t,arguments)}}function h(e,t){return typeof e==Z?e.apply(t&&t[0]||b,t):e}function u(e,t){return e===b?t:e}function d(t,e,r){i(v(e),function(e){t.addEventListener(e,r,!1)})}function f(t,e,r){i(v(e),function(e){t.removeEventListener(e,r,!1)})}function y(e,t){for(;e;){if(e==t)return!0;e=e.parentNode}return!1}function m(e,t){return-1<e.indexOf(t)}function v(e){return e.trim().split(/\s+/g)}function p(e,t,r){if(e.indexOf&&!r)return e.indexOf(t);for(var n=0;n<e.length;){if(r&&e[n][r]==t||!r&&e[n]===t)return n;n++}return-1}function g(e){return Array.prototype.slice.call(e,0)}function x(e,r,t){for(var n=[],i=[],o=0;o<e.length;){var a=r?e[o][r]:e[o];p(i,a)<0&&n.push(e[o]),i[o]=a,o++}return t&&(n=r?n.sort(function(e,t){return e[r]>t[r]}):n.sort()),n}function w(e,t){for(var r,n,i=t[0].toUpperCase()+t.slice(1),o=0;o<K.length;){if((n=(r=K[o])?r+i:t)in e)return n;o++}return b}function T(e){var t=e.ownerDocument||e;return t.defaultView||t.parentWindow||r}function S(t,e){var r=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){h(t.options.enable,[t])&&r.handler(e)},this.init()}function C(e,t,r){var n=r.pointers.length,i=r.changedPointers.length,o=t&le&&n-i==0,a=t&(ce|he)&&n-i==0;r.isFirst=!!o,r.isFinal=!!a,o&&(e.session={}),r.eventType=t,function(e,t){var r=e.session,n=t.pointers,i=n.length;r.firstInput||(r.firstInput=E(t)),1<i&&!r.firstMultiple?r.firstMultiple=E(t):1===i&&(r.firstMultiple=!1);var o=r.firstInput,a=r.firstMultiple,s=a?a.center:o.center,l=t.center=_(n);t.timeStamp=ee(),t.deltaTime=t.timeStamp-o.timeStamp,t.angle=P(s,l),t.distance=D(s,l),f=r,m=t,v=m.center,p=f.offsetDelta||{},g=f.prevDelta||{},x=f.prevInput||{},(m.eventType===le||x.eventType===ce)&&(g=f.prevDelta={x:x.deltaX||0,y:x.deltaY||0},p=f.offsetDelta={x:v.x,y:v.y}),m.deltaX=g.x+(v.x-p.x),m.deltaY=g.y+(v.y-p.y),t.offsetDirection=R(t.deltaX,t.deltaY),t.scale=a?(u=a.pointers,d=n,D(d[0],d[1],be)/D(u[0],u[1],be)):1,t.rotation=a?(c=a.pointers,h=n,P(h[1],h[0],be)-P(c[1],c[0],be)):0,function(e,t){var r,n,i,o,a=e.lastInterval||t,s=t.timeStamp-a.timeStamp;if(t.eventType!=he&&(se<s||a.velocity===b)){var l=a.deltaX-t.deltaX,c=a.deltaY-t.deltaY,h={x:l/(u=s)||0,y:c/u||0};n=h.x,i=h.y,r=$(h.x)>$(h.y)?h.x:h.y,o=R(l,c),e.lastInterval=t}else r=a.velocity,n=a.velocityX,i=a.velocityY,o=a.direction;var u;t.velocity=r,t.velocityX=n,t.velocityY=i,t.direction=o}(r,t);var c,h;var u,d;var f,m,v,p,g,x;var w=e.element;y(t.srcEvent.target,w)&&(w=t.srcEvent.target),t.target=w}(e,r),e.emit("hammer.input",r),e.recognize(r),e.session.prevInput=r}function E(e){for(var t=[],r=0;r<e.pointers.length;)t[r]={clientX:J(e.pointers[r].clientX),clientY:J(e.pointers[r].clientY)},r++;return{timeStamp:ee(),pointers:t,center:_(t),deltaX:e.deltaX,deltaY:e.deltaY}}function _(e){var t=e.length;if(1===t)return{x:J(e[0].clientX),y:J(e[0].clientY)};for(var r=0,n=0,i=0;i<t;)r+=e[i].clientX,n+=e[i].clientY,i++;return{x:J(r/t),y:J(n/t)}}function R(e,t){return e===t?ue:$(e)>=$(t)?0<e?de:fe:0<t?me:ve}function D(e,t,r){r||(r=we);var n=t[r[0]]-e[r[0]],i=t[r[1]]-e[r[1]];return Math.sqrt(n*n+i*i)}function P(e,t,r){r||(r=we);var n=t[r[0]]-e[r[0]],i=t[r[1]]-e[r[1]];return 180*Math.atan2(i,n)/Math.PI}function M(){this.evEl=Te,this.evWin=Se,this.allow=!0,this.pressed=!1,S.apply(this,arguments)}function F(){this.evEl=_e,this.evWin=Re,S.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}function A(){this.evTarget="touchstart",this.evWin="touchstart touchmove touchend touchcancel",this.started=!1,S.apply(this,arguments)}function N(){this.evTarget=Me,this.targetIds={},S.apply(this,arguments)}function z(){S.apply(this,arguments);var e=c(this.handler,this);this.touch=new N(this.manager,e),this.mouse=new M(this.manager,e)}function B(e,t){this.manager=e,this.set(t)}function I(e){this.id=te++,this.manager=null,this.options=a(e||{},this.defaults),this.options.enable=u(this.options.enable,!0),this.state=Ue,this.simultaneous={},this.requireFail=[]}function L(e){return e==ve?"down":e==me?"up":e==de?"left":e==fe?"right":""}function U(e,t){var r=t.manager;return r?r.get(e):e}function O(){I.apply(this,arguments)}function k(){O.apply(this,arguments),this.pX=null,this.pY=null}function V(){O.apply(this,arguments)}function q(){I.apply(this,arguments),this._timer=null,this._input=null}function G(){O.apply(this,arguments)}function X(){O.apply(this,arguments)}function H(){I.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function j(e,t){return(t=t||{}).recognizers=u(t.recognizers,j.defaults.preset),new W(e,t)}function W(e,t){var r;t=t||{},this.options=a(t,j.defaults),this.options.inputTarget=this.options.inputTarget||e,this.handlers={},this.session={},this.recognizers=[],this.element=e,this.input=new((r=this).options.inputClass||(ne?F:ie?N:re?z:M))(r,C),this.touchAction=new B(this,this.options.touchAction),Y(this,!0),i(t.recognizers,function(e){var t=this.add(new e[0](e[1]));e[2]&&t.recognizeWith(e[2]),e[3]&&t.requireFailure(e[3])},this)}function Y(e,r){var n=e.element;n.style&&i(e.options.cssProps,function(e,t){n.style[w(n.style,t)]=r?e:""})}var K=["","webkit","moz","MS","ms","o"],Q=s.createElement("div"),Z="function",J=Math.round,$=Math.abs,ee=Date.now,te=1,re="ontouchstart"in r,ne=w(r,"PointerEvent")!==b,ie=re&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),oe="touch",ae="mouse",se=25,le=1,ce=4,he=8,ue=1,de=2,fe=4,me=8,ve=16,pe=de|fe,ge=me|ve,xe=pe|ge,we=["x","y"],be=["clientX","clientY"];S.prototype={handler:function(){},init:function(){this.evEl&&d(this.element,this.evEl,this.domHandler),this.evTarget&&d(this.target,this.evTarget,this.domHandler),this.evWin&&d(T(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&f(this.element,this.evEl,this.domHandler),this.evTarget&&f(this.target,this.evTarget,this.domHandler),this.evWin&&f(T(this.element),this.evWin,this.domHandler)}};var ye={mousedown:le,mousemove:2,mouseup:ce},Te="mousedown",Se="mousemove mouseup";t(M,S,{handler:function(e){var t=ye[e.type];t&le&&0===e.button&&(this.pressed=!0),2&t&&1!==e.which&&(t=ce),this.pressed&&this.allow&&(t&ce&&(this.pressed=!1),this.callback(this.manager,t,{pointers:[e],changedPointers:[e],pointerType:ae,srcEvent:e}))}});var Ce={pointerdown:le,pointermove:2,pointerup:ce,pointercancel:he,pointerout:he},Ee={2:oe,3:"pen",4:ae,5:"kinect"},_e="pointerdown",Re="pointermove pointerup pointercancel";r.MSPointerEvent&&(_e="MSPointerDown",Re="MSPointerMove MSPointerUp MSPointerCancel"),t(F,S,{handler:function(e){var t=this.store,r=!1,n=e.type.toLowerCase().replace("ms",""),i=Ce[n],o=Ee[e.pointerType]||e.pointerType,a=o==oe,s=p(t,e.pointerId,"pointerId");i&le&&(0===e.button||a)?s<0&&(t.push(e),s=t.length-1):i&(ce|he)&&(r=!0),s<0||(t[s]=e,this.callback(this.manager,i,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e}),r&&t.splice(s,1))}});var De={touchstart:le,touchmove:2,touchend:ce,touchcancel:he};t(A,S,{handler:function(e){var t=De[e.type];if(t===le&&(this.started=!0),this.started){var r=function(e,t){var r=g(e.touches),n=g(e.changedTouches);return t&(ce|he)&&(r=x(r.concat(n),"identifier",!0)),[r,n]}.call(this,e,t);t&(ce|he)&&r[0].length-r[1].length==0&&(this.started=!1),this.callback(this.manager,t,{pointers:r[0],changedPointers:r[1],pointerType:oe,srcEvent:e})}}});var Pe={touchstart:le,touchmove:2,touchend:ce,touchcancel:he},Me="touchstart touchmove touchend touchcancel";t(N,S,{handler:function(e){var t=Pe[e.type],r=function(e,t){var r=g(e.touches),n=this.targetIds;if(t&(2|le)&&1===r.length)return n[r[0].identifier]=!0,[r,r];var i,o,a=g(e.changedTouches),s=[],l=this.target;if(o=r.filter(function(e){return y(e.target,l)}),t===le)for(i=0;i<o.length;)n[o[i].identifier]=!0,i++;for(i=0;i<a.length;)n[a[i].identifier]&&s.push(a[i]),t&(ce|he)&&delete n[a[i].identifier],i++;return s.length?[x(o.concat(s),"identifier",!0),s]:void 0}.call(this,e,t);r&&this.callback(this.manager,t,{pointers:r[0],changedPointers:r[1],pointerType:oe,srcEvent:e})}}),t(z,S,{handler:function(e,t,r){var n=r.pointerType==oe,i=r.pointerType==ae;if(n)this.mouse.allow=!1;else if(i&&!this.mouse.allow)return;t&(ce|he)&&(this.mouse.allow=!0),this.callback(e,t,r)},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var Fe=w(Q.style,"touchAction"),Ae=Fe!==b,Ne="compute",ze="manipulation",Be="none",Ie="pan-x",Le="pan-y";B.prototype={set:function(e){e==Ne&&(e=this.compute()),Ae&&this.manager.element.style&&(this.manager.element.style[Fe]=e),this.actions=e.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return i(this.manager.recognizers,function(e){h(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),function(e){if(m(e,Be))return Be;var t=m(e,Ie),r=m(e,Le);return t&&r?Ie+" "+Le:t||r?t?Ie:Le:m(e,ze)?ze:"auto"}(t.join(" "))},preventDefaults:function(e){if(!Ae){var t=e.srcEvent,r=e.offsetDirection;if(this.manager.session.prevented)return void t.preventDefault();var n=this.actions,i=m(n,Be),o=m(n,Le),a=m(n,Ie);return i||o&&r&pe||a&&r&ge?this.preventSrc(t):void 0}},preventSrc:function(e){this.manager.session.prevented=!0,e.preventDefault()}};var Ue=1,Oe=2,ke=4,Ve=8,qe=Ve,Ge=16;I.prototype={defaults:{},set:function(e){return o(this.options,e),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(e){if(n(e,"recognizeWith",this))return this;var t=this.simultaneous;return t[(e=U(e,this)).id]||(t[e.id]=e).recognizeWith(this),this},dropRecognizeWith:function(e){return n(e,"dropRecognizeWith",this)||(e=U(e,this),delete this.simultaneous[e.id]),this},requireFailure:function(e){if(n(e,"requireFailure",this))return this;var t=this.requireFail;return-1===p(t,e=U(e,this))&&(t.push(e),e.requireFailure(this)),this},dropRequireFailure:function(e){if(n(e,"dropRequireFailure",this))return this;e=U(e,this);var t=p(this.requireFail,e);return-1<t&&this.requireFail.splice(t,1),this},hasRequireFailures:function(){return 0<this.requireFail.length},canRecognizeWith:function(e){return!!this.simultaneous[e.id]},emit:function(r){function e(e){var t;n.manager.emit(n.options.event+(e?(t=i)&Ge?"cancel":t&Ve?"end":t&ke?"move":t&Oe?"start":"":""),r)}var n=this,i=this.state;i<Ve&&e(!0),e(),Ve<=i&&e(!0)},tryEmit:function(e){return this.canEmit()?this.emit(e):void(this.state=32)},canEmit:function(){for(var e=0;e<this.requireFail.length;){if(!(this.requireFail[e].state&(32|Ue)))return!1;e++}return!0},recognize:function(e){var t=o({},e);return h(this.options.enable,[this,t])?(this.state&(qe|Ge|32)&&(this.state=Ue),this.state=this.process(t),void(this.state&(Oe|ke|Ve|Ge)&&this.tryEmit(t))):(this.reset(),void(this.state=32))},process:function(){},getTouchAction:function(){},reset:function(){}},t(O,I,{defaults:{pointers:1},attrTest:function(e){var t=this.options.pointers;return 0===t||e.pointers.length===t},process:function(e){var t=this.state,r=e.eventType,n=t&(Oe|ke),i=this.attrTest(e);return n&&(r&he||!i)?t|Ge:n||i?r&ce?t|Ve:t&Oe?t|ke:Oe:32}}),t(k,O,{defaults:{event:"pan",threshold:10,pointers:1,direction:xe},getTouchAction:function(){var e=this.options.direction,t=[];return e&pe&&t.push(Le),e&ge&&t.push(Ie),t},directionTest:function(e){var t=this.options,r=!0,n=e.distance,i=e.direction,o=e.deltaX,a=e.deltaY;return i&t.direction||(n=t.direction&pe?(i=0===o?ue:o<0?de:fe,r=o!=this.pX,Math.abs(e.deltaX)):(i=0===a?ue:a<0?me:ve,r=a!=this.pY,Math.abs(e.deltaY))),e.direction=i,r&&n>t.threshold&&i&t.direction},attrTest:function(e){return O.prototype.attrTest.call(this,e)&&(this.state&Oe||!(this.state&Oe)&&this.directionTest(e))},emit:function(e){this.pX=e.deltaX,this.pY=e.deltaY;var t=L(e.direction);t&&this.manager.emit(this.options.event+t,e),this._super.emit.call(this,e)}}),t(V,O,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Be]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.scale-1)>this.options.threshold||this.state&Oe)},emit:function(e){if(this._super.emit.call(this,e),1!==e.scale){var t=e.scale<1?"in":"out";this.manager.emit(this.options.event+t,e)}}}),t(q,I,{defaults:{event:"press",pointers:1,time:500,threshold:5},getTouchAction:function(){return["auto"]},process:function(e){var t=this.options,r=e.pointers.length===t.pointers,n=e.distance<t.threshold,i=e.deltaTime>t.time;if(this._input=e,!n||!r||e.eventType&(ce|he)&&!i)this.reset();else if(e.eventType&le)this.reset(),this._timer=l(function(){this.state=qe,this.tryEmit()},t.time,this);else if(e.eventType&ce)return qe;return 32},reset:function(){clearTimeout(this._timer)},emit:function(e){this.state===qe&&(e&&e.eventType&ce?this.manager.emit(this.options.event+"up",e):(this._input.timeStamp=ee(),this.manager.emit(this.options.event,this._input)))}}),t(G,O,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Be]},attrTest:function(e){return this._super.attrTest.call(this,e)&&(Math.abs(e.rotation)>this.options.threshold||this.state&Oe)}}),t(X,O,{defaults:{event:"swipe",threshold:10,velocity:.65,direction:pe|ge,pointers:1},getTouchAction:function(){return k.prototype.getTouchAction.call(this)},attrTest:function(e){var t,r=this.options.direction;return r&(pe|ge)?t=e.velocity:r&pe?t=e.velocityX:r&ge&&(t=e.velocityY),this._super.attrTest.call(this,e)&&r&e.direction&&e.distance>this.options.threshold&&$(t)>this.options.velocity&&e.eventType&ce},emit:function(e){var t=L(e.direction);t&&this.manager.emit(this.options.event+t,e),this.manager.emit(this.options.event,e)}}),t(H,I,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:2,posThreshold:10},getTouchAction:function(){return[ze]},process:function(e){var t=this.options,r=e.pointers.length===t.pointers,n=e.distance<t.threshold,i=e.deltaTime<t.time;if(this.reset(),e.eventType&le&&0===this.count)return this.failTimeout();if(n&&i&&r){if(e.eventType!=ce)return this.failTimeout();var o=!this.pTime||e.timeStamp-this.pTime<t.interval,a=!this.pCenter||D(this.pCenter,e.center)<t.posThreshold;if(this.pTime=e.timeStamp,this.pCenter=e.center,a&&o?this.count+=1:this.count=1,this._input=e,0===this.count%t.taps)return this.hasRequireFailures()?(this._timer=l(function(){this.state=qe,this.tryEmit()},t.interval,this),Oe):qe}return 32},failTimeout:function(){return this._timer=l(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==qe&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),j.VERSION="2.0.4",j.defaults={domEvents:!1,touchAction:Ne,enable:!0,inputTarget:null,inputClass:null,preset:[[G,{enable:!1}],[V,{enable:!1},["rotate"]],[X,{direction:pe}],[k,{direction:pe},["swipe"]],[H],[H,{event:"doubletap",taps:2},["tap"]],[q]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};W.prototype={set:function(e){return o(this.options,e),e.touchAction&&this.touchAction.update(),e.inputTarget&&(this.input.destroy(),this.input.target=e.inputTarget,this.input.init()),this},stop:function(e){this.session.stopped=e?2:1},recognize:function(e){var t=this.session;if(!t.stopped){this.touchAction.preventDefaults(e);var r,n=this.recognizers,i=t.curRecognizer;(!i||i&&i.state&qe)&&(i=t.curRecognizer=null);for(var o=0;o<n.length;)r=n[o],2===t.stopped||i&&r!=i&&!r.canRecognizeWith(i)?r.reset():r.recognize(e),!i&&r.state&(Oe|ke|Ve)&&(i=t.curRecognizer=r),o++}},get:function(e){if(e instanceof I)return e;for(var t=this.recognizers,r=0;r<t.length;r++)if(t[r].options.event==e)return t[r];return null},add:function(e){if(n(e,"add",this))return this;var t=this.get(e.options.event);return t&&this.remove(t),this.recognizers.push(e),(e.manager=this).touchAction.update(),e},remove:function(e){if(n(e,"remove",this))return this;var t=this.recognizers;return e=this.get(e),t.splice(p(t,e),1),this.touchAction.update(),this},on:function(e,t){var r=this.handlers;return i(v(e),function(e){r[e]=r[e]||[],r[e].push(t)}),this},off:function(e,t){var r=this.handlers;return i(v(e),function(e){t?r[e].splice(p(r[e],t),1):delete r[e]}),this},emit:function(e,t){var r,n,i;this.options.domEvents&&(r=e,n=t,(i=s.createEvent("Event")).initEvent(r,!0,!0),(i.gesture=n).target.dispatchEvent(i));var o=this.handlers[e]&&this.handlers[e].slice();if(o&&o.length){t.type=e,t.preventDefault=function(){t.srcEvent.preventDefault()};for(var a=0;a<o.length;)o[a](t),a++}},destroy:function(){this.element&&Y(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},o(j,{INPUT_START:le,INPUT_MOVE:2,INPUT_END:ce,INPUT_CANCEL:he,STATE_POSSIBLE:Ue,STATE_BEGAN:Oe,STATE_CHANGED:ke,STATE_ENDED:Ve,STATE_RECOGNIZED:qe,STATE_CANCELLED:Ge,STATE_FAILED:32,DIRECTION_NONE:ue,DIRECTION_LEFT:de,DIRECTION_RIGHT:fe,DIRECTION_UP:me,DIRECTION_DOWN:ve,DIRECTION_HORIZONTAL:pe,DIRECTION_VERTICAL:ge,DIRECTION_ALL:xe,Manager:W,Input:S,TouchAction:B,TouchInput:N,MouseInput:M,PointerEventInput:F,TouchMouseInput:z,SingleTouchInput:A,Recognizer:I,AttrRecognizer:O,Tap:H,Pan:k,Swipe:X,Pinch:V,Rotate:G,Press:q,on:d,off:f,each:i,merge:a,extend:o,inherit:t,bindFn:c,prefixed:w}),typeof define==Z&&define.amd?define(function(){return j}):"undefined"!=typeof module&&module.exports?module.exports=j:r.HammerWF=j}(window,document);var frakVersion="1.4.2";function FRAK(e){"function"==typeof e&&e()}"undefined"!=typeof exports&&(exports.version=frakVersion),FRAK.raf=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||window.oRequestAnimationFrame,FRAK.caf=window.cancelAnimationFrame||window.webkitCancelRequestAnimationFrame||window.mozCancelRequestAnimationFrame||window.oCancelRequestAnimationFrame||window.msCancelRequestAnimationFrame,FRAK.performance="undefined"!=typeof window&&(!!window.performance&&window.performance.now),FRAK.performanceNOW=function(){return window.performance.now.apply(window.performance)},FRAK.extend=function(){for(var e=1;e<arguments.length;++e)for(var t in arguments[e])t in arguments[e]&&(arguments[0][t]=arguments[e][t]);return arguments[0]},FRAK.isFunction=function(e){return"function"==typeof e},FRAK.isEmptyObject=function(e){for(var t in e)if(t in e)return!1;return!0},FRAK.parseJSON=function(e){if("undefined"!=typeof window&&window.JSON&&window.JSON.parse)return window.JSON.parse(e);if("undefined"!=typeof JSON)return JSON.parse(e);throw"FRAK.parseJSON: No JSON parser available."},FRAK.timestamp=FRAK.performance?FRAK.performanceNOW:Date.now,FRAK.requestAnimationFrame="undefined"!=typeof window?FRAK.raf?function(){return FRAK.raf.apply(window,arguments)}:function(e){return window.setTimeout(e,1e3/60)}:"undefined"!=typeof setTimeout?function(e){return setTimeout(e,1e3/60)}:void 0,FRAK.cancelAnimationFrame=function(){if("undefined"!=typeof window){if(FRAK.caf)return function(){return FRAK.caf.apply(window,arguments)}}else if("undefined"!=typeof clearTimeout)return clearTimeout}(),FRAK.fullscreenEnabled="undefined"!=typeof document&&(document.fullscreenEnabled||document.webkitFullscreenEnabled||document.mozFullScreenEnabled||document.msFullscreenEnabled),FRAK.requestFullscreen=function(e){(e.requestFullscreen||e.requestFullScreen||e.webkitRequestFullscreen||e.webkitRequestFullScreen||e.mozRequestFullscreen||e.mozRequestFullScreen||e.msRequestFullscreen||e.msRequestFullScreen||function(){}).call(e)},FRAK.exitFullscreen=function(){(document.exitFullscreen||document.exitFullScreen||document.webkitExitFullscreen||document.webkitExitFullScreen||document.mozExitFullscreen||document.mozExitFullScreen||document.msExitFullscreen||document.msExitFullScreen||function(){}).call(document)},FRAK.isFullscreen=function(){return document.isFullScreen||document.isFullscreen||document.webkitIsFullscreen||document.webkitIsFullScreen||document.mozIsFullscreen||document.mozIsFullScreen||document.msIsFullscreen||document.msIsFullScreen},FRAK.isWebGLSupported=function(){var e=document.createElement("canvas"),t=null;try{t=e.getContext("webgl")}catch(e){t=null}if(null==t)try{t=e.getContext("experimental-webgl")}catch(e){t=null}return e.remove(),!!t};var Cloneable=FrakClass.extend({type:function(){return!1},clone:function(){return"function"==typeof window[this.type()]?new(window[this.type()]):{}}}),nextSerializableID=1,Serializable=Cloneable.extend({init:function(){this.serializable=!0,this.id=nextSerializableID++},included:function(){return!0},excluded:function(){return[]},getSerializableFields:function(e){var t=this.included(),r=this.excluded();if(!0===t&&!0===r)throw"Quantum classes not allowed. A subclass of Serializable tries to both include and exclude all fields.";if(!1===t&&!1===r)throw"Quantum classes not allowed. A subclass of Serializable tries both not to include and not to exclude all fields.";if(!1===t||!0===r)return{};var n={};if(!0===t){for(var i in this){var o={};this[i]&&"[object Function]"==o.toString.call(this[i])||"serializable"==i||"_super"==i||(n[i]=this[i])}if(r instanceof Array){r=r.concat(e);for(var a=0;a<r.length;a++)n[r[a]]&&delete n[r[a]]}}if(!0===r){n=[];for(var s=0;s<t.length;s++){o={};this[i=t[s]]&&"[object Function]"==o.toString.call(this[i])||"serializable"==i||"_super"==i||(n[i]=this[i])}}return n},serialize:function(e){try{return(new Serializer).serialize(this,e,32)}catch(e){throw console.warn("Caught serialization exception: ",e),e}},unserialize:function(e){FRAK.parseJSON(e);return!1},serializeCyclic:function(e){try{return(new CyclicSerializer).serialize(this,e,32)}catch(e){throw console.warn("Caught serialization exception: ",e),e}},unserializeCyclic:function(e){try{return(new CyclicSerializer).unserialize(e)}catch(e){throw console.warn("Caught serialization exception: ",e),e}},onBeforeSerialize:function(){},onAfterSerialize:function(){},onBeforeUnserialize:function(){},onAfterUnserialize:function(){}}),Serializer=FrakClass.extend({init:function(){this.serializables={}},serializableCopy:function(e,t,r,n,i){var o={},a=t.getSerializableFields(r);if(i<=n){var s=[];for(var l in e)s.push(e[l].type());throw"Reached maximum depth for serialization: "+n+" at "+t.type()}for(var c in(e=e.slice(0)).splice(0,0,t),a){var h=a[c];if(h instanceof Serializable)o[c]=this.serializableCopy(e,h,r,n+1,i);else if(h instanceof Array||h instanceof Float32Array){var u=[];for(var d in h)h[d]instanceof Serializable?u.push(this.serializableCopy(e,h[d],r,n+1,i)):u.push(h[d]);o[c]=u}else o[c]=a[c]}return{_type_:t.type(),_properties_:o}},serialize:function(e,t,r){this.serializables={};var n=this.serializableCopy([],e,t,0,r);return JSON.stringify({_root_:n,_serializables_:this.serializables},void 0,2)},unserializeSerializables:function(e){for(var t in e)this.serializables[t]=this.unserializeCopy(e[t])},unserializeCopy:function(e){if(e instanceof Array){for(var t in e)e[t]=this.unserializeCopy(e[t]);return e}if(e instanceof Object){if(e._reference_)return e;if(e._type_){var r=new window[e._type_];for(var t in r.onBeforeUnserialize(),e._properties_)r[t]=this.unserializeCopy(e._properties_[t]);return r.onAfterUnserialize(),r}return e}return r},resolveReferences:function(e,t){if(e[t]instanceof Array)for(var r in e[t])e[t][r]=this.resolveReferences(e[t],r);else if(e[t]instanceof Object)if(e[t]._reference_)e[t]=this.serializables[e[t]._id_];else for(var r in e[t])e[t][r]=this.resolveReferences(e[t],r)},unserialize:function(e){var t=FRAK.parseJSON(e);this.serializables={},this.unserializeSerializables(t._serializables_);var r=this.unserializeCopy(t._root_);for(var n in this.serializables)this.resolveReferences(this.serializables,n);return this.resolveReferences(t,"_serializables_"),r}}),CyclicSerializer=FrakClass.extend({init:function(){this.serializables={},this.visited=[]},serializableCopy:function(t,r,e,n,i){if(i<=n)return{};(t=t.slice(0)).push(r);try{if("object"!=typeof r)return r;if(!r)return null;if(r instanceof Serializable){if(!this.serializables[r.id]){this.serializables[r.id]=!0,r.onBeforeSerialize();var o=r.getSerializableFields(r,e);for(var a in o)o[a]=this.serializableCopy(t,o[a],e,n+1,i);r.onAfterSerialize(),this.serializables[r.id]={_type_:r.type(),_properties_:o}}return{_reference_:!0,_id_:r.id}}if(r instanceof Array||r instanceof Float32Array){var s=[];for(var a in r)s.push(this.serializableCopy(t,r[a],e,n+1,i));return s}if(r._visited_)return void console.warn("Already visited object: ",r);r._visited_=!0;o={};for(var a in r)o[a]=this.serializableCopy(t,r[a],e,n+1,i);return o}catch(e){throw console.warn("Caught: ",r,e),console.warn("Stack: "),console.warn(t),e}},serialize:function(e,t,r){this.serializables={};var n=this.serializableCopy([],e,t,0,r);return JSON.stringify({_root_:n,_serializables_:this.serializables},void 0,2)},unserializeSerializables:function(e){for(var t in e)this.serializables[t]=this.unserializeCopy(e[t])},unserializeCopy:function(e){if(e instanceof Array){for(var t in e)e[t]=this.unserializeCopy(e[t]);return e}if(e instanceof Object){if(e._reference_)return e;if(e._type_){var r=new window[e._type_];for(var t in r.onBeforeUnserialize(),e._properties_)r[t]=this.unserializeCopy(e._properties_[t]);return r}return e}return e},resolveReferences:function(e,t,r){if(!(32<r))if(e[t]instanceof Array)for(var n in e[t])this.resolveReferences(e[t],n,r+1);else if(e[t]instanceof Object&&!("_visited_"in e[t]))if(e[t]._reference_)e[t]=this.serializables[e[t]._id_];else if(e[t]instanceof Serializable)for(var i in e[t]._visited_=!0,this.visited.push(e[t]),e[t])this.resolveReferences(e[t],i,r+1)},unserialize:function(e){var t=FRAK.parseJSON(e);this.serializables={},this.unserializeSerializables(t._serializables_);var r={_root_:this.unserializeCopy(t._root_)};for(var n in this.resolveReferences(r,"_root_",0),this.serializables)this.resolveReferences(this.serializables,n,0);for(var n in this.visited)this.visited[n]instanceof Serializable&&this.visited[n].onAfterUnserialize();for(var n in this.visited)delete this.visited[n]._visited_;return r._root_}}),TypeReference=Serializable.extend({init:function(e,t){this._super(),this.valueType=e,this.value=t},type:function(){return"TypeReference"},isNull:function(){return!this.value}});function CollectionReference(e){this.list=e}function CollectionView(e,t,r){this.listReference=e,this.view=[],this.keepExact=!!r,this.fnFilter=t,this.length=0;var n=this;this.update=function(){(n.keepExact||n.view.length<n.listReference.list.length)&&(n.view.length=n.listReference.list.length)},this.filter=function(){n.update();for(var e,t=0,r=0;r<n.listReference.list.length&&(e=n.listReference.list[r]);++r)n.fnFilter(e)&&(n.view[t++]=e);for(r=n.length=t;r<n.listReference.list.length;++r)n.view[t++]=null},this.forEach=function(e){for(var t=0;t<n.length;++t)e(n.view[t],t)},this.get=function(e){if(0<=e&&e<n.length)return n.view[e];throw Error("Accessing element out of bounds")}}var Color=function(e,t,r,n){this.r=1,this.g=1,this.b=1,this.a=1,this.clone=function(){return new Color(this.r,this.g,this.b,this.a)},this.fromHex=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})?$/i.exec(e);return t&&(this.r=parseInt(t[1],16)/255,this.g=parseInt(t[2],16)/255,this.b=parseInt(t[3],16)/255,t[4]&&(this.a=parseInt(t[4],16)/255)),this},this.toHex=function(){return"#"+("0"+Math.round(255*this.r).toString(16)).slice(-2)+("0"+Math.round(255*this.g).toString(16)).slice(-2)+("0"+Math.round(255*this.b).toString(16)).slice(-2)+("0"+Math.round(255*this.a).toString(16)).slice(-2)},this.toString=function(){return"rgba("+Math.floor(255*this.r)+", "+Math.floor(255*this.g)+", "+Math.floor(255*this.b)+", "+this.a+")"},this.toVector=function(e){return e||(e=vec4.create()),vec4.set(e,this.r,this.g,this.b,this.a),e},this.set=function(e,t,r,n){return"number"==typeof e&&(this.r=e),"number"==typeof t&&(this.g=t),"number"==typeof r&&(this.b=r),"number"==typeof n&&(this.a=n),this},this.set(e,t,r,n)},MatrixStack=FrakClass.extend({init:function(){this.stack=[mat4.identity(mat4.create())],this.allocated=[];for(var e=0;e<64;e++)this.allocated.push(mat4.create())},top:function(){return this.stack[this.stack.length-1]},push:function(){0==this.allocated.length&&this.allocated.push(mat4.create()),this.stack.push(mat4.copy(this.allocated.pop(),this.stack[this.stack.length-1]))},pop:function(){this.allocated.push(this.stack.pop())},multiply:function(e){mat4.multiply(this.stack[this.stack.length-1],this.stack[this.stack.length-1],e)},load:function(e){mat4.copy(this.stack[this.stack.length-1],e)},size:function(){return this.stack.length}}),RenderingContext=FrakClass.extend({init:function(e,t,r,n){if("string"==typeof e&&"undefined"!=typeof document&&(e=document.getElementById(e)),"undefined"!=typeof window&&window.jQuery&&e instanceof jQuery&&(e=e[0]),this.version=n,"auto"===this.version)if("WebGL2RenderingContext"in window)this.version="webgl2";else if(this.version="webgl",!("WebGLRenderingContext"in window))throw"Unable to create rendering context, because browser doesn't support WebGL";if(!e)throw"RenderingContext requires a canvas element";if(this.canvas=e,"undefined"!=typeof WebGLDebugUtils&&(this.canvas=WebGLDebugUtils.makeLostContextSimulatingCanvas(e),this.canvas.setRestoreTimeout(2e3)),t=t||{alpha:!1},"webgl2"===this.version&&(this.gl=this.canvas.getContext("webgl2",t),this.gl||"auto"!==n||(this.version="webgl")),"webgl"===this.version&&(this.gl=this.canvas.getContext("webgl",t),this.gl||(this.gl=this.canvas.getContext("experimental-webgl",t)),this.gl||(this.gl=this.canvas.getContext("moz-webgl",t)),this.gl||(this.gl=this.canvas.getContext("webkit-3d",t))),!this.gl){var i=!1;if(FRAK.isFunction(r)&&(i=r()),!i&&"undefined"!=typeof document){var o=document.createElement("div");o.style.position="relative",o.style.zIndex=100,o.style.backgroundColor="red",o.style.padding="8px",o.textContent="WebGL seems to be unavailable in this browser.";var a=e.parentNode;a.insertBefore(o,a.firstChild)}throw"Failed to acquire GL context from canvas"}"undefined"!=typeof WebGLDebugUtils&&(this.gl=WebGLDebugUtils.makeDebugContext(this.gl,function(e,t,r){throw WebGLDebugUtils.glEnumToString(e)+" was caused by call to: "+t+JSON.stringify(r)}),console.warn("Using WebGLDebugUtils")),this.modelview=new MatrixStack,this.projection=new MatrixStack,this.light=!1,this.shadow=!1,this.camera=!1,this.engine=!1},error:function(){if(this.isContextLost())throw Error("Context lost");var e=this.gl.getError();if(0<e&&"undefined"!=typeof WebGLDebugUtils)throw Error("GL_ERROR: "+WebGLDebugUtils.glEnumToString(e));return e},isContextLost:function(){return!this.gl||this.gl.isContextLost()},isWebGL2:function(){return"webgl2"==this.version},restore:function(){if(!this.engine)return!1;this.gl.getError();var t=this,e=this.engine,r=e.assetsManager.texturesManager;for(var n in r.cache){r.cache[n].onContextRestored(t)}e.scene.root.onEachChildComponent(function(e){(e instanceof RendererComponent||e instanceof TextComponent)&&e.onContextRestored(t)});for(n=0;n<e.scene.lights.length;++n)e.scene.lights[n].onContextRestored(t);e.WhiteTexture.glTexture=null,e.WhiteTexture.loaded=!1,e.WhiteTexture.clearImage(t,[255,255,255,255]),fallbackTexture&&fallbackTexture.onContextRestored(t),fallbackCubeTexture&&fallbackCubeTexture.onContextRestored(t),e.scene&&e.scene.cameraComponent&&e.scene.cameraComponent.onContextRestored(t);var i=e.assetsManager.shadersManager;for(var n in i.cache){i.cache[n].onContextRestored(t)}return!0}});function SamplerAccumulator(){this.samplers=[],this.length=0;var r=this;this.add=function(e){r.samplers[r.length++]=e},this.clear=function(){for(var e=0,t=r.samplers.length;e<t;++e)r.samplers[e]=null;r.length=0}}var ExplicitAttributeLocations={position:0,normal:1,texcoord2d0:2,uv0:2,tangent:3,bitangent:4},Subshader=FrakClass.extend({init:function(e,t,r){this.shader=e,this.context=e.context,this.code=t,this.type=r,this.VERTEX_SHADER=0,this.FRAGMENT_SHADER=1,this.compiledShader=!1,this.failedCompilation=!1},attach:function(){this.context.gl.attachShader(this.shader.program,this.compiledShader)},getFilename:function(){return"Unknown"},compile:function(){if(!this.failedCompilation){if(!this.compiledShader)throw"WebGL shader has not been created. FragmentShader or VertexShader class instances should be used, not Shader.";if(this.context.gl.shaderSource(this.compiledShader,this.code),this.context.gl.compileShader(this.compiledShader),!this.context.gl.getShaderParameter(this.compiledShader,this.context.gl.COMPILE_STATUS)&&!this.failedCompilation)throw this.failedCompilation=!0,"Shader '"+this.getFilename()+"' failed to compile: "+this.context.gl.getShaderInfoLog(this.compiledShader)}},onContextRestored:function(e){this.failedCompilation=!1,this.context=e,this.attach()}}),VertexShader=Subshader.extend({init:function(e,t){this._super(e,t,this.VERTEX_SHADER),this.compiledShader=this.context.gl.createShader(this.context.gl.VERTEX_SHADER)},getFilename:function(){return this.shader.descriptor.vertexSource},onContextRestored:function(e){this.compiledShader=this.context.gl.createShader(this.context.gl.VERTEX_SHADER),this._super(e)}}),FragmentShader=Subshader.extend({init:function(e,t){this._super(e,t,this.FRAGMENT_SHADER),this.compiledShader=this.context.gl.createShader(this.context.gl.FRAGMENT_SHADER)},getFilename:function(){return this.shader.descriptor.fragmentSource},onContextRestored:function(e){this.compiledShader=this.context.gl.createShader(this.context.gl.FRAGMENT_SHADER),this._super(e)}}),ShaderRequirements=FrakClass.extend({init:function(){this.barycentric=!1,this.bitangents=!1,this.tangents=!1,this.transparent=!1,this.texCoords2D=!0},apply:function(e){this.barycentric&&!e.buffers.barycentric&&e.generateBarycentric(),this.texCoords2D&&!e.buffers.texcoord2d0&&e.generateTexCoords()}}),Shader=Serializable.extend({init:function(e,t){if(!e)throw"Shader: RenderingContext required";this._super(),this.descriptor=t,this.context=e,this.program=e.gl.createProgram(),this.shaders=[],this.requirements=new ShaderRequirements,this.linked=!1,this.failed=!1,this.uniformLocations={},this.bindings={}},excluded:function(){return!0},included:function(){return["descriptor"]},addVertexShader:function(e){var t=new VertexShader(this,e);this.addShader(t)},addFragmentShader:function(e){var t=new FragmentShader(this,e);this.addShader(t)},addShader:function(e){this.shaders.push(e),e.attach()},link:function(){if(!this.failed){for(var e=0;e<this.shaders.length;e++)this.shaders[e].compile(this.context);for(var t in ExplicitAttributeLocations)this.context.gl.bindAttribLocation(this.program,ExplicitAttributeLocations[t],t);if(this.uniformLocations={},this.linked=!0,this.context.gl.linkProgram(this.program),!this.context.gl.getProgramParameter(this.program,this.context.gl.LINK_STATUS))return console.error("Shader linking failed: ",this.context.gl.getProgramInfoLog(this.program)),this.linked=!1,void(this.failed=!0);this.context.isWebGL2()&&this.updateBlockBindings(this.context)}},use:function(e){this.failed||this.shaders.length<2||(this.linked||this.link(),this.linked&&(this.context.gl.useProgram(this.program),this.bindUniforms(e)))},getAttribLocation:function(e){return e in ExplicitAttributeLocations?ExplicitAttributeLocations[e]:this.context.gl.getAttribLocation(this.program,e)},getUniformLocation:function(e){return e in this.uniformLocations||(this.uniformLocations[e]=this.context.gl.getUniformLocation(this.program,e)),this.uniformLocations[e]},bindUniforms:function(e){if(e&&this.linked)for(var t in e){var r=this.getUniformLocation(t);if(r&&-1!=r){var n=e[t];if(!n)throw"Uniform '"+t+"' is undefined.";n.bind(this.context,r)}}},bindSamplers:function(e){if(e&&0!=e.length&&this.linked){for(var t=this.context.gl,r=0,n=0;n<e.length;++n){var i=e[n];if(!i)break;var o=this.getUniformLocation(i.name);-1!=o&&(i.bind(this.context,o,r),r++)}t.activeTexture(t.TEXTURE0)}},unbindSamplers:function(e){if(e&&0!=e.length&&this.linked){for(var t=this.context.gl,r=0,n=0;n<e.length;++n){var i=e[n];if(!i)break;var o=this.getUniformLocation(i.name);-1!=o&&(i.unbind(this.context,o,r),r++)}t.activeTexture(t.TEXTURE0)}},onContextRestored:function(e){this.context=e,this.program=e.gl.createProgram(),this.uniformLocations={},this.failed=!1,this.linked=!1;for(var t=0;t<this.shaders.length;++t)this.shaders[t].onContextRestored(e);this.link()},updateBlockBindings:function(e){var t=["Transform","Material"];this.bindings={};for(var r=0;r<t.length;++r){var n=r+1,i=t[r],o=e.gl.getUniformBlockIndex(this.program,i);o!=e.gl.INVALID_INDEX&&(this.bindings[i]={index:o,name:i,bindingPoint:n})}}}),Uniform=Cloneable.extend({init:function(e){this.value=e},bind:function(e,t){},clone:function(){var e=this._super();return e.value=this.value,e}}),UniformInt=Uniform.extend({bind:function(e,t){e.gl.uniform1i(t,this.value)},type:function(){return"UniformInt"}}),UniformFloat=Uniform.extend({bind:function(e,t){e.gl.uniform1f(t,this.value)},type:function(){return"UniformFloat"}}),UniformVec2=Uniform.extend({init:function(e){e||(e=vec2.create()),e instanceof Float32Array?this._super(e):this._super(new Float32Array(e))},type:function(){return"UniformVec2"},bind:function(e,t){e.gl.uniform2fv(t,this.value)},clone:function(){var e=this._super();return e.value=vec2.clone(this.value),e}}),UniformVec3=Uniform.extend({init:function(e){e||(e=vec3.create()),e instanceof Float32Array?this._super(e):this._super(new Float32Array(e))},type:function(){return"UniformVec3"},bind:function(e,t){e.gl.uniform3fv(t,this.value)},clone:function(){var e=this._super();return e.value=vec3.clone(this.value),e}}),UniformVec4=Uniform.extend({init:function(e){e||(e=vec4.create()),e instanceof Float32Array?this._super(e):this._super(new Float32Array(e))},type:function(){return"UniformVec4"},bind:function(e,t){e.gl.uniform4fv(t,this.value)},clone:function(){var e=this._super();return e.value=vec4.clone(this.value),e}}),UniformColor=UniformVec4.extend({init:function(e){e?e instanceof Color?this._super(e.toVector()):"r"in e&&"g"in e&&"b"in e&&"a"in e?this._super(vec4.fromValues(e.r,e.g,e.b,e.a)):this._super(vec4.fromValues(1,1,1,1)):this._super(vec4.fromValues(1,1,1,1))},type:function(){return"UniformColor"}}),UniformMat2=Uniform.extend({type:function(){return"UniformMat2"},bind:function(e,t){e.gl.uniformMatrix2fv(t,0,this.value)},clone:function(){var e=this._super();return e.value=mat2.clone(this.value),e}}),UniformMat3=Uniform.extend({bind:function(e,t){e.gl.uniformMatrix3fv(t,!1,this.value)},type:function(){return"UniformMat3"},clone:function(){var e=this._super();return e.value=mat3.clone(this.value),e}}),UniformMat4=Uniform.extend({bind:function(e,t){e.gl.uniformMatrix4fv(t,!1,this.value)},type:function(){return"UniformMat4"},clone:function(){var e=this._super();return e.value=mat4.clone(this.value),e}}),fallbackTexture=!1,fallbackCubeTexture=!1,Sampler=Serializable.extend({init:function(e,t){this.name=e,this.texture=t},type:function(){return"Sampler"},createFallbackTexture:function(e){fallbackTexture=new Texture(e);var t=document.createElement("canvas");t.width=2,t.height=2;var r=t.getContext("2d");r.fillStyle="rgb(255,255,255)",r.fillRect(0,0,2,2),fallbackTexture.setImage(e,t)},createFallbackCubeTexture:function(e){fallbackCubeTexture=new CubeTexture(e);var t=document.createElement("canvas");t.width=2,t.height=2;var r=t.getContext("2d");r.fillStyle="rgb(255,255,255)",r.fillRect(0,0,2,2),fallbackCubeTexture.setFace(e,CubeTexture.FRONT,t,!0),fallbackCubeTexture.setFace(e,CubeTexture.BACK,t,!0),fallbackCubeTexture.setFace(e,CubeTexture.LEFT,t,!0),fallbackCubeTexture.setFace(e,CubeTexture.RIGHT,t,!0),fallbackCubeTexture.setFace(e,CubeTexture.TOP,t,!0),fallbackCubeTexture.setFace(e,CubeTexture.BOTTOM,t,!0)},bind:function(e,t,r){if(e.gl.activeTexture(r+e.gl.TEXTURE0),e.gl.uniform1i(t,r),!this.texture||!this.texture.loaded)return fallbackTexture||this.createFallbackTexture(e),void fallbackTexture.bind(e);this.texture.bind(e)},unbind:function(e,t,r){e.gl.activeTexture(r+e.gl.TEXTURE0),this.texture&&this.texture.loaded?this.texture.unbind(e):fallbackTexture.unbind(e)},clone:function(){var e=this._super();return e.name=this.name,e.texture=this.texture,e}}),Camera=Serializable.extend({init:function(e,t,r){this.viewMatrix=e,this.projectionMatrix=t,this.viewInverseMatrix=mat4.create(),mat4.invert(this.viewInverseMatrix,this.viewMatrix),this.renderStage=r,this.target=new TargetScreen,this.backgroundColor=new Color(0,0,0,0),this.clearMask=!1,this.order=0,this.layerMask=4294967295;var n=this.frustum=!1;this.stereo=function(e){return e&&(n=!0),!1===e&&(n=!1),n};var i=2;this.stereoEyeDistance=function(e){return e&&(i=e),i},this._viewportSize=vec2.create(),this._viewportPosition=vec2.create(),this._originalViewMatrix=mat4.create(),this._eyeSeparation=mat4.create(),this._cacheQuat=quat.create(),this._strafe=vec3.create(),this._translation=vec3.create()},type:function(){return"Camera"},excluded:function(){return["renderStage","target"]},clearBuffers:function(e){e.gl.clearColor(this.backgroundColor.r,this.backgroundColor.g,this.backgroundColor.b,this.backgroundColor.a),e.gl.clearDepth(1),e.gl.depthMask(!0),!1===this.clearMask?e.gl.clear(e.gl.COLOR_BUFFER_BIT|e.gl.DEPTH_BUFFER_BIT):e.gl.clear(this.clearMask)},startRender:function(e){e.projection.push(),e.projection.multiply(this.projectionMatrix),e.modelview.push(),e.modelview.multiply(this.viewMatrix)},renderScene:function(e,t,r,n){r&&r(e,this),this.renderStage.render(e,t,this),n&&n(e,this)},endRender:function(e){e.modelview.pop(),e.projection.pop()},render:function(e,t,r,n){if(this.target.resetViewport(),this.clearBuffers(e),(e.camera=this).stereo()){mat4.invert(this.viewInverseMatrix,this.viewMatrix),vec2.copy(this._viewportPosition,this.target.viewport.position),vec2.copy(this._viewportSize,this.target.viewport.size);var i=this._viewportSize[0]/2;this.target.viewport.size[0]=i;var o=this.stereoEyeDistance()/2;this.getStrafeVector(this._strafe),mat4.copy(this._originalViewMatrix,this.viewMatrix),vec3.scale(this._translation,this._strafe,-o),mat4.fromRotationTranslation(this._eyeSeparation,quat.create(),this._translation),mat4.mul(this.viewMatrix,this.viewMatrix,this._eyeSeparation),mat4.invert(this.viewInverseMatrix,this.viewMatrix),this.target.viewport.position[0]=0,this.startRender(e),this.renderScene(e,t,r,n),this.endRender(e),mat4.copy(this.viewMatrix,this._originalViewMatrix),vec3.scale(this._translation,this._strafe,o),mat4.fromRotationTranslation(this._eyeSeparation,quat.create(),this._translation),mat4.mul(this.viewMatrix,this.viewMatrix,this._eyeSeparation),mat4.invert(this.viewInverseMatrix,this.viewMatrix),this.target.viewport.position[0]=i,this.startRender(e),this.renderScene(e,t,r,n),this.endRender(e),vec2.copy(this.target.viewport.position,this._viewportPosition),vec2.copy(this.target.viewport.size,this._viewportSize),mat4.copy(this.viewMatrix,this._originalViewMatrix)}else mat4.invert(this.viewInverseMatrix,this.viewMatrix),this.startRender(e),this.renderScene(e,t,r,n),this.endRender(e);e.camera=!1},getFieldOfView:function(){return 2*Math.atan(1/this.projectionMatrix[5])},getDirection:function(e){return e||(e=vec3.create()),e[0]=-this.viewMatrix[8],e[1]=-this.viewMatrix[9],e[2]=-this.viewMatrix[10],e},getUpVector:function(e){return e||(e=vec3.create()),e[0]=this.viewMatrix[4],e[1]=this.viewMatrix[5],e[2]=this.viewMatrix[6],e},getStrafeVector:function(e){return e||(e=vec3.create()),e[0]=this.viewMatrix[0],e[1]=this.viewMatrix[1],e[2]=this.viewMatrix[2],e},getPosition:function(e){return e||(e=vec3.create()),mat4.translation(e,this.viewInverseMatrix),e},setPosition:function(e){var t=this.getPosition();vec3.sub(t,t,e);var r=mat4.fromTranslation(mat4.create(),t);mat4.mul(this.viewMatrix,this.viewMatrix,r)},center:function(e){var t=this.getDirection(),r=this.getPosition(),n=new Plane;n.setByNormalAndPoint(t,r);var i=n.projectToPlane(e);this.setPosition(i)},fitToView:function(e){if(e instanceof BoundingVolume&&e.center&&(this.center(e.center),!e.isPoint())){var t=0;e instanceof BoundingSphere?t=2*e.radius:e instanceof BoundingBox&&(t=2*e.getOuterSphereRadius());var r=t/Math.sin(this.getFieldOfView()/2)-t,n=this.getDirection(),i=vec3.create();vec3.scale(n,n,-r),vec3.add(i,e.center,n),this.setPosition(i)}}});function TransparencySort(e,t){if(!e&&!t)return 0;if(e&&!t)return-1;if(!e&&t)return 1;var r=vec3.squaredDistance(TransparencySort.cmpValue,e.globalBoundingSphere.center),n=vec3.squaredDistance(TransparencySort.cmpValue,t.globalBoundingSphere.center);return n<r?-1:r<n?1:0}function Batch(r){this.indices=new Array,this.length=0;var n=this;this.clear=function(){for(var e=0,t=n.indices.length;e<t;++e)n.indices[e]=-1;n.length=0},this.add=function(e){(function(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return!0;return!1})(n.indices,e)||(n.indices[n.length++]=e)},this.get=function(e){if(0<=e&&e<n.indices.length){var t=n.indices[e];if(0<=t&&t<r.length)return r[t]}}}TransparencySort.cmpValue=vec3.create();var RendererOrganizer=FrakClass.extend({init:function(){this.enableDynamicBatching=!0,this.solidRenderers=[],this.transparentRenderers=[],this.unlitRenderers=[],this.opaqueBatchList=[],this.transparentBatchList=[],this.unlitBatchList=[],this.batchIndex={},this.renderers=new CollectionReference([]),this.viewSolidRenderers=new CollectionView(this.renderers,function(e){return!e.transparent&&!e.unlit}),this.viewTransparentRenderers=new CollectionView(this.renderers,function(e){return e.transparent&&!e.unlit}),this.viewUnlitRenderers=new CollectionView(this.renderers,function(e){return e.unlit}),this.visibleRenderers=0,this.visibleSolidRenderers=0,this.visibleSolidBatches=0,this.visibleSolidFaces=0,this.visibleTransparentRenderers=0,this.visibleTransparentFaces=0,this.visibleTransparentBatches=0,this.visibleUnlitRenderers=0,this.visibleUnlitFaces=0,this.visibleUnlitBatches=0},updateStats:function(){this.visibleSolidRenderers=this.viewSolidRenderers.length,this.visibleTransparentRenderers=this.viewTransparentRenderers.length,this.visibleUnlitRenderers=this.viewUnlitRenderers.length,this.visibleRenderers=this.visibleSolidRenderers+this.visibleTransparentRenderers+this.visibleUnlitRenderers},batch:function(e,t){var r,n,i;for(r=0;r<e.length;++r)e[r].clear();for(r=0;r<t.length&&(i=t[r]);++r)i.material.id in this.batchIndex?n=e[this.batchIndex[i.material.id]]:(n=new Batch(t),e.push(n),this.batchIndex[i.material.id]=e.length-1),n?n.add(r):(n=new Batch(t),e.push(n),this.batchIndex[i.material.id]=e.length-1)},sort:function(e,t,r){this.renderers.list=t,this.viewSolidRenderers.filter(),this.viewTransparentRenderers.filter(),this.viewUnlitRenderers.filter(),this.solidRenderers=this.viewSolidRenderers.view,this.transparentRenderers=this.viewTransparentRenderers.view,this.unlitRenderers=this.viewUnlitRenderers.view,this.enableDynamicBatching&&("sorted"!=e.options.transparencyMode&&this.batch(this.transparentBatchList,this.transparentRenderers),this.batch(this.opaqueBatchList,this.solidRenderers),this.batch(this.unlitBatchList,this.unlitRenderers)),"sorted"==e.options.transparencyMode&&r&&(vec3.copy(TransparencySort.cmpValue,r),this.transparentRenderers.sort(TransparencySort)),this.updateStats()}});function ScreenQuad(t,e,r,n,i){e=e||-1,r=r||-1,n=n||2,i=i||2;var o=[0,1,2,0,2,3];if(t.engine&&!0===t.engine.options.useVAO)try{this.quad=new TrianglesRenderBufferVAO(t,o)}catch(e){this.quad=new TrianglesRenderBuffer(t,o)}else this.quad=new TrianglesRenderBuffer(t,o);this.vertices=new Float32Array(12),this.vertices[0]=e,this.vertices[1]=r,this.vertices[3]=e,this.vertices[4]=r+i,this.vertices[6]=e+n,this.vertices[7]=r+i,this.vertices[9]=e+n,this.vertices[10]=r,this.quad.add("position",this.vertices,3),this.quad.add("uv0",[0,0,0,1,1,1,1,0],2)}ScreenQuad.prototype.update=function(e,t,r,n){this.vertices[0]=e,this.vertices[1]=t,this.vertices[3]=e,this.vertices[4]=t+n,this.vertices[6]=e+r,this.vertices[7]=t+n,this.vertices[9]=e+r,this.vertices[10]=t,this.quad.update("position",this.vertices)},ScreenQuad.prototype.render=function(e,t,r){var n;e.gl;r&&(n=r instanceof Sampler?[r]:r),t.bind({},n),this.quad.render(t.shader),t.unbind(n)};var RenderStage=FrakClass.extend({init:function(){this.parent=!1,this.substages=[],this.started=!1,this.enabled=!0},addStage:function(e){return(e.parent=this).substages.push(e),e},removeStage:function(e){for(var t=0;t<this.substages.length;t++)if(this.substages[t]===e)return e.parent=!1,this.substages.splice(t,1),!0;return!1},removeStagesByType:function(e){for(var t=[],r=0;r<this.substages.length;r++)this.substages[r]instanceof e&&(t.push(this.substages[r]),this.substages.splice(r,1),r--);for(r=0;r<t.length;r++)t[r].parent=!1;return t},clearStages:function(){for(var e=0;e<this.substages.length;e++)this.substages[e].parent=!1;this.substages=[]},getStageByType:function(e){for(var t=0;t<this.substages.length;t++)if(this.substages[t]instanceof e)return this.substages[t];return!1},start:function(e,t,r){this.started=!0,this.onStart(e,t,r);for(var n=0;n<this.substages.length;n++)this.substages[n].start(e,t,r)},render:function(e,t,r){if(this.enabled){this.onPreRender(e,t,r);for(var n=0;n<this.substages.length;n++)this.substages[n].started||this.substages[n].start(e,t.engine,r),this.substages[n].render(e,t,r);this.onPostRender(e,t,r)}},enable:function(){return this.enabled=!0,this.onEnable(),this},disable:function(){return this.enabled=!1,this.onDisable(),this},onStart:function(e,t,r){},onPreRender:function(e,t,r){},onPostRender:function(e,t,r){},onEnable:function(){},onDisable:function(){}}),MaterialRenderStage=RenderStage.extend({init:function(){this._super(),this.organizer=new RendererOrganizer,this.solidRenderers=[],this.solidRendererBatches={},this.transparentRenderers=[],this.transparentRendererBatches={},this.shadowFallback=null,this.diffuseFallback=null,this.bindCameraTarget={started:!0,start:function(){},render:function(e,t,r){r.target.bind(e)}},this.unbindCameraTarget={started:!0,start:function(){},render:function(e,t,r){r.target.unbind(e)}},this.shadowMapStage=this.addStage(new ShadowMapRenderStage),this.depthStage=this.addStage(new DepthRenderStage).disable(),this.oitStage=this.addStage(new OITRenderStage).disable(),this.addStage(this.bindCameraTarget),this.skyboxStage=this.addStage(new SkyboxRenderStage),this.opaqueStage=this.addStage(new OpaqueGeometryRenderStage),this.transparentStage=this.addStage(new TransparentGeometryRenderStage),this.addStage(this.unbindCameraTarget),this.eyePosition=vec3.create(),this.invModelview=mat4.create(),this.sharedUniforms={view:new UniformMat4(mat4.create()),viewInverse:new UniformMat4(mat4.create()),projection:new UniformMat4(mat4.create())},this.rendererUniforms={model:new UniformMat4(null),modelview:new UniformMat4(null),receiveShadows:new UniformInt(1)},this.shadowUniforms={lightView:new UniformMat4(mat4.create()),lightProjection:new UniformMat4(mat4.create()),shadowBias:new UniformFloat(.001),hasFloat:new UniformInt(1),useVSM:new UniformInt(1)},this.cachedUniforms=null,this.samplerAccum=new SamplerAccumulator},onStart:function(e,t,r){this.diffuseFallback=new Sampler("diffuse0",t.WhiteTexture),this.shadowFallback=new Sampler("shadow0",t.WhiteTexture),!0===t.options.ssao&&this.depthStage.enable(),"sorted"!=t.options.transparencyMode&&this.oitStage.enable()},prepareShadowContext:function(e,t){this._shadowContext||(this._shadowContext={shadow0:this.shadowFallback,lightProjection:this.shadowUniforms.lightProjection,lightView:this.shadowUniforms.lightView}),e.shadow=this._shadowContext,e.shadow.shadow0=this.shadowFallback;var r=this.shadowMapStage.getFirstShadowCastingLight(t,!0);r&&(mat4.copy(this.shadowUniforms.lightView.value,r.lightView),mat4.copy(this.shadowUniforms.lightProjection.value,r.lightProj),this.shadowUniforms.shadowBias.value=r.shadowBias,this.shadowUniforms.hasFloat.value=r.shadow instanceof TargetTextureFloat?1:0,1==this.shadowUniforms.hasFloat.value&&this.shadowMapStage.extStandardDerivatives?this.shadowUniforms.useVSM.value=1:this.shadowUniforms.useVSM.value=0,e.shadow.shadow0=r.shadowSampler)},prepareLightContext:function(e,t){for(var r=0;r<t.lights.length;r++){var n=t.lights[r];n instanceof DirectionalLight&&(n.enabled&&(n.uniforms?(vec3.copy(n.uniforms.lightDirection.value,n.direction),n.uniforms.lightIntensity.value=n.intensity,n.uniforms.lightColor.value[0]=n.color.r,n.uniforms.lightColor.value[1]=n.color.g,n.uniforms.lightColor.value[2]=n.color.b,n.uniforms.lightColor.value[3]=n.color.a,n.uniforms.useShadows.value=n.shadowCasting?1:0):n.uniforms={lightDirection:new UniformVec3(n.direction),lightColor:new UniformColor(n.color),lightIntensity:new UniformFloat(n.intensity),useShadows:new UniformInt(n.shadowCasting?1:0)}))}},prepareShared:function(e){mat4.invert(this.invModelview,e.modelview.top()),mat4.translation(this.eyePosition,this.invModelview),mat4.copy(this.sharedUniforms.projection.value,e.projection.top()),mat4.copy(this.sharedUniforms.view.value,e.camera.viewMatrix),mat4.copy(this.sharedUniforms.viewInverse.value,e.camera.viewInverseMatrix)},onPreRender:function(e,t,r){this.prepareShared(e);var n=t.dynamicSpace.frustumCast(r.frustum,r.layerMask);this.organizer.sort(t.engine,n,this.eyePosition),this.solidRenderers=this.organizer.solidRenderers,this.transparentRenderers=this.organizer.transparentRenderers,this.solidRendererBatches=this.organizer.solidRendererBatches,this.transparentRendererBatches=this.organizer.transparentRendererBatches,this.prepareLightContext(e,t),this.prepareShadowContext(e,t)},onPostRender:function(e,t,r){e.shadow=!1,e.light=!1},renderBatched:function(e,t){for(var r,n,i,o,a=!1,s=0,l=t.length;s<l;++s)if((n=t[s]).get(0)){(i=(r=n.get(0).material).shader)!=a&&(i.use(),a=i,e.shadow&&i.bindUniforms(this.shadowUniforms),i.bindUniforms(this.sharedUniforms),e.light&&e.light.uniforms&&i.bindUniforms(e.light.uniforms)),this.samplerAccum.add(e.shadow.shadow0);for(var c=0,h=r.samplers.length;c<h;++c)this.samplerAccum.add(r.samplers[c]);0===this.samplerAccum.length&&this.samplerAccum.add(this.diffuseFallback),i.bindSamplers(this.samplerAccum.samplers),i.bindUniforms(r.uniforms);c=0;for(var u=n.length;c<u;++c)o=n.get(c),e.modelview.push(),e.modelview.multiply(o.matrix),this.rendererUniforms.model.value=o.matrix,this.rendererUniforms.modelview.value=e.modelview.top(),this.rendererUniforms.receiveShadows.value=o.receiveShadows,i.bindUniforms(this.rendererUniforms),o.render(e),e.modelview.pop();i.unbindSamplers(this.samplerAccum.samplers),this.samplerAccum.clear()}},renderBruteForce:function(e,t){for(var r=0;r<t.length;++r){var n=t[r];if(!n)break;e.modelview.push(),e.modelview.multiply(n.matrix),this.cachedUniforms=n.getDefaultUniforms(e,null),n.material.bind(this.cachedUniforms,e.shadow.shadow0),n.render(e),n.material.unbind(),e.modelview.pop()}}}),ShaderRenderStage=RenderStage.extend({init:function(e,t){this._super(t),this.shader=e,this.uniforms={}},onPostRender:function(e,t,r){this.shader.use(this.uniforms),this.shader.requirements.transparent&&(e.gl.blendFunc(e.gl.SRC_ALPHA,e.gl.ONE),e.gl.enable(e.gl.BLEND));for(var n=t.dynamicSpace.frustumCast(r.frustum,r.layerMask),i=0;i<n.length;i++)n[i].renderGeometry(e,this.shader);this.shader.requirements.transparent&&e.gl.disable(e.gl.BLEND)}}),DepthRenderStage=RenderStage.extend({init:function(e){this._super(),this.target=null,this.sampler=new Sampler("depth0",null),this.size=vec2.fromValues(1024,1024),e&&vec2.copy(this.size,e),this.clearColor=new Color(0,0,0,0)},onStart:function(e,t){try{this.target=new TargetTextureFloat(this.size,e,!1),this.sampler.texture=this.target.texture}catch(e){return console.warn("DepthRenderStage: ",e),void this.disable()}this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("depth")),{zNear:new UniformFloat(.1),zFar:new UniformFloat(1e3)},[])},onPreRender:function(e,t,r){if(this.target.resetViewport(),r.target.size[0]!=this.size[0]||r.target.size[1]!=this.size[1]){var n=r.target.size;vec2.copy(this.size,n),this.target.setSize(n[0],n[1])}},onPostRender:function(e,t,r){this.material.uniforms.zNear.value=r.near,this.material.uniforms.zFar.value=r.far,e.projection.push(),e.projection.load(r.projectionMatrix),e.modelview.push(),e.modelview.load(r.viewMatrix),this.target.bind(e,!1,this.clearColor);var n=e.gl;n.enable(n.DEPTH_TEST),n.depthFunc(n.LESS),n.depthMask(!0),this.material.bind();for(var i=this.parent.organizer.solidRenderers,o=0;o<i.length&&i[o];++o)e.modelview.push(),e.modelview.multiply(i[o].matrix),this.material.shader.bindUniforms(i[o].material.uniforms),i[o].renderGeometry(e,this.material.shader),e.modelview.pop();this.material.unbind(),this.renderAlphaMapped(e,t,r),n.disable(n.DEPTH_TEST),this.target.unbind(e),e.modelview.pop(),e.projection.pop()},renderAlphaMapped:function(e,t,r){var n=this.parent.organizer.transparentBatchList,i=this.material.shader;i.use(),i.bindUniforms(this.material.uniforms),i.bindUniforms(this.parent.sharedUniforms),e.light&&e.light.uniforms&&i.bindUniforms(e.light.uniforms);for(var o=0;o<n.length;o++){var a=n[o];if(0!=a.length){var s,l,c=a.get(0).material;s=0<this.material.samplers.length?this.material.samplers.concat(c.samplers):c.samplers,i.bindUniforms(c.uniforms),i.bindSamplers(s);for(var h=0;h<a.length;++h)l=a.get(h),e.modelview.push(),e.modelview.multiply(l.matrix),this.parent.rendererUniforms.model.value=l.matrix,this.parent.rendererUniforms.modelview.value=e.modelview.top(),i.bindUniforms(this.parent.rendererUniforms),l.renderGeometry(e,i),e.modelview.pop();i.unbindSamplers(s)}}}}),ShadowMapRenderStage=RenderStage.extend({init:function(e){this._super(),this.material=null,this.clearColor=new Color(0,0,0,1),this.lightPosition=vec3.create(),this.lightLookTarget=vec3.create(),this.lightUpVector=vec3.fromValues(0,1,0),this.aabbVertices=[vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create()],this.sceneAABB=new BoundingBox,this.lightFrustum=new BoundingBox},onStart:function(e,t){var r="forward_shadow";e.isWebGL2()?r="forward_shadow_vsm":(this.extStandardDerivatives=e.gl.getExtension("OES_standard_derivatives"),this.extStandardDerivatives&&(r="forward_shadow_vsm")),this.material=new Material(t.assetsManager.addShader(t.assetsManager.shadersManager.bundle("forward_shadow.vert"),t.assetsManager.shadersManager.bundle("{0}.frag".format(r))),{hasFloat:new UniformInt(1)},[]),t.assetsManager.load()},onPostRender:function(e,t,r){var n=this.getFirstShadowCastingLight(t,!1);if(n){this.computeSceneBounds(),vec3.copy(this.lightPosition,this.sceneAABB.center),vec3.sub(this.lightLookTarget,this.lightPosition,n.direction),mat4.lookAt(n.lightView,this.lightPosition,this.lightLookTarget,this.lightUpVector),this.sceneAABB.getVertices(this.aabbVertices);for(var i=0;i<8;++i)vec3.transformMat4(this.aabbVertices[i],this.aabbVertices[i],n.lightView);this.lightFrustum.set(this.aabbVertices[0],[0,0,0]);for(i=1;i<8;++i)this.lightFrustum.encapsulatePoint(this.aabbVertices[i]);mat4.ortho(n.lightProj,this.lightFrustum.min[0],this.lightFrustum.max[0],this.lightFrustum.min[1],this.lightFrustum.max[1],this.lightFrustum.min[2],this.lightFrustum.max[2]),n.shadow instanceof TargetTextureFloat?this.material.uniforms.hasFloat.value=1:this.material.uniforms.hasFloat.value=0,e.projection.push(),e.projection.load(n.lightProj),e.modelview.push(),e.modelview.load(n.lightView),n.shadow.bind(e,!1,this.clearColor);var o=e.gl;o.enable(o.DEPTH_TEST),o.depthFunc(o.LESS),o.depthMask(!0),o.colorMask(!0,!0,!0,!0),this.material.bind();var a=this.parent.organizer.solidRenderers;for(i=0;i<a.length&&a[i];++i)a[i].layer&n.shadowMask&&a[i].castShadows&&(e.modelview.push(),e.modelview.multiply(a[i].matrix),this.material.shader.bindUniforms(a[i].material.uniforms),a[i].renderGeometry(e,this.material.shader),e.modelview.pop());this.material.unbind(),this.renderAlphaMapped(e,n),o.disable(o.DEPTH_TEST),n.shadow.unbind(e),n.updateSamplers(),n.undamage(),this.parent.prepareShadowContext(e,t),e.modelview.pop(),e.projection.pop()}},renderAlphaMapped:function(e,t){var r,n=this.parent.organizer.transparentBatchList,i=this.material.shader,o=[this.parent.diffuseFallback];i.use(),i.bindUniforms(this.material.uniforms),i.bindUniforms(this.parent.sharedUniforms);for(var a=0;a<n.length;++a){var s=n[a];if(0!=s.length){var l,c=s.get(0).material;r=0<c.samplers.length?c.samplers:o,i.bindUniforms(c.uniforms),i.bindSamplers(r);for(var h=0;h<s.length;++h)(l=s.get(h)).layer&t.shadowMask&&l.castShadows&&(e.modelview.push(),e.modelview.multiply(l.matrix),this.parent.rendererUniforms.model.value=l.matrix,this.parent.rendererUniforms.modelview.value=e.modelview.top(),i.bindUniforms(this.parent.rendererUniforms),l.renderGeometry(e,i),e.modelview.pop());i.unbindSamplers(r)}}},computeSceneBounds:function(){!1===this.sceneAABB.center&&(this.sceneAABB.center=vec3.create()),vec3.set(this.sceneAABB.center,0,0,0),vec3.set(this.sceneAABB.extents,0,0,0),this.sceneAABB.recalculate();for(var e=this.parent.organizer.solidRenderers,t=this.parent.organizer.transparentRenderers,r=0;r<e.length&&e[r];++r)e[r].castShadows&&this.sceneAABB.encapsulateBox(e[r].globalBoundingBox);for(r=0;r<t.length&&t[r];++r)t[r].castShadows&&this.sceneAABB.encapsulateBox(t[r].globalBoundingBox);return this.sceneAABB},getFirstShadowCastingLight:function(e,t){for(var r=0;r<e.lights.length;++r)if(e.lights[r]instanceof DirectionalLight&&e.lights[r].enabled&&(t||!e.engine.options.shadowManualUpdate||e.lights[r].damaged)&&!0===e.lights[r].shadowCasting)return e.lights[r];return!1}}),PositionBufferRenderStage=RenderStage.extend({init:function(e){this._super(),this.size=2048,e&&(this.size=e),this.target=!1},onStart:function(e,t){this.target=new TargetTextureFloat([this.size,this.size],e,!1),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("positionbuffer")),{ViewportSize:new UniformVec2(vec2.clone(t.scene.camera.target.size))},[]);this.quad=new TrianglesRenderBuffer(e,[0,1,2,0,2,3]),this.quad.add("position",[0,0,0,0,1,0,1,1,0,1,0,0],3),this.quad.add("texcoord2d0",[0,1,0,0,1,0,1,1],2),t.assetsManager.load(function(){})},onPreRender:function(e,t,r){vec2.set(this.material.uniforms.ViewportSize.value,r.target.size[0],r.target.size[1])},onPostRender:function(e,t,r){if(this.parent&&this.parent instanceof MaterialRenderStage&&this.target&&this.material){this.target.bind(e);var n=e.gl;n.depthMask(!0),n.clearDepth(1),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT|n.DEPTH_BUFFER_BIT),n.enable(n.DEPTH_TEST),n.depthFunc(n.LESS),this.material.bind();for(var i=0;i<this.parent.solidRenderers.length&&this.parent.solidRenderers[i];++i)this.parent.solidRenderers[i].layer&&this.parent.solidRenderers[i].visible&&(e.modelview.push(),e.modelview.multiply(this.parent.solidRenderers[i].matrix),this.parent.solidRenderers[i].renderGeometry(e,this.material.shader),e.modelview.pop());this.material.unbind(),n.depthMask(!0),n.disable(n.DEPTH_TEST),this.target.unbind(e)}}}),SSAOBufferRenderStage=RenderStage.extend({init:function(){this._super(),this.size=!1,this.quad=!1,this.target=!1},setSize:function(e,t){!1===this.size&&(this.size=vec2.create()),this.size[0]=e,this.size[1]=t},onStart:function(e,t){this.size||(this.size=vec2.clone(t.scene.camera.target.size)),this.target=new TargetTextureFloat([t.scene.camera.target.size[0],t.scene.camera.target.size[1]],e,!1),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("ssao")),{ViewportSize:new UniformVec2(vec2.clone(t.scene.camera.target.size)),ssaoGDisplace:new UniformFloat(t.options.ssaoGDisplace?t.options.ssaoGDisplace:6),ssaoRadius:new UniformFloat(t.options.ssaoRadius?t.options.ssaoRadius:8),ssaoDivider:new UniformFloat(t.options.ssaoDivider?t.options.ssaoDivider:.5)},[new Sampler("position0",this.parent.positionBufferStage.target.texture)]),this.material.name="SSAO";this.quad=new TrianglesRenderBuffer(e,[0,1,2,0,2,3]),this.quad.add("position",[-1,-1,0,-1,1,0,1,1,0,1,-1,0],3),this.quad.add("texcoord2d0",[0,1,0,0,1,0,1,1],2),t.assetsManager.load()},onPreRender:function(e,t,r){var n=r.target;n.size[0]==this.target.size[0]&&n.size[1]==this.target.size[1]||(vec2.set(this.material.uniforms.ViewportSize.value,r.target.size[0],r.target.size[1]),this.setSize(n.size[0],n.size[1]),this.target.setSize(n.size[0],n.size[1]))},onPostRender:function(e,t,r){if(this.parent&&this.parent instanceof MaterialRenderStage&&this.target&&this.material){this.target.bind(e);var n=e.gl;if(n.disable(n.DEPTH_TEST),n.disable(n.CULL_FACE),n.clearColor(0,0,0,0),n.clear(n.COLOR_BUFFER_BIT),this.material.bind(),this.material.shader.linked){var i=[];for(var o in this.quad.buffers){n.bindBuffer(n.ARRAY_BUFFER,this.quad.buffers[o]);var a=n.getAttribLocation(this.material.shader.program,o);-1!=a&&(n.enableVertexAttribArray(a),i.push(a),n.vertexAttribPointer(a,this.quad.buffers[o].itemSize,n.FLOAT,!1,0,0))}for(var s in this.quad.drawElements(),i)n.disableVertexAttribArray(i[s])}this.material.unbind(),this.target.unbind(e)}}}),SkyboxRenderStage=RenderStage.extend({init:function(){this._super(),this.uniforms={model:new UniformMat4(mat4.create()),modelview:new UniformMat4(mat4.create()),projection:new UniformMat4(mat4.create()),view:new UniformMat4(mat4.create()),viewInverse:new UniformMat4(mat4.create()),zNear:new UniformFloat(0),zFar:new UniformFloat(0),lightDirection:new UniformVec3(vec3.create()),lightColor:new UniformColor(new Color),lightIntensity:new UniformFloat(1)},this.shadowFallback=null},onStart:function(e,t,r){this.shadowFallback=new Sampler("shadow0",t.WhiteTexture)},onPostRender:function(e,t,r){var n=t.cameraNode.getComponent(SkyboxComponent);if(n)for(var i=[this.shadowFallback],o=n.meshNode.getComponent(MeshRendererComponent).meshRenderers,a=0;a<o.length;a++){var s=o[a],l=s.getDefaultUniforms(e,this.uniforms);mat4.identity(l.model.value),mat4.translate(l.model.value,l.model.value,r.getPosition()),s.material.bind(l,i),s.render(e),s.material.unbind(i)}}}),OpaqueGeometryRenderStage=RenderStage.extend({init:function(){this._super(),this.activeLights=[]},getDirectionalLights:function(e){this.activeLights.length<e.lights.length&&(this.activeLights.length=e.lights.length);for(var t,r=0,n=0;n<e.lights.length;++n)(t=e.lights[n])instanceof DirectionalLight&&t.enabled&&(this.activeLights[r++]=t);for(n=r;n<e.lights.length;++n)this.activeLights[n]=null;return this.activeLights},onPostRender:function(e,t,r){var n=this.getDirectionalLights(t),i=e.gl;if(i.enable(i.DEPTH_TEST),i.depthFunc(i.LESS),i.depthMask(!0),0<n.length&&n[0]&&(e.light=n[0]),this.parent.organizer.enableDynamicBatching?this.parent.renderBatched(e,this.parent.organizer.opaqueBatchList):this.parent.renderBruteForce(e,this.parent.organizer.solidRenderers),1<n.length&&n[1]){i.depthMask(!1),i.depthFunc(i.LEQUAL),i.blendFunc(i.ONE,i.ONE),i.enable(i.BLEND);for(var o=1;o<n.length&&n[o];o++)e.light=n[o],this.parent.organizer.enableDynamicBatching?this.parent.renderBatched(e,this.parent.organizer.opaqueBatchList):this.parent.renderBruteForce(e,this.parent.organizer.solidRenderers);i.disable(i.BLEND),i.depthMask(!0),i.depthFunc(i.LESS)}this.parent.organizer.enableDynamicBatching?this.parent.renderBatched(e,this.parent.organizer.unlitBatchList):this.parent.renderBruteForce(e,this.parent.organizer.unlitRenderers),i.disable(i.DEPTH_TEST),e.light=!1}}),UnlitGeometryRenderStage=RenderStage.extend({init:function(){this._super(),this.sharedUniforms={view:new UniformMat4(mat4.create()),viewInverse:new UniformMat4(mat4.create()),projection:new UniformMat4(mat4.create())},this.rendererUniforms={model:new UniformMat4(null),modelview:new UniformMat4(null),receiveShadows:new UniformInt(1)},this.samplerAccum=new SamplerAccumulator},onPostRender:function(e,t,r){var n=e.gl;n.enable(n.DEPTH_TEST),n.depthFunc(n.LESS),n.depthMask(!0),this.parent.organizer.enableDynamicBatching?this.renderBatched(e,this.parent.organizer.unlitBatchList):this.renderBruteForce(e,this.parent.organizer.unlitRenderers),n.disable(n.DEPTH_TEST)},renderBatched:function(e,t){for(var r,n,i,o,a=!1,s=0,l=t.length;s<l;++s)if((n=t[s]).get(0)){(i=(r=n.get(0).material).shader)!=a&&(i.use(),(a=i).bindUniforms(this.parent.sharedUniforms)),this.samplerAccum.add(e.shadow.shadow0);for(var c=0,h=r.samplers.length;c<h;++c)this.samplerAccum.add(r.samplers[c]);0===this.samplerAccum.length&&this.samplerAccum.add(this.parent.diffuseFallback),i.bindSamplers(this.samplerAccum.samplers),i.bindUniforms(r.uniforms);c=0;for(var u=n.length;c<u;++c)o=n.get(c),e.modelview.push(),e.modelview.multiply(o.matrix),this.rendererUniforms.model.value=o.matrix,this.rendererUniforms.modelview.value=e.modelview.top(),this.rendererUniforms.receiveShadows.value=o.receiveShadows,i.bindUniforms(this.rendererUniforms),o.render(e),e.modelview.pop();i.unbindSamplers(this.samplerAccum.samplers),this.samplerAccum.clear()}},renderBruteForce:function(e,t){for(var r=0;r<t.length;++r){var n=t[r];if(!n)break;e.modelview.push(),e.modelview.multiply(n.matrix),this.cachedUniforms=n.getDefaultUniforms(e,null),n.material.bind(this.cachedUniforms,e.shadow.shadow0),n.render(e),n.material.unbind(),e.modelview.pop()}}}),TransparentGeometryRenderStage=RenderStage.extend({renderSorted:function(e,t,r){var n=e.gl;n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA),n.enable(n.BLEND),n.depthMask(!1),n.depthFunc(n.LESS),n.enable(n.DEPTH_TEST),this.parent.renderBruteForce(e,this.parent.organizer.transparentRenderers),n.disable(n.BLEND),n.disable(n.DEPTH_TEST),n.depthMask(!0)},onPostRender:function(e,t,r){"sorted"==t.engine.options.transparencyMode?this.renderSorted(e,t,r):this.parent.oitStage.renderAlphaMapped(e,t,r)}}),OITRenderStage=RenderStage.extend({init:function(){this._super(),this.diffuseFallback=null,this.oitClearColor=new Color(0,0,0,0),this.transparencyTarget=!1,this.transparencySampler=!1,this.transparencyWeight=!1,this.transparencyWeightSampler=!1,this.transparencyAccum=!1},onStart:function(e,t,r){try{var n=r.target.size;this.transparencyTarget=new TargetTextureFloat(n,e,!1),this.transparencyWeight=new TargetTextureFloat(n,e,!1)}catch(e){return console.warn("OITRenderStage: ",e),void this.disable()}this.transparencySampler=new Sampler("oitAccum",this.transparencyTarget.texture),this.transparencyWeightSampler=new Sampler("oitWeight",this.transparencyWeight.texture),this.diffuseFallback=new Sampler("diffuse0",t.WhiteTexture),this.envFallback=new Sampler("env0",t.WhiteTexture);var i=e.gl;this.transparencyWeight.bind(e,!0),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,this.transparencyTarget.depth),this.transparencyWeight.unbind(e),this.transparencyWeight.depth=this.transparencyTarget.depth,this.transparencyAccum=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("OITAccum")),{render_mode:new UniformInt(0),useNormalmap:new UniformInt(0),useReflection:new UniformInt(0)},[]),this.opaqueDepthMaterial=new Material(t.assetsManager.addShaderSource("diffuse"),{useShadows:new UniformInt(0),ambient:new UniformColor,diffuse:new UniformColor},[this.diffuseFallback,new Sampler("shadow0",t.WhiteTexture)]),t.assetsManager.load()},onPostRender:function(e,t,r){if(this.transparencyTarget.resetViewport(),this.transparencyWeight.resetViewport(),r.target.size[0]!=this.transparencyTarget.size[0]||r.target.size[1]!=this.transparencyTarget.size[1]){this.transparencyTarget.setSize(r.target.size[0],r.target.size[1]),this.transparencyWeight.setSize(r.target.size[0],r.target.size[1]);var n=e.gl;this.transparencyWeight.bind(e,!0),n.framebufferRenderbuffer(n.FRAMEBUFFER,n.DEPTH_ATTACHMENT,n.RENDERBUFFER,this.transparencyTarget.depth),this.transparencyWeight.unbind(e),this.transparencyWeight.depth=this.transparencyTarget.depth}e.projection.push(),e.projection.load(r.projectionMatrix),e.modelview.push(),e.modelview.load(r.viewMatrix),this.oitClearColor.set(0,0,0,0),this.transparencyTarget.bind(e,!1,this.oitClearColor),e.gl.depthMask(!0),e.gl.colorMask(!1,!1,!1,!1),this.renderOpaque(e,t,r),this.renderAlphaMapped(e,t,r),e.gl.colorMask(!0,!0,!0,!0),this.renderPass(e,t,r,!0),this.transparencyTarget.unbind(e),this.oitClearColor.set(1,1,1,1),this.transparencyWeight.bind(e,!1,this.oitClearColor,e.gl.COLOR_BUFFER_BIT),this.renderPass(e,t,r,!1),this.transparencyWeight.unbind(e),e.modelview.pop(),e.projection.pop()},renderTransparentBatches:function(e,t,r,n){var i=n.shader;i.use(),e.light&&e.light.uniforms&&i.bindUniforms(e.light.uniforms);for(var o=this.parent.organizer.transparentBatchList,a=0,s=o.length;a<s;a++){var l=o[a];if(0!=l.length){var c,h,u,d,f=l.get(0).material;c=0<n.samplers.length?n.samplers.concat(f.samplers):f.samplers;for(var m=0;m<c.length;++m)"normal0"!=c[m].name?"env0"!=c[m].name?"diffuse0"==c[m].name&&(h=!0):(n.uniforms.useReflection.value=1,u=!0):n.uniforms.useNormalmap.value=1;h||c.push(this.diffuseFallback),u||c.push(this.envFallback),i.bindUniforms(n.uniforms),i.bindUniforms(f.uniforms),i.bindSamplers(c);for(var v=0,p=l.length;v<p;++v)d=l.get(v),e.modelview.push(),e.modelview.multiply(d.matrix),d.renderGeometry(e,i),e.modelview.pop();i.unbindSamplers(c)}}},renderAlphaMapped:function(e,t,r){var n=e.gl;n.depthMask(!0),n.depthFunc(n.LESS),n.enable(n.DEPTH_TEST),this.transparencyAccum.uniforms.render_mode.value=2,this.renderTransparentBatches(e,t,r,this.transparencyAccum),n.disable(n.DEPTH_TEST)},renderOpaque:function(e,t,r){var n=e.gl;n.enable(n.DEPTH_TEST),n.depthFunc(n.LESS);var i=this.opaqueDepthMaterial.shader;i.use(),i.bindUniforms(this.opaqueDepthMaterial.uniforms),i.bindSamplers(this.opaqueDepthMaterial.samplers);for(var o=this.parent.organizer.solidRenderers,a=0;a<o.length&&o[a];++a)e.modelview.push(),e.modelview.multiply(o[a].matrix),o[a].renderGeometry(e,i),e.modelview.pop();i.unbindSamplers(this.opaqueDepthMaterial.samplers),n.disable(n.DEPTH_TEST)},renderPass:function(e,t,r,n){var i=e.gl;i.colorMask(!0,!0,!0,!0),i.depthFunc(i.LESS),i.enable(i.DEPTH_TEST),"blended"==t.engine.options.transparencyMode&&(this.transparencyAccum.uniforms.render_mode.value=n?(i.depthMask(!1),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ONE),i.enable(i.BLEND),0):(i.depthMask(!1),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ZERO,i.ONE_MINUS_SRC_ALPHA),i.enable(i.BLEND),1)),"stochastic"==t.engine.options.transparencyMode&&(this.transparencyAccum.uniforms.render_mode.value=n?(i.depthMask(!0),3):(i.depthMask(!1),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ZERO,i.ONE_MINUS_SRC_ALPHA),i.enable(i.BLEND),1)),this.renderTransparentBatches(e,t,r,this.transparencyAccum),i.disable(i.BLEND),i.disable(i.DEPTH_TEST),i.depthMask(!0)}}),PostProcessRenderStage=RenderStage.extend({init:function(){this._super(),this.size=!1,this.src=!1,this.dst=!1,this.srcSampler=!1,this.dstSampler=!1,this.textureQuad=!1,this.screenQuad=!1,this.material=!1,this.generator=this.getGeneratorStage(),this.generator.parent=this},setSize:function(e,t){!1===this.size&&(this.size=vec2.create()),this.size[0]=e,this.size[1]=t},getGeneratorStage:function(){return new MaterialRenderStage},onStart:function(e,t,r){this.size||(this.size=vec2.clone(r.target.size)),this.src=new TargetTexture(this.size,e,!1,!0),this.srcSampler=new Sampler("src",this.src.texture),this.dst=new TargetTexture(this.size,e,!1,!0),this.dstSampler=new Sampler("src",this.dst.texture),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("ScreenQuad")),{},[]),this.material.name="To Screen",this.textureQuad=new ScreenQuad(e),this.screenQuad=new ScreenQuad(e),t.assetsManager.load(),this.generator.start(e,t,r)},onPreRender:function(e,t,r){var n=r.target;this.src.resetViewport(),this.dst.resetViewport(),n.size[0]==this.src.size[0]&&n.size[1]==this.src.size[1]||(this.setSize(n.size[0],n.size[1]),this.src.setSize(n.size[0],n.size[1]),this.dst.setSize(n.size[0],n.size[1])),0<this.substages.length&&(r.target=this.src),this.generator.render(e,t,r),r.target=n},onPostRender:function(e,t,r){0!=this.substages.length&&(r.target instanceof TargetTexture?(r.target.bind(e),this.renderEffect(e,this.material,this.srcSampler)):(r.target.bind(e),this.renderEffect(e,this.material,this.srcSampler,!0)),r.target.unbind(e),this.swapBuffers())},swapBuffers:function(){var e=this.src,t=this.srcSampler;this.src=this.dst,this.srcSampler=this.dstSampler,this.dst=e,this.dstSampler=t},renderEffect:function(e,t,r,n){var i=e.gl;i.disable(i.DEPTH_TEST),i.disable(i.CULL_FACE),i.clearColor(0,0,0,0),i.clear(i.COLOR_BUFFER_BIT),!0===n?this.screenQuad.render(e,t,r):this.textureQuad.render(e,t,r)}}),ForwardRenderStage=PostProcessRenderStage.extend({init:function(){this._super(),this.debugActive=!1,this.debugger=null},onPostRender:function(e,t,r){if(this._super(e,t,r),this.debugActive){this.debugger||this.initDebugger(e,t);var n=e.gl;n.disable(n.DEPTH_TEST),n.disable(n.CULL_FACE),e.modelview.push();for(var i=0;i<this.debugger.quads.length;i++)this.debugger.sampler.texture=this.debugger.quads[i].texture,this.material.bind({},[this.debugger.sampler]),this.debugger.quads[i].quad.render(this.material.shader),this.material.unbind([this.debugger.sampler]);this.debugger.sampler.texture=this.debugger.vsyncTextures[0],this.material.bind({},[this.debugger.sampler]),this.debugger.vsyncQuad.render(this.material.shader),this.material.unbind([this.debugger.sampler]),this.debugger.vsyncTextures.reverse(),e.modelview.pop()}},debug:function(e){this.debugActive=!(!1===e)},initDebugger:function(a,e){var t=new Texture(a);t.name="Red",t.mipmapped=!1,t.clearImage(a,[255,0,0,255]);var r=new Texture(a);function n(e,t,r,n){var i=[e,t,0,e,t+n,0,e+r,t+n,0,e+r,t,0],o=new TrianglesRenderBuffer(a,[0,1,2,0,2,3]);return o.add("position",i,3),o.add("uv0",[0,0,0,1,1,1,1,0],2),o}r.name="Red",r.mipmapped=!1,r.clearImage(a,[0,255,255,255]),this.debugger={quads:[],sampler:new Sampler("tex0",null),vsyncQuad:n(.85,.85,.1,.1),vsyncTextures:[t,r]};for(var i=.5,o=-1,s=1-i,l=0;l<e.lights.length;l++)e.lights[l].enabled&&e.lights[l].shadowCasting&&e.lights[l].shadow&&e.lights[l]instanceof DirectionalLight&&(this.debugger.quads.push({quad:n(o,s,i,i),texture:e.lights[l].shadow.texture}),o+=i);i=.5,s=o=-1,this.generator.oitStage.enabled&&(this.debugger.quads.push({quad:n(o,s,i,i),texture:this.generator.oitStage.transparencyTarget.texture}),this.debugger.quads.push({quad:n(o+=i,s,i,i),texture:this.generator.oitStage.transparencyWeight.texture})),this.generator.depthStage.enabled&&this.debugger.quads.push({quad:n(o+=i,s,i,i),texture:this.generator.depthStage.target.texture})}}),DeferredRenderStage=PostProcessRenderStage.extend({init:function(){this._super(),this.debugActive=!1,this.debugger=null},onStart:function(e,t,r){if(!e.isWebGL2()&&!e.gl.getExtension("WEBGL_draw_buffers"))throw"DeferredRenderStage: WEBGL_draw_buffers not available.";if(!e.isWebGL2()&&!e.gl.getExtension("OES_texture_float"))throw"DeferredRenderStage: OES_texture_float not available.";if(!e.isWebGL2()&&!e.gl.getExtension("OES_standard_derivatives"))throw"DeferredRenderStage: OES_standard_derivatives not available.";this._super(e,t,r)},getGeneratorStage:function(){return new DeferredShadingRenderStage},onPreRender:function(e,t,r){var n=r.target;if(this.src.resetViewport(),this.dst.resetViewport(),this.generator.gbufferStage.damaged){var i=vec2.scale(vec2.create(),this.generator.gbufferStage.size,this.generator.gbufferStage.quality);this.src.setSize(i[0],i[1]),this.dst.setSize(i[0],i[1])}this.setSize(n.size[0],n.size[1]),0<this.substages.length&&(r.target=this.src),this.generator.render(e,t,r),r.target=n},onPostRender:function(e,t,r){if(this._super(e,t,r),this.debugActive){this.debugger||this.initDebugger(e,t);var n=e.gl;n.disable(n.DEPTH_TEST),n.disable(n.CULL_FACE),e.modelview.push();for(var i=0;i<this.debugger.quads.length;i++)this.debugger.sampler.texture=this.debugger.quads[i].texture,this.material.bind({},[this.debugger.sampler]),this.debugger.quads[i].quad.render(this.material.shader),this.material.unbind([this.debugger.sampler]);e.modelview.pop()}},debug:function(e){this.debugActive=!(!1===e)},initDebugger:function(a,e){function t(e,t,r,n){var i=[e,t,0,e,t+n,0,e+r,t+n,0,e+r,t,0],o=new TrianglesRenderBuffer(a,[0,1,2,0,2,3]);return o.add("position",i,3),o.add("uv0",[0,0,0,1,1,1,1,0],2),o}this.debugger={quads:[],sampler:new Sampler("tex0",null)};var r=this.generator.gbufferStage.buffer,n=2/7,i=-1,o=-1;this.debugger.quads.push({quad:t(i,o,n,n),texture:r.targets[0]}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:r.targets[1]}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:r.targets[2]}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:r.targets[3]}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:this.generator.softShadowsStage.target.texture}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:this.generator.oitStage.transparencyTarget.texture}),this.debugger.quads.push({quad:t(i+=n,o,n,n),texture:this.generator.oitStage.transparencyWeight.texture}),i=-1,o=1-(n=.5);for(var s=0;s<e.lights.length;s++)e.lights[s].enabled&&e.lights[s].shadowCasting&&e.lights[s].shadow&&e.lights[s]instanceof DirectionalLight&&(this.debugger.quads.push({quad:t(i,o,n,n),texture:e.lights[s].shadow.texture}),i+=n)}}),DeferredShadingRenderStage=RenderStage.extend({init:function(){this._super(),this.organizer=new RendererOrganizer,this.diffuseFallback=null,this.size=vec2.create(),this.bindCameraTarget={started:!0,start:function(){},render:function(e,t,r){r.target.bind(e,!0)}},this.unbindCameraTarget={started:!0,start:function(){},render:function(e,t,r){r.target.unbind(e)}},this.shadowStage=this.addStage(new DeferredShadowRenderStage),this.oitStage=this.addStage(new OITRenderStage),this.gbufferStage=this.addStage(new GBufferRenderStage),this.softShadowsStage=this.addStage(new SoftShadowsRenderStage).disable(),this.addStage(this.bindCameraTarget),this.lightsStage=this.addStage(new LightsRenderStage),this.unlitStage=this.addStage(new UnlitGeometryRenderStage),this.addStage(this.unbindCameraTarget),this.sharedUniforms={view:new UniformMat4(mat4.create()),viewInverse:new UniformMat4(mat4.create()),projection:new UniformMat4(mat4.create())},this.rendererUniforms={model:new UniformMat4(null),modelview:new UniformMat4(null),receiveShadows:new UniformInt(1)}},onStart:function(e,t,r){this.diffuseFallback=new Sampler("diffuse0",t.WhiteTexture),vec2.copy(this.size,this.parent.size),t.options.softShadows&&this.softShadowsStage.enable()},prepareShared:function(e){mat4.copy(this.sharedUniforms.projection.value,e.projection.top()),mat4.copy(this.sharedUniforms.view.value,e.camera.viewMatrix),mat4.copy(this.sharedUniforms.viewInverse.value,e.camera.viewInverseMatrix),vec2.copy(this.size,this.parent.size)},onPreRender:function(e,t,r){this.prepareShared(e);var n=t.dynamicSpace.frustumCast(r.frustum,r.layerMask);this.organizer.sort(t.engine,n)},onPostRender:function(e,t,r){}}),DeferredShadowRenderStage=RenderStage.extend({init:function(){this._super(),this.material=null,this.directional=[],this.clearColor=new Color(0,0,0,0),this.lightPosition=vec3.create(),this.lightLookTarget=vec3.create(),this.lightUpVector=vec3.fromValues(0,1,0),this.aabbVertices=[vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create()],this.sceneAABB=new BoundingBox,this.lightFrustum=new BoundingBox},onStart:function(e,t,r){e.isWebGL2()||(this.extStandardDerivatives=e.gl.getExtension("OES_standard_derivatives")),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_shadow_directional")),{},[]),t.assetsManager.load()},collectLights:function(e){for(var t=this.directional.length=0;t<e.lights.length;++t)e.lights[t].enabled&&e.lights[t].shadowCasting&&e.lights[t].shadow&&(e.engine.options.shadowManualUpdate&&!e.lights[t].damaged||e.lights[t]instanceof DirectionalLight&&this.directional.push(e.lights[t]))},computeSceneBounds:function(){!1===this.sceneAABB.center&&(this.sceneAABB.center=vec3.create()),vec3.set(this.sceneAABB.center,0,0,0),vec3.set(this.sceneAABB.extents,0,0,0),this.sceneAABB.recalculate();for(var e=this.parent.organizer.solidRenderers,t=this.parent.organizer.transparentRenderers,r=0;r<e.length&&e[r];++r)e[r].castShadows&&this.sceneAABB.encapsulateBox(e[r].globalBoundingBox);for(r=0;r<t.length&&t[r];++r)t[r].castShadows&&this.sceneAABB.encapsulateBox(t[r].globalBoundingBox);return this.sceneAABB},renderDirectionalLightDepth:function(e,t){vec3.copy(this.lightPosition,this.sceneAABB.center),vec3.sub(this.lightLookTarget,this.lightPosition,t.direction),mat4.lookAt(t.lightView,this.lightPosition,this.lightLookTarget,this.lightUpVector),this.sceneAABB.getVertices(this.aabbVertices);for(var r=0;r<8;++r)vec3.transformMat4(this.aabbVertices[r],this.aabbVertices[r],t.lightView);this.lightFrustum.set(this.aabbVertices[0],[0,0,0]);for(r=1;r<8;++r)this.lightFrustum.encapsulatePoint(this.aabbVertices[r]);mat4.ortho(t.lightProj,this.lightFrustum.min[0],this.lightFrustum.max[0],this.lightFrustum.min[1],this.lightFrustum.max[1],this.lightFrustum.min[2],this.lightFrustum.max[2]),e.projection.push(),e.projection.load(t.lightProj),e.modelview.push(),e.modelview.load(t.lightView),t.shadow.bind(e,!1,this.clearColor);var n=e.gl;n.enable(n.DEPTH_TEST),n.depthFunc(n.LESS),n.depthMask(!0),this.material.bind();var i=this.parent.organizer.solidRenderers;for(r=0;r<i.length&&i[r];++r)if(i[r].layer&t.shadowMask&&i[r].castShadows){var o=this.material.shader;e.modelview.push(),e.modelview.multiply(i[r].matrix),o.bindUniforms(i[r].material.uniforms),i[r].renderGeometry(e,o),e.modelview.pop()}this.material.unbind(),this.renderAlphaMapped(e,t),n.disable(n.DEPTH_TEST),t.shadow.unbind(e),t.updateSamplers(e),e.modelview.pop(),e.projection.pop(),t.undamage()},renderAlphaMapped:function(e,t){var r,n=this.parent.organizer.transparentBatchList,i=this.material.shader,o=[this.parent.diffuseFallback];i.use(),i.bindUniforms(this.material.uniforms);for(var a=0;a<n.length;++a){var s=n[a];if(0!=s.length){var l=s.get(0).material;r=0<l.samplers.length?l.samplers:o,i.bindUniforms(l.uniforms),i.bindSamplers(r);for(var c=0;c<s.length;++c){var h;(h=s.get(c)).layer&t.shadowMask&&(h.castShadows&&(e.modelview.push(),e.modelview.multiply(h.matrix),h.renderGeometry(e,i),e.modelview.pop()))}i.unbindSamplers(r)}}},onPreRender:function(e,t,r){this.collectLights(t),this.computeSceneBounds();for(var n=0;n<this.directional.length;++n)this.renderDirectionalLightDepth(e,this.directional[n])},onPostRender:function(e,t,r){}}),GBufferRenderStage=RenderStage.extend({init:function(){this._super(),this.buffer=null,this.clearColor=new Color(0,0,0,0),this.size=vec2.create(),this.quality=1,this.damaged=!0,this.perBatchUniforms={useNormalmap:new UniformInt(0),useReflection:new UniformInt(0)}},setQuality:function(e){0<(e=parseFloat(e))&&(this.quality=e,this.damaged=!0)},onStart:function(e,t,r){vec2.copy(this.size,this.parent.size);var n=vec2.scale(vec2.create(),this.size,this.quality);this.buffer=new TargetTextureMulti(e,n,{numTargets:4,stencil:!0}),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_gbuffer")),{zNear:new UniformFloat(.1),zFar:new UniformFloat(1e3)},[]),this.normalmapFallback=new Sampler("normal0"),this.maskFallback=new Sampler("mask"),this.envFallback=new Sampler("env0"),this.envFallback.createFallbackCubeTexture(e),this.envFallback.texture=fallbackCubeTexture,t.assetsManager.load()},onPreRender:function(e,t,r){if(this.material.uniforms.zNear.value=r.near,this.material.uniforms.zFar.value=r.far,this.damaged){var n=vec2.scale(vec2.create(),this.size,this.quality);this.buffer.setSize(n[0],n[1]),this.damaged=!1}},onPostRender:function(e,t,r){var n=e.gl;this.buffer.bind(e,!1,this.clearColor),n.depthMask(!0),n.colorMask(!0,!0,!0,!0),n.depthFunc(n.LESS),n.enable(n.DEPTH_TEST),n.enable(n.STENCIL_TEST),n.stencilMask(255),n.stencilFunc(n.ALWAYS,1,255),n.stencilOp(n.KEEP,n.KEEP,n.REPLACE),this.renderBatches(e,t,r,this.parent.organizer.opaqueBatchList,this.material),this.renderBatches(e,t,r,this.parent.organizer.transparentBatchList,this.material),n.stencilMask(255),n.disable(n.STENCIL_TEST),n.disable(n.DEPTH_TEST),this.buffer.unbind(e)},renderBatches:function(e,t,r,n,i){var o=i.shader;o.use(),o.bindUniforms(i.uniforms);for(var a=0;a<n.length;a++){var s=n[a];if(0!=s.length){var l=s.get(0).material;this.perBatchUniforms.useNormalmap.value=0;for(var c,h,u=!1,d=this.perBatchUniforms.useReflection.value=0;d<l.samplers.length;d++)"normal0"!=l.samplers[d].name?"env0"!=l.samplers[d].name?"mask"!=l.samplers[d].name||(u=!0):this.perBatchUniforms.useReflection.value=1:this.perBatchUniforms.useNormalmap.value=1;c=0<i.samplers.length?i.samplers.concat(l.samplers):l.samplers.slice(),0==l.samplers.length&&c.push(this.parent.diffuseFallback),0==this.perBatchUniforms.useNormalmap.value&&c.push(this.normalmapFallback),0==this.perBatchUniforms.useReflection.value?(c.push(this.envFallback),c.push(this.maskFallback)):1!=this.perBatchUniforms.useReflection.value||u||c.push(this.maskFallback),o.bindUniforms(this.perBatchUniforms),o.bindUniforms(l.uniforms),o.bindSamplers(c);for(var f=0;f<s.length;++f)h=s.get(f),e.modelview.push(),e.modelview.multiply(h.matrix),h.renderGeometry(e,o),e.modelview.pop();o.unbindSamplers(c)}}}}),SoftShadowsRenderStage=RenderStage.extend({init:function(){this._super(),this.quality=1,this.damaged=!1,this.sharedUniforms={cameraPosition:new UniformVec3(vec3.create()),shadowOnly:new UniformInt(1),useSoftShadows:new UniformInt(0)},this.sharedSamplers=[],this.clearColor=new Color(0,0,0,0),this.target=null},setQuality:function(e){0<(e=parseFloat(e))&&(this.quality=e,this.damaged=!0)},getShadowCastingLights:function(e){for(var t=[],r=0;r<e.lights.length;r++){var n=e.lights[r];n.enabled&&(n.shadowCasting&&n.geometry&&n instanceof DirectionalLight&&t.push(n))}return t},onStart:function(e,t,r){var n=this.parent.gbufferStage.buffer;this.sharedSamplers.push(new Sampler("gb0",n.targets[0])),this.sharedSamplers.push(new Sampler("gb1",n.targets[1])),this.sharedSamplers.push(new Sampler("gb2",n.targets[2])),this.sharedSamplers.push(new Sampler("gb3",n.targets[3])),this.target=new TargetTexture(this.parent.size,e,!1),this.blurTarget=new TargetTexture(this.parent.size,e,!1),this.blurSampler=new Sampler("src",this.target.texture),this.blurHorizontal=new Material(t.assetsManager.addShader(t.assetsManager.shadersManager.bundle("shadow_blurh.vert"),t.assetsManager.shadersManager.bundle("shadow_blur.frag")),{},[]),this.blurVertical=new Material(t.assetsManager.addShader(t.assetsManager.shadersManager.bundle("shadow_blurv.vert"),t.assetsManager.shadersManager.bundle("shadow_blur.frag")),{},[]),t.assetsManager.load()},onPreRender:function(e,t,r){if(this.damaged){var n=vec2.scale(vec2.create(),this.parent.size,this.quality);this.target.setSize(n[0],n[1]),this.blurTarget.setSize(n[0],n[1]),this.damaged=!1}},onPostRender:function(e,t,r){var n=this.getShadowCastingLights(t);if(0!=n.length){r.getPosition(this.sharedUniforms.cameraPosition.value);var i=e.gl;i.disable(i.DEPTH_TEST),i.depthMask(!1),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ONE),i.enable(i.BLEND),i.enable(i.CULL_FACE),i.cullFace(i.FRONT),this.target.bind(e,!1,this.clearColor);for(var o=0;o<n.length;o++)this.renderLight(e,n[o]);this.target.unbind(e),i.disable(i.BLEND),this.blurSampler.texture=this.target.texture,this.blurTarget.bind(e,!1,this.clearColor),this.parent.parent.renderEffect(e,this.blurHorizontal,this.blurSampler),this.blurTarget.unbind(e),this.blurSampler.texture=this.blurTarget.texture,this.target.bind(e,!1,this.clearColor),this.parent.parent.renderEffect(e,this.blurVertical,this.blurSampler),this.target.unbind(e)}},renderLight:function(e,t){var r,n=t.material,i=n.shader;i.use(),i.bindUniforms(this.sharedUniforms),i.bindUniforms(n.uniforms),r=0<n.samplers.length?n.samplers.concat(this.sharedSamplers):this.sharedSamplers,i.bindSamplers(r);for(var o=t.getGeometryRenderers(),a=0;a<o.length;a++)e.modelview.push(),t.isPositional()&&e.modelview.multiply(o[a].matrix),o[a].renderGeometry(e,i),e.modelview.pop();i.unbindSamplers(r)}}),LightsRenderStage=RenderStage.extend({init:function(){this._super(),this.sharedUniforms={cameraPosition:new UniformVec3(vec3.create()),shadowOnly:new UniformInt(0),useSoftShadows:new UniformInt(1)},this.sharedSamplers=[],this.skyboxRenderStage=new SkyboxRenderStage},getLightsWithGeometry:function(e){for(var t=[],r=[],n=[],i=0;i<e.lights.length;i++){var o=e.lights[i];o.enabled&&(o.geometry&&(o instanceof AmbientLight?t.push(o):o instanceof DirectionalLight?r.push(o):n.push(o)))}return t.concat(r).concat(n)},onStart:function(e,t,r){var n=this.parent.gbufferStage.buffer;this.sharedSamplers.push(new Sampler("gb0",n.targets[0])),this.sharedSamplers.push(new Sampler("gb1",n.targets[1])),this.sharedSamplers.push(new Sampler("gb2",n.targets[2])),this.sharedSamplers.push(new Sampler("gb3",n.targets[3])),this.backgroundMaterial=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_background")),{color:new UniformColor(new Color(1,1,1,1))},[]),t.assetsManager.load(),this.skyboxRenderStage.start(e,t,r)},onPreRender:function(e,t,r){this.sharedUniforms.useSoftShadows.value=this.parent.softShadowsStage.enabled?1:0,r.getPosition(this.sharedUniforms.cameraPosition.value)},onPostRender:function(e,t,r){var n=this.getLightsWithGeometry(t),i=e.gl;i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,this.parent.gbufferStage.buffer.depth),i.disable(i.DEPTH_TEST),i.depthMask(!1),i.enable(i.STENCIL_TEST),i.stencilMask(0),i.stencilFunc(i.NOTEQUAL,1,255),r.backgroundColor.toVector(this.backgroundMaterial.uniforms.color.value),this.parent.parent.renderEffect(e,this.backgroundMaterial,this.sharedSamplers[1]),this.skyboxRenderStage.render(e,t,r),i.stencilFunc(i.EQUAL,1,255),i.blendEquation(i.FUNC_ADD),i.blendFunc(i.ONE,i.ONE),i.enable(i.BLEND),i.enable(i.CULL_FACE),i.cullFace(i.FRONT);for(var o=0;o<n.length;o++)this.renderLight(e,n[o]);i.disable(i.BLEND),i.stencilMask(255),i.disable(i.STENCIL_TEST)},renderLight:function(e,t){var r;t.shadowCasting&&t instanceof DirectionalLight&&1==this.sharedUniforms.useSoftShadows.value&&(r=t.shadowSampler.texture,t.shadowSampler.texture=this.parent.softShadowsStage.target.texture);var n,i=t.material.shader;i.use(),i.bindUniforms(this.sharedUniforms),i.bindUniforms(t.material.uniforms),n=0<t.material.samplers.length?t.material.samplers.concat(this.sharedSamplers):this.sharedSamplers,i.bindSamplers(n);for(var o=t.getGeometryRenderers(),a=0;a<o.length;a++)e.modelview.push(),t.isPositional()&&e.modelview.multiply(o[a].matrix),o[a].renderGeometry(e,i),e.modelview.pop();i.unbindSamplers(n),t.shadowCasting&&t instanceof DirectionalLight&&1==this.sharedUniforms.useSoftShadows.value&&(t.shadowSampler.texture=r)}}),PostProcess=RenderStage.extend({init:function(){this._super(),this.material=!1},onPostRender:function(e,t,r){if(!(this.parent instanceof PostProcessRenderStage))throw"PostProcess can only be the sub-stage of a PostProcessRenderStage";if(!this.material)throw"PostProcess must have a material defined";this.parent.dst.bind(e),this.parent.renderEffect(e,this.material,this.parent.srcSampler),this.parent.dst.unbind(e),this.parent.swapBuffers()}}),AntiAliasPostProcess=PostProcess.extend({init:function(){this._super()},onStart:function(e,t){this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("postprocess_fxaa")),{ViewportSize:new UniformVec2(vec2.clone(this.parent.src.size)),reduce_min:new UniformFloat(1/16),reduce_mul:new UniformFloat(1/8),span_max:new UniformFloat(8)},[]),this.material.name="AntiAlias",t.assetsManager.load()},onPreRender:function(e,t,r){this._super(e,t,r),vec2.copy(this.material.uniforms.ViewportSize.value,this.parent.src.size)}}),BlurPostProcess=PostProcess.extend({init:function(e){this._super(),this.blurSize=vec2.fromValues(1,1),e&&vec2.copy(this.blurSize,e)},onStart:function(e,t){this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("postprocess_blur")),{ViewportSize:new UniformVec2(vec2.clone(this.parent.size)),BlurSize:new UniformVec2(this.blurSize)},[]),this.material.name="Blur",t.assetsManager.load()},onPreRender:function(e,t,r){this._super(e,t,r),vec2.set(this.material.uniforms.ViewportSize.value,this.parent.size[0],this.parent.size[1])}}),OITPostProcess=PostProcess.extend({init:function(){this._super()},onStart:function(e,t){this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("OITRender")),{ViewportSize:new UniformVec2(vec2.clone(this.parent.src.size)),render_mode:new UniformInt(0)},[this.parent.generator.oitStage.transparencySampler,this.parent.generator.oitStage.transparencyWeightSampler]),this.material.name="OIT",t.assetsManager.load()},onPreRender:function(e,t,r){switch(this._super(e,t,r),vec2.copy(this.material.uniforms.ViewportSize.value,this.parent.src.size),t.engine.options.transparencyMode){case"blended":this.material.uniforms.render_mode.value=0;break;case"stochastic":this.material.uniforms.render_mode.value=1}}}),SSAOPostProcess=PostProcess.extend({init:function(e){this._super(),this.ssaoOnly=!1},onStart:function(e,t){this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("postprocess_ssao")),{ViewportSize:new UniformVec2(vec2.clone(this.parent.src.size)),ssaoOnly:new UniformInt(!0===this.ssaoOnly?1:0),gdisplace:new UniformFloat(t.options.ssaoGDisplace?t.options.ssaoGDisplace:.3),radius:new UniformFloat(t.options.ssaoRadius?t.options.ssaoRadius:2),luminanceInfluence:new UniformFloat(t.options.ssaoLuminanceInfluence?t.options.ssaoLuminanceInfluence:.7),brightness:new UniformFloat(t.options.ssaoBrightness?t.options.ssaoBrightness:1)},[this.parent.generator.depthStage.sampler]),this.material.name="SSAO","blended"==t.options.transparencyMode?this.material.samplers.push(this.parent.generator.oitStage.transparencyWeightSampler):this.material.samplers.push(new Sampler("oitWeight",t.WhiteTexture)),t.assetsManager.load()},onPreRender:function(e,t,r){this._super(e,t,r),vec2.set(this.material.uniforms.ViewportSize.value,this.parent.src.size[0],this.parent.src.size[1]),this.material.uniforms.ssaoOnly.value=!0===this.ssaoOnly?1:0}}),RenderTarget=FrakClass.extend({init:function(e){this.viewport={position:vec2.create(),size:vec2.create()},this.size=vec2.create(),e&&(vec2.copy(this.size,e),vec2.copy(this.viewport.size,e))},type:function(){return"RenderTarget"},bind:function(e){e.gl.viewport(this.viewport.position[0],this.viewport.position[1],this.viewport.size[0],this.viewport.size[1]),e.gl.scissor(this.viewport.position[0],this.viewport.position[1],this.viewport.size[0],this.viewport.size[1]),e.gl.enable(e.gl.SCISSOR_TEST)},unbind:function(e){e.gl.disable(e.gl.SCISSOR_TEST)},setSize:function(e,t){this.size[0]=e,this.size[1]=t},getSize:function(){return this.size},setViewport:function(e,t,r,n){vec2.set(this.viewport.position,e,t),vec2.set(this.viewport.size,r,n)},inheritViewport:function(e){vec2.copy(this.viewport.position,e.viewport.position),vec2.copy(this.viewport.size,e.viewport.size)},resetViewport:function(){this.setViewport(0,0,this.size[0],this.size[1])}}),TargetScreen=RenderTarget.extend({init:function(e){this._super(e),this.position=vec2.create()},type:function(){return"TargetScreen"},setPosition:function(e,t){this.position[0]=e,this.position[1]=t},getPosition:function(){return this.position},resetViewport:function(){this.setViewport(this.position[0],this.position[1],this.size[0],this.size[1])}}),TargetTexture=RenderTarget.extend({init:function(e,t,r,n){var i=e;if((e instanceof Texture&&(i=e.size,this.texture=e),this.useDepthTexture=!0===r,this.useStencilBuffer=!0===n,this.rebuild=!1,this._super(i),this.useDepthTexture&&!t.isWebGL2())&&!(t.gl.getExtension("WEBGL_depth_texture")||t.gl.getExtension("WEBKIT_WEBGL_depth_texture")||t.gl.UNSIGNED_INT_24_8))throw"TargetTexture: Depth texture reqeusted, but not available.";this.build(t)},type:function(){return"TargetTexture"},setSize:function(e,t){this._super(e,t),this.rebuild=!0},getDataType:function(e){return e.gl.UNSIGNED_BYTE},getInternalFormat:function(e){return e.gl.RGBA},getTextureFilter:function(e){return e.gl.NEAREST},build:function(e){var t=e.gl;this.frameBuffer=t.createFramebuffer(),this.texture||(this.texture=new Texture(e),t.bindTexture(t.TEXTURE_2D,this.texture.glTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,this.getTextureFilter(e)),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,this.getTextureFilter(e)),t.texImage2D(t.TEXTURE_2D,0,this.getInternalFormat(e),this.size[0],this.size[1],0,t.RGBA,this.getDataType(e),null),t.bindTexture(t.TEXTURE_2D,null)),this.useDepthTexture?(this.depth=new Texture(e),t.bindTexture(t.TEXTURE_2D,this.depth.glTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.DEPTH_COMPONENT,this.size[0],this.size[1],0,t.DEPTH_COMPONENT,t.UNSIGNED_SHORT,null),t.bindTexture(t.TEXTURE_2D,null)):(this.depth=t.createRenderbuffer(),this.useStencilBuffer?(t.bindRenderbuffer(t.RENDERBUFFER,this.depth),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_STENCIL,this.size[0],this.size[1])):(t.bindRenderbuffer(t.RENDERBUFFER,this.depth),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,this.size[0],this.size[1])),t.bindRenderbuffer(t.RENDERBUFFER,null)),t.bindFramebuffer(t.FRAMEBUFFER,this.frameBuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture.glTexture,0),this.useDepthTexture?t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,this.depth.glTexture,0):this.useStencilBuffer?t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.RENDERBUFFER,this.depth):t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,this.depth),this.checkStatus(e),t.bindFramebuffer(t.FRAMEBUFFER,null),this.texture.loaded=!0},checkStatus:function(e){var t=e.gl,r=t.checkFramebufferStatus(t.FRAMEBUFFER);switch(r){case t.FRAMEBUFFER_COMPLETE:return!0;case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw"TargetTexture: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw"TargetTexture: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw"TargetTexture: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:throw"TargetTexture: Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED";default:throw"TargetTexture: Incomplete framebuffer: "+r}},bind:function(e,t,r,n){var i=e.gl;if(this.rebuild&&(i.bindTexture(i.TEXTURE_2D,this.texture.glTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,this.getTextureFilter(e)),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,this.getTextureFilter(e)),i.texImage2D(i.TEXTURE_2D,0,this.getInternalFormat(e),this.size[0],this.size[1],0,i.RGBA,this.getDataType(e),null),i.bindTexture(i.TEXTURE_2D,null),this.useDepthTexture?(i.bindTexture(i.TEXTURE_2D,this.depth.glTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texImage2D(i.TEXTURE_2D,0,i.DEPTH_COMPONENT,this.size[0],this.size[1],0,i.DEPTH_COMPONENT,i.UNSIGNED_SHORT,null),i.bindTexture(i.TEXTURE_2D,null)):(i.bindRenderbuffer(i.RENDERBUFFER,this.depth),this.useStencilBuffer?i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,this.size[0],this.size[1]):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_COMPONENT16,this.size[0],this.size[1]),i.bindRenderbuffer(i.RENDERBUFFER,null)),this.rebuild=!1),t=!0===t,(r=r instanceof Color&&r)||(e.camera?r=e.camera.backgroundColor:t=!0),i.bindFramebuffer(i.FRAMEBUFFER,this.frameBuffer),this._super(e),!t){i.clearColor(r.r,r.g,r.b,r.a),i.clearDepth(1);var o=i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT;this.useStencilBuffer&&(i.clearStencil(0),o|=i.STENCIL_BUFFER_BIT),n&&(o=n),i.clear(o)}},unbind:function(e){this._super(e),e.gl.bindFramebuffer(e.gl.FRAMEBUFFER,null)}}),TargetTextureFloat=TargetTexture.extend({init:function(e,t,r,n){if(t.isWebGL2()){if(this.extColorFloat=t.gl.getExtension("EXT_color_buffer_float"),!this.extColorFloat)throw"TargetTextureFloat: Floating point COLOR textures are not supported on this system."}else{if(this.extHalfFloat=t.gl.getExtension("OES_texture_half_float"),this.extFloat=t.gl.getExtension("OES_texture_float"),!this.extFloat&&!this.extHalfFloat)throw"TargetTextureFloat: Floating point textures are not supported on this system.";this.linearFloat=null,this.linearHalf=null,n||(this.linearFloat=t.gl.getExtension("OES_texture_float_linear"),this.linearHalf=t.gl.getExtension("OES_texture_half_float_linear"))}this._super(e,t,r)},type:function(){return"TargetTextureFloat"},getDataType:function(e){if(e.isWebGL2())return e.gl.FLOAT;if(this.extHalfFloat){if(!this.extFloat)return this.extHalfFloat.HALF_FLOAT_OES;if(navigator)switch(navigator.platform){case"iPad":case"iPod":case"iPhone":return this.extHalfFloat.HALF_FLOAT_OES}}return e.gl.FLOAT},getInternalFormat:function(e){return e.isWebGL2()?e.gl.RGBA16F:e.gl.RGBA},getTextureFilter:function(e){return this.linearFloat&&this.linearHalf?e.gl.LINEAR:e.gl.NEAREST},build:function(e){var t=e.gl;this.frameBuffer=t.createFramebuffer(),this.texture||(this.texture=new Texture(e),t.bindTexture(t.TEXTURE_2D,this.texture.glTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,this.getTextureFilter(e)),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,this.getTextureFilter(e)),t.texImage2D(t.TEXTURE_2D,0,this.getInternalFormat(e),this.size[0],this.size[1],0,t.RGBA,this.getDataType(e),null),t.bindTexture(t.TEXTURE_2D,null)),this.useDepthTexture?(this.depth=new Texture(e),t.bindTexture(t.TEXTURE_2D,this.depth.glTexture),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texImage2D(t.TEXTURE_2D,0,t.DEPTH_COMPONENT,this.size[0],this.size[1],0,t.DEPTH_COMPONENT,t.UNSIGNED_SHORT,null),t.bindTexture(t.TEXTURE_2D,null)):(this.depth=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,this.depth),t.renderbufferStorage(t.RENDERBUFFER,t.DEPTH_COMPONENT16,this.size[0],this.size[1]),t.bindRenderbuffer(t.RENDERBUFFER,null)),t.bindFramebuffer(t.FRAMEBUFFER,this.frameBuffer),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,this.texture.glTexture,0),this.useDepthTexture?t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,this.depth.glTexture,0):t.framebufferRenderbuffer(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.RENDERBUFFER,this.depth),this.checkStatus(e),t.bindFramebuffer(t.FRAMEBUFFER,null),this.texture.loaded=!0}}),TargetTextureMulti=RenderTarget.extend({init:function(e,t,r){if(this.options=FRAK.extend({dataType:"float",filtering:"linear",depth:!1,stencil:!1,numTargets:2},r),this.extDrawBuffers=null,this.extTextureFloat=null,this.extTextureHalfFloat=null,this.extTextureFloatLinear=null,this.extTextureHalfFloatLinear=null,this.options.numTargets<1)throw"TargetTextureMulti: Must have at least one color target.";if(!e.isWebGL2()&&(this.extDrawBuffers=e.gl.getExtension("WEBGL_draw_buffers"),!this.extDrawBuffers))throw"TargetTextureMulti: WEBGL_draw_buffers not available.";if(this.options.depth&&!e.isWebGL2()){var n=e.gl.getExtension("WEBGL_depth_texture")||e.gl.depthTextureExt;if(n||(n=e.gl.getExtension("WEBKIT_WEBGL_depth_texture")),!n)throw"TargetTextureMulti: Depth texture reqeusted, but not available."}if(e.isWebGL2()?(this.maxColorAttachments=e.gl.getParameter(e.gl.MAX_COLOR_ATTACHMENTS),this.maxDrawBuffers=e.gl.getParameter(e.gl.MAX_DRAW_BUFFERS)):(this.maxColorAttachments=e.gl.getParameter(this.extDrawBuffers.MAX_COLOR_ATTACHMENTS_WEBGL),this.maxDrawBuffers=e.gl.getParameter(this.extDrawBuffers.MAX_DRAW_BUFFERS_WEBGL)),this.options.numTargets>this.maxDrawBuffers)throw"TargetTextureMulti: Too many targets requested. System only supports {0} draw buffers.".format(this.maxDrawBuffers);if("float"==this.options.dataType&&!e.isWebGL2()){if(this.extTextureFloat=e.gl.getExtension("OES_texture_float"),this.extTextureHalfFloat=e.gl.getExtension("OES_texture_half_float"),!this.extTextureFloat&&!this.extTextureHalfFloat)throw"TargetTextureMulti: Floating point textures are not supported on this system.";if("linear"==this.options.filtering&&(this.extTextureFloatLinear=e.gl.getExtension("OES_texture_float_linear"),this.extTextureHalfFloatLinear=e.gl.getExtension("OES_texture_half_float_linear"),!this.extTextureFloatLinear&&!this.extTextureHalfFloatLinear))throw"TargetTextureMulti: Linear filtering requested, but not available."}this._super(t),this.targets=[],this.depth=null,this.frameBuffer=null,this.build(e)},type:function(){return"TargetTextureMulti"},setSize:function(e,t){this._super(e,t),this.rebuild=!0},getDataType:function(e){if("unsigned"==this.options.dataType)return e.gl.UNSIGNED_BYTE;if(e.isWebGL2())return e.gl.FLOAT;if(this.extTextureHalfFloat){if(!this.extTextureFloat)return this.extTextureHalfFloat.HALF_FLOAT_OES;if(navigator&&navigator.platform)switch(navigator.platform){case"iPad":case"iPod":case"iPhone":return this.extTextureHalfFloat.HALF_FLOAT_OES;default:return e.gl.FLOAT}}return e.gl.FLOAT},getInternalFormat:function(e){return e.isWebGL2()&&"float"==this.options.dataType?e.gl.RGBA16F:e.gl.RGBA},getTextureFilter:function(e){return"float"==this.options.dataType&&(e.isWebGL2()||this.extTextureFloatLinear||this.extTextureHalfFloatLinear)?e.gl.LINEAR:e.gl.NEAREST},createBuffer:function(e,t,r,n){var i=e.gl,o=new Texture(e);return t||(t=this.getTextureFilter(e)),r||(r=this.getDataType(e)),n||(n=i.RGBA),i.bindTexture(i.TEXTURE_2D,o.glTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,t),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,t),i.texImage2D(i.TEXTURE_2D,0,this.getInternalFormat(e),this.size[0],this.size[1],0,n,r,null),i.bindTexture(i.TEXTURE_2D,null),o.loaded=!0,o},build:function(e){var t,r=e.gl;this.frameBuffer=r.createFramebuffer(),this.options.depth?this.depth=this.createBuffer(e,r.NEAREST,r.UNSIGNED_SHORT,r.DEPTH_COMPONENT):(this.depth=r.createRenderbuffer(),r.bindRenderbuffer(r.RENDERBUFFER,this.depth),this.options.stencil?r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_STENCIL,this.size[0],this.size[1]):r.renderbufferStorage(r.RENDERBUFFER,r.DEPTH_COMPONENT16,this.size[0],this.size[1]),r.bindRenderbuffer(r.RENDERBUFFER,null));var n=[],i=e.isWebGL2()?e.gl.COLOR_ATTACHMENT0:this.extDrawBuffers.COLOR_ATTACHMENT0_WEBGL;for(t=0;t<this.options.numTargets;++t){var o=this.createBuffer(e);this.targets.push(o),n.push(i+t)}for(r.bindFramebuffer(r.FRAMEBUFFER,this.frameBuffer),this.options.depth?r.framebufferTexture2D(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.TEXTURE_2D,this.depth.glTexture,0):this.options.stencil?r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_STENCIL_ATTACHMENT,r.RENDERBUFFER,this.depth):r.framebufferRenderbuffer(r.FRAMEBUFFER,r.DEPTH_ATTACHMENT,r.RENDERBUFFER,this.depth),t=0;t<this.targets.length;++t)r.framebufferTexture2D(r.FRAMEBUFFER,i+t,r.TEXTURE_2D,this.targets[t].glTexture,0);this.checkStatus(e),e.isWebGL2()?r.drawBuffers(n):this.extDrawBuffers.drawBuffersWEBGL(n),r.bindFramebuffer(r.FRAMEBUFFER,null)},checkStatus:function(e){var t=e.gl,r=t.checkFramebufferStatus(t.FRAMEBUFFER);switch(r){case t.FRAMEBUFFER_COMPLETE:return!0;case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:throw"TargetTextureMulti: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:throw"TargetTextureMulti: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:throw"TargetTextureMulti: Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:throw"TargetTextureMulti: Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED";default:throw"TargetTextureMulti: Incomplete framebuffer: "+r}},bind:function(e,t,r,n){var i=e.gl;if(this.rebuild){this.rebuild=!1;for(var o=0;o<this.targets.length;o++){var a=this.targets[o];i.bindTexture(i.TEXTURE_2D,a.glTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,this.getTextureFilter(e)),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,this.getTextureFilter(e)),i.texImage2D(i.TEXTURE_2D,0,this.getInternalFormat(e),this.size[0],this.size[1],0,i.RGBA,this.getDataType(e),null),i.bindTexture(i.TEXTURE_2D,null)}this.options.depth?(i.bindTexture(i.TEXTURE_2D,this.depth.glTexture),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texImage2D(i.TEXTURE_2D,0,i.DEPTH_COMPONENT,this.size[0],this.size[1],0,i.DEPTH_COMPONENT,i.UNSIGNED_SHORT,null),i.bindTexture(i.TEXTURE_2D,null)):(i.bindRenderbuffer(i.RENDERBUFFER,this.depth),this.options.stencil?i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,this.size[0],this.size[1]):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_COMPONENT16,this.size[0],this.size[1]),i.bindRenderbuffer(i.RENDERBUFFER,null))}if(t=!0===t,(r=r instanceof Color&&r)||(e.camera?r=e.camera.backgroundColor:t=!0),i.bindFramebuffer(i.FRAMEBUFFER,this.frameBuffer),this._super(e),!t){i.clearColor(r.r,r.g,r.b,r.a),i.clearDepth(1);var s=i.COLOR_BUFFER_BIT|i.DEPTH_BUFFER_BIT;this.options.stencil&&(i.clearStencil(0),s|=i.STENCIL_BUFFER_BIT),n&&(s=n),i.clear(s)}},unbind:function(e){this._super(e),e.gl.bindFramebuffer(e.gl.FRAMEBUFFER,null)}}),RenderBuffer=FrakClass.extend({init:function(e,t,r){r||(r=e.gl.STATIC_DRAW),this.type=r,this.context=e,this.debug=!1,this.buffers={};for(var n=this.maxFaceIndex=0;n<t.length;n++)this.maxFaceIndex=t[n]>this.maxFaceIndex?t[n]:this.maxFaceIndex;this.createFacesBuffer(t)},has:function(e){return e in this.buffers},add:function(e,t,r){if(t.length/r<=this.maxFaceIndex)throw"RenderBuffer: Buffer '{0}' too small ({1} vertices, {2} max index).".format(e,t.length/r,this.maxFaceIndex);var n=this.context.gl;t instanceof Float32Array||(t=new Float32Array(t)),this.buffers[e]=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,this.buffers[e]),n.bufferData(n.ARRAY_BUFFER,t,this.type),this.buffers[e].itemSize=r,this.buffers[e].numItems=t.length/this.buffers[e].itemSize,n.bindBuffer(n.ARRAY_BUFFER,null)},update:function(e,t){if(!(e in this.buffers))throw"RenderBuffer: Unknown buffer: '{0}'".format(e);var r=this.buffers[e];if(t.length/r.itemSize<=this.maxFaceIndex)throw"RenderBuffer: Buffer '{0}' too small.".format(e);t instanceof Float32Array||(t=new Float32Array(t));var n=this.context.gl;n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,t,this.type),r.numItems=t.length/r.itemSize,n.bindBuffer(n.ARRAY_BUFFER,null)},updateFaces:function(e){var t=this.context.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.facesBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.type),this.facesBuffer.itemSize=1,this.facesBuffer.numItems=e.length,t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null);for(var r=this.maxFaceIndex=0;r<e.length;r++)this.maxFaceIndex=e[r]>this.maxFaceIndex?e[r]:this.maxFaceIndex},render:function(e){if(e.linked){var t=this.context.gl,r=[];for(var n in this.buffers){t.bindBuffer(t.ARRAY_BUFFER,this.buffers[n]);var i=e.getAttribLocation(n);-1!=i&&(t.enableVertexAttribArray(i),r.push(i),t.vertexAttribPointer(i,this.buffers[n].itemSize,t.FLOAT,!1,0,0))}this.drawElements();for(var o=0,a=r.length;o<a;o++)t.disableVertexAttribArray(r[o])}},generateBarycentric:function(){for(var e=new Float32Array(3*this.buffers.position.numItems),t=0;t<e.length;t+=9)e[t+0]=1,e[t+1]=0,e[t+2]=0,e[t+3]=0,e[t+4]=1,e[t+5]=0,e[t+6]=0,e[t+7]=0,e[t+8]=1;this.add("barycentric",e,3)},generateTexCoords:function(){for(var e=new Float32Array(2*this.buffers.position.numItems),t=0;t<e.length;t++)e[t]=0;this.add("texcoord2d0",e,2)},drawElements:function(){},createFacesBuffer:function(e){var t=this.context.gl;this.facesBuffer=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.facesBuffer),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(e),this.type),this.facesBuffer.itemSize=1,this.facesBuffer.numItems=e.length,t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)}}),LinesRenderBuffer=RenderBuffer.extend({init:function(e){this._super(e,[],e.gl.DYNAMIC_DRAW)},add:function(e,t,r){if(t.length/r<=this.maxFaceIndex&&0<this.facesBuffer.numItems)throw"RenderBuffer: Buffer '{0}' too small ({1} vertices, {2} max index).".format(e,t.length/r,this.maxFaceIndex);var n=this.context.gl;t instanceof Float32Array||(t=new Float32Array(t)),this.buffers[e]=n.createBuffer(),n.bindBuffer(n.ARRAY_BUFFER,this.buffers[e]),n.bufferData(n.ARRAY_BUFFER,t,this.type),this.buffers[e].itemSize=r,this.buffers[e].numItems=t.length/this.buffers[e].itemSize,n.bindBuffer(n.ARRAY_BUFFER,null)},update:function(e,t){if(!(e in this.buffers))throw"RenderBuffer: Unknown buffer: '{0}'".format(e);var r=this.buffers[e];if(t.length/r.itemSize<=this.maxFaceIndex&&0<this.facesBuffer.numItems)throw"RenderBuffer: Buffer '{0}' too small.".format(e);t instanceof Float32Array||(t=new Float32Array(t));var n=this.context.gl;n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,t,this.type),r.numItems=t.length/r.itemSize,n.bindBuffer(n.ARRAY_BUFFER,null)},drawElements:function(){var e=this.context.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.facesBuffer),e.drawElements(e.TRIANGLES,this.facesBuffer.numItems,e.UNSIGNED_SHORT,0)}}),LinesRenderBufferInstanced=LinesRenderBuffer.extend({init:function(e){if(this._super(e),e.isWebGL2())this._drawElementsInstanced=e.gl.drawElementsInstanced.bind(e.gl),this._vertexAttribDivisor=e.gl.vertexAttribDivisor.bind(e.gl);else{var t=e.gl.getExtension("ANGLE_instanced_arrays");if(!t)throw"Instancing unsupported";this._drawElementsInstanced=t.drawElementsInstancedANGLE.bind(t),this._vertexAttribDivisor=t.vertexAttribDivisorANGLE.bind(t)}this.divisors={}},add:function(e,t,r,n){if(t.length/r<=this.maxFaceIndex&&0<this.facesBuffer.numItems&&0===n)throw"RenderBuffer: Buffer '{0}' too small ({1} vertices, {2} max index).".format(e,t.length/r,this.maxFaceIndex);var i=this.context.gl;t instanceof Float32Array||(t=new Float32Array(t)),this.buffers[e]=i.createBuffer(),i.bindBuffer(i.ARRAY_BUFFER,this.buffers[e]),i.bufferData(i.ARRAY_BUFFER,t,this.type),this.buffers[e].itemSize=r,this.buffers[e].numItems=t.length/this.buffers[e].itemSize,i.bindBuffer(i.ARRAY_BUFFER,null),this.divisors[e]=n},update:function(e,t){if(!(e in this.buffers))throw"RenderBuffer: Unknown buffer: '{0}'".format(e);var r=this.buffers[e];if(t.length/r.itemSize<=this.maxFaceIndex&&0<this.facesBuffer.numItems&&0===this.divisors[e])throw"RenderBuffer: Buffer '{0}' too small.".format(e);t instanceof Float32Array||(t=new Float32Array(t));var n=this.context.gl;n.bindBuffer(n.ARRAY_BUFFER,r),n.bufferData(n.ARRAY_BUFFER,t,this.type),r.numItems=t.length/r.itemSize,n.bindBuffer(n.ARRAY_BUFFER,null)},render:function(e,t){if(e.linked){var r=this.context.gl,n=[];for(var i in this.buffers){r.bindBuffer(r.ARRAY_BUFFER,this.buffers[i]);var o=e.getAttribLocation(i);-1!=o&&(r.enableVertexAttribArray(o),n.push(o),r.vertexAttribPointer(o,this.buffers[i].itemSize,r.FLOAT,!1,0,0),this._vertexAttribDivisor(o,this.divisors[i]))}this.drawElements(t);for(var a=0,s=n.length;a<s;a++)r.disableVertexAttribArray(n[a])}},drawElements:function(e){var t=this.context.gl;t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.facesBuffer),this._drawElementsInstanced(t.TRIANGLES,this.facesBuffer.numItems,t.UNSIGNED_SHORT,0,e)}}),TrianglesRenderBuffer=RenderBuffer.extend({init:function(e,t,r){this._super(e,t,r)},drawElements:function(){var e=this.context.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,this.facesBuffer),e.drawElements(e.TRIANGLES,this.facesBuffer.numItems,e.UNSIGNED_SHORT,0)}}),RenderBufferVAO=RenderBuffer.extend({init:function(e,t,r){if(e.isWebGL2())this.createVAO=e.gl.createVertexArray.bind(e.gl),this.bindVAO=e.gl.bindVertexArray.bind(e.gl);else{var n=e.gl.getExtension("OES_vertex_array_object");if(!n)throw"RenderBufferVAO: Vertex array objects not supported on this device.";this.createVAO=n.createVertexArrayOES.bind(n),this.bindVAO=n.bindVertexArrayOES.bind(n)}if(this.vao=this.createVAO(),!this.vao)throw"RenderBufferVAO: Unable to create vertex array object.";this.damaged=!0,this._super(e,t,r)},add:function(e,t,r){if(t.length/r<=this.maxFaceIndex)throw"RenderBuffer: Buffer '{0}' too small.".format(e);this.bindVAO(this.vao),this._super(e,t,r),this.bindVAO(null),this.damaged=!0},createFacesBuffer:function(e){var t=this.context.gl;this.bindVAO(this.vao),this._super(e),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.facesBuffer),this.bindVAO(null),this.damaged=!0},bindLocations:function(e){var t,r=this.context.gl;for(var n in this.bindVAO(this.vao),this.buffers)t=-1,n in ExplicitAttributeLocations?t=ExplicitAttributeLocations[n]:e&&(t=e.getAttribLocation(n)),-1!=t&&(r.bindBuffer(r.ARRAY_BUFFER,this.buffers[n]),r.enableVertexAttribArray(t),r.vertexAttribPointer(t,this.buffers[n].itemSize,r.FLOAT,!1,0,0));r.bindBuffer(r.ARRAY_BUFFER,null),this.bindVAO(null),this.damaged=!1},render:function(e){e.linked&&(this.damaged&&this.bindLocations(),this.bindVAO(this.vao),this.drawElements(),this.bindVAO(null))}}),TrianglesRenderBufferVAO=RenderBufferVAO.extend({init:function(e,t,r){this._super(e,t,r)},drawElements:function(){var e=this.context.gl;e.drawElements(e.TRIANGLES,this.facesBuffer.numItems,e.UNSIGNED_SHORT,0)}}),QuadsRenderBuffer=TrianglesRenderBuffer.extend({init:function(e,t,r){for(var n=[],i=0;i<t.length-3;i++)n.push(t[i]),n.push(t[i+1]),n.push(t[i+2]),n.push(t[i]),n.push(t[i+2]),n.push(t[i+3]);this._super(e,n,r)}}),BaseTexture=Serializable.extend({init:function(e){this._super(),this.size=vec2.create(),this.loaded=!1},type:function(){return"BaseTexture"},excluded:function(){return this._super().concat(["loaded","size"])},bind:function(e){},unbind:function(e){},resizeToPowerOfTwo:function(e){function t(e){return 0==(e&e-1)}function r(e){return Math.max(Math.min(Math.pow(2,Math.floor(Math.log(e)/Math.log(2))),2048),1)}if(!t(e.width)||!t(e.height)){var n=document.createElement("canvas");n.width=r(e.width),n.height=r(e.height),n.getContext("2d").drawImage(e,0,0,e.width,e.height,0,0,n.width,n.height),e=n}return e},anisotropy:function(e){if(e.engine&&(e.engine.options.anisotropicFiltering?this.anisotropyFilter=e.engine.options.anisotropicFiltering:this.anisotropic=!1),this.anisotropic)if(this.extTextureFilterAnisotropic=e.gl.getExtension("EXT_texture_filter_anisotropic"),this.extTextureFilterAnisotropic){var t=e.gl.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT);this.anisotropyFilter=Math.min(this.anisotropyFilter,t)}else this.anisotropic=!1}}),Texture=BaseTexture.extend({init:function(e){this._super(e),this.glTexture=null,this.name=!1,this.mipmapped=!0,this.clampToEdge=!1,this.anisotropic=!0,this.anisotropyFilter=4,this.image=null,e&&this.create(e)},type:function(){return"Texture"},excluded:function(){return this._super().concat(["glTexture"])},bind:function(e){this.loaded?e.gl.bindTexture(e.gl.TEXTURE_2D,this.glTexture):e.gl.bindTexture(e.gl.TEXTURE_2D,null)},unbind:function(e){e.gl.bindTexture(e.gl.TEXTURE_2D,null)},create:function(e){this.anisotropy(e),this.glTexture=e.gl.createTexture()},clearImage:function(e,t,r){null===this.glTexture&&this.create(e),r=r||1;var n=e.gl;n.bindTexture(e.gl.TEXTURE_2D,this.glTexture);for(var i=new Uint8Array(r*r*4),o=0;o<r*r*4;o+=4)i[o+0]=t[0],i[o+1]=t[1],i[o+2]=t[2],i[o+3]=t[3];n.texImage2D(n.TEXTURE_2D,0,n.RGBA,r,r,0,n.RGBA,n.UNSIGNED_BYTE,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.NEAREST),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.NEAREST),n.bindTexture(e.gl.TEXTURE_2D,null),vec2.set(this.size,r,r),this.loaded=!0},pasteImage:function(e,t,r){if(this.loaded){this.bind(e);var n=e.gl;n.texSubImage2D(n.TEXTURE_2D,0,t[0]*this.size[0],t[1]*this.size[1],n.RGBA,n.UNSIGNED_BYTE,r),this.mipmapped&&n.generateMipmap(n.TEXTURE_2D),this.unbind(e),this.loaded=!0}},setImage:function(e,t,r){if(this.glTexture||this.create(e),!this.glTexture)throw"Unable to update texture. glTexture not available.";var n=t;r||(n=this.resizeToPowerOfTwo(t)),vec2.set(this.size,n.width,n.height);var i=e.gl;i.bindTexture(i.TEXTURE_2D,this.glTexture),i.pixelStorei(i.UNPACK_FLIP_Y_WEBGL,!0),i.texImage2D(i.TEXTURE_2D,0,i.RGBA,i.RGBA,i.UNSIGNED_BYTE,n),this.clampToEdge&&(i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE)),this.mipmapped?(i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.LINEAR_MIPMAP_NEAREST),i.generateMipmap(i.TEXTURE_2D),this.anisotropic&&i.texParameteri(i.TEXTURE_2D,this.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropyFilter)):(i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MAG_FILTER,i.NEAREST),i.texParameteri(i.TEXTURE_2D,i.TEXTURE_MIN_FILTER,i.NEAREST)),i.bindTexture(i.TEXTURE_2D,null),this.image=n,this.loaded=!0,0==(this.size[0]&this.size[0]-1)&&0==(this.size[1]&this.size[1]-1)||console.warn("Created a not power of 2 texture: {0} ({1}x{2})".format(this.name,this.size[0],this.size[1]))},getImage:function(e){if(!this.glTexture)throw"Unable to get image. glTexture not available.";var t=e.gl,r=new TargetTexture(this,e,!1);r.bind(e);var n=new Uint8Array(this.size[0]*this.size[1]*4);return e.gl.readPixels(0,0,this.size[0],this.size[1],t.RGBA,t.UNSIGNED_BYTE,n),r.unbind(e),n},onContextRestored:function(e){this.glTexture=null,this.loaded=!1,this.image&&this.setImage(e,this.image)}}),CubeTexture=BaseTexture.extend({init:function(e){this._super(e),this.glTexture=null,this.name=!1,this.mipmapped=!1,this.clampToEdge=!0,this.anisotropic=!0,this.anisotropyFilter=4,this.images={},e&&this.create(e)},type:function(){return"CubeTexture"},excluded:function(){return this._super().concat(["glTexture"])},bind:function(e){this.loaded?e.gl.bindTexture(e.gl.TEXTURE_CUBE_MAP,this.glTexture):e.gl.bindTexture(e.gl.TEXTURE_CUBE_MAP,null)},unbind:function(e){e.gl.bindTexture(e.gl.TEXTURE_CUBE_MAP,null)},getGLCubeFace:function(e,t){var r=e.gl;switch(t){case CubeTexture.FRONT:return r.TEXTURE_CUBE_MAP_NEGATIVE_X;case CubeTexture.BACK:return r.TEXTURE_CUBE_MAP_POSITIVE_X;case CubeTexture.LEFT:return r.TEXTURE_CUBE_MAP_NEGATIVE_Z;case CubeTexture.RIGHT:return r.TEXTURE_CUBE_MAP_POSITIVE_Z;case CubeTexture.TOP:return r.TEXTURE_CUBE_MAP_NEGATIVE_Y;case CubeTexture.BOTTOM:return r.TEXTURE_CUBE_MAP_POSITIVE_Y}return null},create:function(e){this.anisotropy(e),this.glTexture=e.gl.createTexture();var t=e.gl;t.bindTexture(t.TEXTURE_CUBE_MAP,this.glTexture),this.clampToEdge&&(t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)),this.mipmapped?(t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_NEAREST),t.generateMipmap(t.TEXTURE_CUBE_MAP),this.anisotropic&&t.texParameteri(t.TEXTURE_CUBE_MAP,this.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,this.anisotropyFilter)):(t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.NEAREST)),t.bindTexture(t.TEXTURE_CUBE_MAP,null)},setFace:function(e,t,r,n){if(!1===this.glTexture&&this.create(e),!this.glTexture)throw"Unable to update cube texture. glTexture not available.";var i=r;if(t in this.images&&delete this.images[t].image,this.images[t]={image:i,noResize:!!n},!(t=this.getGLCubeFace(e,t)))throw"Not a valid CubeTexture face.";n||(i=this.resizeToPowerOfTwo(r)),vec2.set(this.size,i.width,i.height);var o=e.gl;o.bindTexture(o.TEXTURE_CUBE_MAP,this.glTexture),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,!0),o.texImage2D(t,0,o.RGBA,o.RGBA,o.UNSIGNED_BYTE,i),o.bindTexture(o.TEXTURE_CUBE_MAP,null),this.loaded=!0,0==(this.size[0]&this.size[0]-1)&&0==(this.size[1]&this.size[1]-1)||console.warn("Created a not power of 2 texture: {0} ({1}x{2})".format(this.name,this.size[0],this.size[1]))},onContextRestored:function(e){for(var t in this.glTexture=null,this.create(e),this.loaded=!1,this.images){var r=this.images[t];this.setFace(e,parseInt(t),r.image,r.noResize)}}});CubeTexture.FRONT=0,CubeTexture.BACK=1,CubeTexture.LEFT=2,CubeTexture.RIGHT=3,CubeTexture.BOTTOM=4,CubeTexture.TOP=5;var Material=Serializable.extend({init:function(e,t,r,n,i){this._super(),this.name=n,this.name||(this.name="unnamed_"+Math.round(Math.random()*Math.pow(36,12)).toString(36)),this.shader=e,this.uniforms=t,this.samplers=r,this.descriptor=i,this.boundSamplers=new SamplerAccumulator},type:function(){return"Material"},bind:function(e){if(this.shader){var t;this.shader.use(this.uniforms),e&&this.shader.bindUniforms(e);for(var r=1,n=arguments.length;r<n;++r)if((t=arguments[r])instanceof Sampler)this.boundSamplers.add(t);else if(t instanceof Array)for(var i=0,o=t.length;i<o;++i)this.boundSamplers.add(t[i]);r=0;for(var a=this.samplers.length;r<a;++r)this.boundSamplers.add(this.samplers[r]);0==this.boundSamplers.length&&this.shader.context.engine&&this.boundSamplers.add(this.shader.context.engine.DiffuseFallbackSampler),this.shader.bindSamplers(this.boundSamplers.samplers)}},unbind:function(){this.shader&&(this.shader.unbindSamplers(this.boundSamplers.samplers),this.boundSamplers.clear())},instantiate:function(){var e={};for(var t in this.uniforms)e[t]=this.uniforms[t].clone();var r=[];for(var t in this.samplers)"object"==typeof this.samplers[t]&&r.push(this.samplers[t].clone());var n=new Material(this.shader,e,r,this.descriptor);return n.name=this.name+" (instance)",n}}),Space=FrakClass.extend({init:function(){},frustumCast:function(e,t){},rayCast:function(e){},lineCast:function(e){}}),DynamicSpace=Space.extend({init:function(){this.renderers=[],this.colliders=[],this.filteredRenderers=[]},addRenderer:function(e){this.renderers.push(e),this.filteredRenderers.push(null)},removeRenderer:function(e){for(var t=0;t<this.renderers.length;t++)if(this.renderers[t]===e)return this.renderers.splice(t,1),this.filteredRenderers.pop(),!0;return!1},addCollider:function(e){this.colliders.push(e)},removeCollider:function(e){for(var t=0;t<this.colliders.length;t++)if(this.colliders[t]===e)return this.colliders.splice(t,1),!0;return!1},frustumCast:function(e,t){for(var r,n=0,i=0;i<this.renderers.length;++i)(r=this.renderers[i]).visible&&r.layer&t&&(this.filteredRenderers[n++]=r);for(i=n;i<this.filteredRenderers.length;++i)this.filteredRenderers[i]=null;return this.filteredRenderers},rayCast:function(e,t,r){var n=new RayTestResult(e);if(!t)return n;for(var i=0;i<this.colliders.length;i++)this.colliders[i].enabled&&this.colliders[i].node.layer&t&&this.colliders[i].rayTest(e,n,r);return n}}),Renderer=FrakClass.extend({init:function(e){this.matrix=e,this.layer=1,this.visible=!0,this.castShadows=!0,this.receiveShadows=!0,this.lightContribution=1,this.reflectivity=0,this.transparent=!1,this.unlit=!1,this.localBoundingBox=new BoundingBox,this.localBoundingSphere=new BoundingSphere,this.globalBoundingBox=new BoundingBox,this.globalBoundingSphere=new BoundingSphere},render:function(e,t){this.onRender(e,t)},renderGeometry:function(e,t){this.onRenderGeometry(e,t)},getDefaultUniforms:function(e,t){return"object"==typeof t&&null!==t||(t={}),t.hasOwnProperty("model")?mat4.copy(t.model.value,this.matrix):t.model=new UniformMat4(this.matrix),t.hasOwnProperty("modelview")?mat4.copy(t.modelview.value,e.modelview.top()):t.modelview=new UniformMat4(e.modelview.top()),t.hasOwnProperty("projection")?mat4.copy(t.projection.value,e.projection.top()):t.projection=new UniformMat4(e.projection.top()),t.hasOwnProperty("receiveShadows")?t.receiveShadows.value=this.receiveShadows?1:0:t.receiveShadows=new UniformInt(this.receiveShadows?1:0),t.hasOwnProperty("lightContribution")?t.lightContribution.value=this.lightContribution:t.lightContribution=new UniformFloat(this.lightContribution),t.hasOwnProperty("reflectivity")?t.reflectivity.value=this.reflectivity:t.reflectivity=new UniformFloat(this.reflectivity),e.camera&&(t.hasOwnProperty("view")?mat4.copy(t.view.value,e.camera.viewMatrix):t.view=new UniformMat4(e.camera.viewMatrix),t.hasOwnProperty("viewInverse")?mat4.copy(t.viewInverse.value,e.camera.viewInverseMatrix):t.viewInverse=new UniformMat4(e.camera.viewInverseMatrix),e.camera.near&&(t.hasOwnProperty("zNear")?t.zNear.value=e.camera.near:t.zNear=new UniformFloat(e.camera.near)),e.camera.far&&(t.hasOwnProperty("zFar")?t.zFar.value=e.camera.far:t.zFar=new UniformFloat(e.camera.far))),e.light&&e.light.uniforms&&(t.lightDirection=e.light.uniforms.lightDirection,t.lightColor=e.light.uniforms.lightColor,t.lightIntensity=e.light.uniforms.lightIntensity,t.useShadows=e.light.uniforms.useShadows),e.shadow&&(t.lightView=e.shadow.lightView,t.lightProjection=e.shadow.lightProjection),t},getGlobalSamplers:function(e){var t=[];return e.shadow&&t.push(e.shadow.shadow0),t},setMatrix:function(e){this.matrix=e,this.updateGlobalBoundingVolumes()},updateGlobalBoundingVolumes:function(){this.localBoundingBox.transform(this.matrix,this.globalBoundingBox),this.localBoundingSphere.transform(this.matrix,this.globalBoundingSphere)},onRender:function(e,t){},onRenderGeometry:function(e,t){}}),PrimitiveRenderer=Renderer.extend({init:function(e,t){this._super(e),this.material=t}}),MeshRenderer=Renderer.extend({init:function(e,t,r){for(var n in this._super(t),this.mesh=r,this.buffers=[],this._cache=null,this.mesh.submeshes){var i=this.mesh.submeshes[n],o=new TrianglesRenderBuffer(e,i.faces);for(var a in o.add("position",i.positions,3),i.texCoords1D)o.add("texcoord1d"+a,i.texCoords1D[a],1);for(var s in i.texCoords2D)o.add("texcoord2d"+s,i.texCoords2D[s],2);for(var l in i.texCoords3D)o.add("texcoord3d"+l,i.texCoords3D[l],3);i.normals&&o.add("normal",i.normals,3),i.tangents&&o.add("tangent",i.tangents,3),i.bitangents&&o.add("bitangent",i.bitangents,3),this.buffers.push(o)}},onRender:function(e){for(var t in this._cache=this.getDefaultUniforms(e,this._cache),this.mesh.submeshes){var r=this.mesh.submeshes[t],n=this.mesh.getMaterial(r.materialIndex);n&&(n.bind(this._cache),this.buffers[t].render(n.shader),n.unbind())}},onRenderGeometry:function(e,t){for(var r in this._cache=this.getDefaultUniforms(e,this._cache),t.bindUniforms(this._cache),this.buffers)this.buffers[r].render(t)}}),LineRenderer=Renderer.extend({init:function(t,e,r){this._super(e),this.material=r;try{this.buffer=new LinesRenderBufferInstanced(t),this.instanced=!0}catch(e){this.buffer=new LinesRenderBuffer(t),this.instanced=!1}this.unlit=!0,this.count=0},onRender:function(e){this.buffer.render(this.material.shader,this.count)},onRenderGeometry:function(e,t){this._cache=this.getDefaultUniforms(e,this._cache),t.bindUniforms(this._cache),this.buffer.render(t,this.count)}}),SubmeshRenderer=Renderer.extend({init:function(e,t,r,n){this._super(t),this.submesh=r,this.material=n,this.buffer=[],this.failed=!1,this.transparent=!1,this.localBoundingBox=this.submesh.boundingBox,this.localBoundingSphere=this.submesh.boundingSphere,this.updateGlobalBoundingVolumes(),this.build(e),this._cache=null},allocBuffer:function(t){if(!this.submesh)throw Error("SubmeshRenderer.allocBuffer: No submesh set");if(t.engine&&(!0===t.engine.options.useVAO||t.isWebGL2()))try{this.buffer=new TrianglesRenderBufferVAO(t,this.submesh.faces)}catch(e){this.buffer=new TrianglesRenderBuffer(t,this.submesh.faces)}else this.buffer=new TrianglesRenderBuffer(t,this.submesh.faces)},build:function(e){this.buffer&&delete this.buffer,this.allocBuffer(e);var t=this.submesh;this.buffer.add("position",t.positions,3);var r=t.positions.length/3;if(t.texCoords1D)for(var n=0;n<t.texCoords1D.length;++n)t.texCoords1D[n].length==r?this.buffer.add("texcoord1d"+n,t.texCoords1D[n],1):console.warn("Wrong number of 1D texture coordinates ({0}). Must be the same as positions ({1}).".format(t.texCoords1D[n].length,r));if(t.texCoords2D)for(n=0;n<t.texCoords2D.length;++n)t.texCoords2D[n].length/2==r?this.buffer.add("texcoord2d"+n,t.texCoords2D[n],2):console.warn("Wrong number of 2D texture coordinates ({0}). Must be the same as positions ({1}).".format(t.texCoords2D[n].length/2,r));if(t.texCoords3D)for(n=0;n<t.texCoords3D.length;++n)t.texCoords3D[n].length/3==r?this.buffer.add("texcoord3d"+n,t.texCoords3D[n],3):console.warn("Wrong number of 3D texture coordinates ({0}). Must be the same as positions ({1}).".format(t.texCoords3D[n].length/3,r));if(t.texCoords4D)for(n=0;n<t.texCoords4D.length;++n)t.texCoords4D[n].length/4==r?this.buffer.add("texcoord4d"+n,t.texCoords4D[n],4):console.warn("Wrong number of 4D texture coordinates ({0}). Must be the same as positions ({1}).".format(t.texCoords4D[n].length/4,r));t.normals&&(t.positions.length!=t.normals.length?console.warn("Wrong number of normals. Must be the same as positions."):this.buffer.add("normal",t.normals,3)),t.tangents&&(t.positions.length!=t.tangents.length?console.warn("Wrong number of tangents. Must be the same as positions."):this.buffer.add("tangent",t.tangents,3)),t.bitangents&&(t.positions.length!=t.bitangents.length?console.warn("Wrong number of bitangents. Must be the same as positions."):this.buffer.add("bitangent",t.bitangents,3)),t.barycentric&&(t.positions.length!=t.barycentric.length?console.warn("Wrong number of barycentric coordinates. Must be the same as positions."):this.buffer.add("barycentric",t.barycentric,3));var i=this.material;i.uniforms.diffuse||(i.uniforms.diffuse=new UniformColor(new Color(1,1,1,1))),i.uniforms.ambient||(i.uniforms.ambient=new UniformColor(new Color(.2,.2,.2,1))),i.uniforms.specularStrength||(i.uniforms.specularStrength=new UniformFloat(0)),i.uniforms.specularPower||(i.uniforms.specularPower=new UniformInt(8)),this.transparent=i.shader.requirements.transparent||i.uniforms.diffuse&&i.uniforms.diffuse.value[3]<1||i.uniforms.ambient&&i.uniforms.ambient.value[3]<1,this.failed=!1},onRender:function(e){this.buffer.render(this.material.shader)},onRenderGeometry:function(e,t){this._cache=this.getDefaultUniforms(e,this._cache),t.bindUniforms(this._cache),this.buffer.render(t)},onContextRestored:function(e){this.build(e)}}),CubeRenderer=PrimitiveRenderer.extend({init:function(e,t,r,n){this._super(t,n),this.size=r;var i=this.size/2,o=[-i,-i,i,i,-i,i,i,-i,-i,-i,-i,-i,-i,i,i,i,i,i,i,i,-i,-i,i,-i];this.renderBuffer=new QuadsRenderBuffer(e,[0,1,2,3,4,5,6,7,0,1,5,4,1,2,6,5,2,3,7,6,3,0,0,7]),this.renderBuffer.add("position",o,3)},onRender:function(e){this.material.bind({modelview:new UniformMat4(e.modelview.top()),projection:new UniformMat4(e.projection.top())}),this.renderBuffer.render(this.material.shader),this.material.unbind()}});function DownloadBinary(e,t){var r=new XMLHttpRequest;r.open("GET",e,!0),r.responseType="arraybuffer",r.onload=function(){200==this.status?t(this.response):t(!1)},r.send()}var DataParserTypes={NODE_ROOT:4096,NODE_STRING:4097,NODE_MATRIX3X3:4098,NODE_MATRIX4X4:4099,NODE_MATERIALS:8192,NODE_MATERIAL:8193,NODE_COLOR_AMBIENT:8194,NODE_COLOR_DIFFUSE:8195,NODE_COLOR_SPECULAR:8196,NODE_COLOR_EMISSIVE:8197,NODE_TWOSIDED:8198,NODE_SHININESS:8199,NODE_SHININESS_STRENGTH:8200,NODE_TEXTURES_AMBIENT:8272,NODE_TEXTURES_DIFFUSE:8273,NODE_TEXTURES_SPECULAR:8274,NODE_TEXTURES_EMISSIVE:8275,NODE_TEXTURES_NORMALS:8276,NODE_TEXTURES_HEIGHT:8277,NODE_TEXTURES_SHININESS:8278,NODE_TEXTURES_OPACITY:8279,NODE_TEXTURES_DISPLACEMENT:8280,NODE_TEXTURES_LIGHTMAP:8281,NODE_TEXTURES_REFLECTION:8282,NODE_TEXTURE:8448,NODE_TEXTURE_SCALE:8449,NODE_SHADER_NAME:8704,NODE_GEOMETRY:12288,NODE_MESH:12544,NODE_MATERIAL_REFERENCE:12545,NODE_VERTICES:12546,NODE_NORMALS:12547,NODE_TANGENTS:12548,NODE_BITANGENTS:12549,NODE_TEXTURE_COORDINATES:12550,NODE_FACES:12551,NODE_SCENE:16384,NODE_GROUP:16385,NODE_MESH_REFERENCE:16386,NODE_TRANSFORM_POSITION:16387,NODE_TRANSFORM_ROTATION:16388,NODE_TRANSFORM_SCALE:16389,NODE_GROUP_ID:16390,NODE_COLLISION:20480,NODE_COLLISION_NODE:20481,NODE_COLLISION_AABB_CENTER:20482,NODE_COLLISION_AABB_EXTENTS:20483,NODE_COLLISION_FACE_LIST:20484,NODE_FACE_LIST_NODE_ID:20496,NODE_FACE_LIST_MESH_REFERENCE:20497,NODE_FACE_LIST_INDICES:20498,getName:function(e){for(var t in DataParserTypes)if(DataParserTypes[t]===e)return t;return!1}},DataParserNode=function(e,t,r){this.id=e,this.length=t,this.position=r,this.HEADER_LENGTH=8,this.end=function(){return this.position+this.HEADER_LENGTH+this.length}},DataParserResult=FrakClass.extend({init:function(){this.data={meshes:[],materials:[],hierarchy:!1,collision:!1,hierarchyNodesByID:{}}},getData:function(){return this.data},linkReferences:function(){for(var e in this.data.meshes)-1!=this.data.meshes[e].material&&this.data.meshes[e].material in this.data.materials&&(this.data.meshes[e].material=this.data.materials[this.data.meshes[e].material]);if(!1!==this.data.hierarchy){var n=this,i=function(e){for(var t in e.meshes)0<=e.meshes[t]&&e.meshes[t]in n.data.meshes&&(e.meshes[t]=n.data.meshes[e.meshes[t]]);for(var r in e.children)i(e.children[r])};i(this.data.hierarchy)}},createGroup:function(){return{name:"",id:!1,parent:!1,children:[],meshes:[],position:{x:0,y:0,z:0},rotation:{x:0,y:0,z:0,w:0},scale:{x:0,y:0,z:0},transform:!1}},mapGroupID:function(e){this.data.hierarchyNodesByID[e.id]=e},setRoot:function(e){this.data.hierarchy=e},createMaterialTexture:function(){return{path:!1,scale:{u:1,v:1,w:1}}},createMaterial:function(){return{name:"",color:{ambient:!1,diffuse:!1,specular:!1,emissive:!1},twosided:!1,shininess:0,shininess_strength:0,shader:!1,textures:{ambient:[],diffuse:[],specular:[],emissive:[],normal:[],height:[],shininess:[],opacity:[],displacement:[],lightmap:[],reflection:[]}}},addMaterial:function(e){this.data.materials.push(e)},getMaterial:function(e){return 0<=e&&e<this.data.materials.length&&this.data.materials[e]},createMesh:function(e){for(var t={index:-1,material:-1,indices:[],vertices:[]},r=0;r<e;r++)t.vertices.push(this.createVertex());return t},createVertex:function(){return{position:{x:0,y:0,z:0},normal:{x:0,y:0,z:0},texCoord:[],tangent:{x:0,y:0,z:0},bitangent:{x:0,y:0,z:0}}},addMesh:function(e){this.data.meshes.push(e),e.index=this.data.meshes.length-1},createCollisionTreeNode:function(){return{parent:!1,children:[],center:{x:0,y:0,z:0},extents:{x:0,y:0,z:0},faces:!1}},addFaceList:function(e,t,r,n){return!(t<0||r<0||0==n.length)&&(!1===e.faces&&(e.faces={}),t in e.faces||(e.faces[t]={}),r in e.faces[t]||(e.faces[t][r]=[]),e.faces[t][r]=e.faces[t][r].concat(n),!0)},setCollisionTreeRoot:function(e){this.data.collision=e}}),DataParser=FrakClass.extend({init:function(e,t,r,n,i){this.VERSION=1,this.view=new jDataView(e),this.onComplete=t,this.onProgress=n,this.onError=r,this.userdata=i,this.result=new DataParserResult,this.errors=[],this.stack=[],this.linkReferences=!0,this.flipX=!1,this.warnOnUnknownChunks=!0,this.isFunction=function(e){return"function"==typeof e}},parse:function(){for(this.push(!1,this.parseHeader);!this.completed();)if(!this.step())return this.isFunction(this.onError)&&this.onError(this.errors,this.userdata),!1;return this.linkReferences&&this.result.linkReferences(),this.isFunction(this.onComplete)&&this.onComplete(this.result.getData(),this.userdata),!0},error:function(e){return this.errors.push(e),!1},errorExpect:function(e,t){return this.error("Expected at least "+e+" byte"+(1<e?"s":"")+' for "'+t+'"')},completed:function(){return this.view.tell()==this.view.byteLength},step:function(){var e=this.getCurrentCall();if(e){var t=e(this.getCurrentNode());return this.isFunction(this.onProgress)&&this.onProgress(this.view.tell()/this.view.byteLength*100,this.userdata),t}return!1},push:function(e,t){this.stack.push({node:e,call:FrakCallback(this,t)})},pop:function(){this.stack.pop()},getCurrentNode:function(){return 0<this.stack.length&&this.stack[this.stack.length-1].node},getCurrentCall:function(){return 0<this.stack.length&&this.stack[this.stack.length-1].call},hasDataFor:function(e){return!(this.view.byteLength<this.view.tell()+e)},hasDataForNode:function(e){return!(this.view.byteLength<e.position+e.length+8)},getUint32:function(){return this.view.getUint32(this.view.tell(),!0)},getFloat32:function(){return this.view.getFloat32(this.view.tell(),!0)},getMatrix4x4:function(){for(var e=[],t=0;t<4;t++)e.push([this.getFloat32(),this.getFloat32(),this.getFloat32(),this.getFloat32()]);return e},getColor:function(){return{r:this.view.getFloat32(this.view.tell(),!0),g:this.view.getFloat32(this.view.tell(),!0),b:this.view.getFloat32(this.view.tell(),!0),a:this.view.getFloat32(this.view.tell(),!0)}},parseHeader:function(){if(!this.view)return this.error("No data to parse");if(!this.parseSignature())return!1;var e=this.parseNodeHeader();return!1!==e&&(e.id!==DataParserTypes.NODE_ROOT?this.error("Root node type is incorrect"):(this.push(e,this.parseRoot),!0))},parseSignature:function(){return this.hasDataFor(12)?"3DTECHDATA"!=this.view.getString(10)?this.error("The data is not in 3DTech DATA format"):this.view.getInt16(this.view.tell(),!0)!=this.VERSION?this.error("Incompatible version"):!!this.hasDataFor(8)||this.error("Could not find root node"):this.error("Not enough data for 3DTech DATA format header")},parseNodeHeader:function(){if(!this.hasDataFor(8))return this.error("Not enough data for parsing node header");var e=this.view.tell(),t=this.getUint32(),r=this.getUint32();return new DataParserNode(t,r,e)},skipNode:function(e){this.warnOnUnknownChunks&&console.warn("DataParser: skipping node ",DataParserTypes.getName(e.id)),this.view.seek(this.view.tell()+e.length)},parseMaterial:function(e){for(var t=this.result.createMaterial();this.view.tell()<e.end();){var r=this.parseNodeHeader();switch(r.id){case DataParserTypes.NODE_STRING:t.name=this.view.getString(r.length);break;case DataParserTypes.NODE_SHADER_NAME:t.shader=this.view.getString(r.length);break;case DataParserTypes.NODE_COLOR_AMBIENT:if(16!=r.length)return this.error("Ambient color corrupted");t.color.ambient=this.getColor();break;case DataParserTypes.NODE_COLOR_DIFFUSE:if(16!=r.length)return this.error("Diffuse color corrupted");t.color.diffuse=this.getColor();break;case DataParserTypes.NODE_COLOR_SPECULAR:if(16!=r.length)return this.error("Specular color corrupted");t.color.specular=this.getColor();break;case DataParserTypes.NODE_COLOR_EMISSIVE:if(16!=r.length)return this.error("Emissive color corrupted");t.color.emissive=this.getColor();break;case DataParserTypes.NODE_TWOSIDED:if(r.length<1)return this.errorExpect(1,"material.twosided");var n=this.view.getChar();t.twosided=255==n;break;case DataParserTypes.NODE_SHININESS:if(r.length<4)return this.errorExpect(4,"material.shininess");t.shininess=this.getFloat32();break;case DataParserTypes.NODE_SHININESS_STRENGTH:if(r.length<4)return this.errorExpect(4,"material.shininess_strength");t.shininess_strength=this.getFloat32();break;case DataParserTypes.NODE_TEXTURES_AMBIENT:this.parseMaterialTextures(r,t.textures.ambient);break;case DataParserTypes.NODE_TEXTURES_DIFFUSE:this.parseMaterialTextures(r,t.textures.diffuse);break;case DataParserTypes.NODE_TEXTURES_SPECULAR:this.parseMaterialTextures(r,t.textures.specular);break;case DataParserTypes.NODE_TEXTURES_EMISSIVE:this.parseMaterialTextures(r,t.textures.emissive);break;case DataParserTypes.NODE_TEXTURES_NORMALS:this.parseMaterialTextures(r,t.textures.normal);break;case DataParserTypes.NODE_TEXTURES_HEIGHT:this.parseMaterialTextures(r,t.textures.height);break;case DataParserTypes.NODE_TEXTURES_SHININESS:this.parseMaterialTextures(r,t.textures.shininess);break;case DataParserTypes.NODE_TEXTURES_OPACITY:this.parseMaterialTextures(r,t.textures.opacity);break;case DataParserTypes.NODE_TEXTURES_DISPLACEMENT:this.parseMaterialTextures(r,t.textures.displacement);break;case DataParserTypes.NODE_TEXTURES_LIGHTMAP:this.parseMaterialTextures(r,t.textures.lightmap);break;case DataParserTypes.NODE_TEXTURES_REFLECTION:this.parseMaterialTextures(r,t.textures.reflection);break;default:this.skipNode(r)}}return this.result.addMaterial(t),!0},parseMaterialTextures:function(e,t){for(;this.view.tell()<e.end();){var r=this.parseNodeHeader();if(r.id==DataParserTypes.NODE_TEXTURE){for(var n=this.result.createMaterialTexture();this.view.tell()<r.end();){var i=this.parseNodeHeader();switch(i.id){case DataParserTypes.NODE_STRING:n.path=this.view.getString(i.length);break;case DataParserTypes.NODE_TEXTURE_SCALE:if(12!=i.length)return this.error("Texture scale is corrupted");n.scale.u=this.getFloat32(),n.scale.v=this.getFloat32(),n.scale.w=this.getFloat32();break;default:this.skipNode(i)}}!1!==n.path&&t.push(n)}else this.skipNode(r)}return!0},parseMaterials:function(e){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");for(;this.view.tell()<e.end();){var t=this.parseNodeHeader();t.id==DataParserTypes.NODE_MATERIAL?this.parseMaterial(t):this.skipNode(t)}return this.pop(),!0},parseGeometry:function(e){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");if(this.view.tell()>=e.end())return this.pop(),!0;var t=this.parseNodeHeader();if(t.id==DataParserTypes.NODE_MESH){if(!this.hasDataForNode(t))return this.error("Not enough data for node '"+DataParserTypes.getName(t.id)+"'");this.push(t,this.parseMesh)}else this.skipNode(t);return!0},parseMesh:function(e){var t=this.getUint32(),r=this.result.createMesh(t),n=0,i=[1,1,1],o=[1,1,1];for(this.flipX&&(o[0]=-1);this.view.tell()<e.end();){var a=this.parseNodeHeader();if(!this.hasDataForNode(a))return this.error("Not enough data for node '"+DataParserTypes.getName(a.id)+"'");switch(a.id){case DataParserTypes.NODE_MATERIAL_REFERENCE:if(a.length<4)return this.errorExpect(4,"mesh.material_reference");r.material=this.getUint32();break;case DataParserTypes.NODE_VERTICES:if(!this.parseVertices(a,t,r.vertices,"position",o))return!1;break;case DataParserTypes.NODE_NORMALS:if(!this.parseVertices(a,t,r.vertices,"normal",i))return!1;break;case DataParserTypes.NODE_TANGENTS:if(!this.parseVertices(a,t,r.vertices,"tangent",i))return!1;break;case DataParserTypes.NODE_BITANGENTS:if(!this.parseVertices(a,t,r.vertices,"bitangent",i))return!1;break;case DataParserTypes.NODE_TEXTURE_COORDINATES:if(a.length<4)return this.errorExpect(4,"mesh texture coordinates component count");var s=this.getUint32();if(0==s||3<s)return this.error("Unsupported number of texture coordinate components: "+s);if(a.length-4!=s*t*4)return this.error("Texture coordinate set "+n+" is corrupted");for(var l=["x","y","z"],c=0;c<t;c++){for(var h={},u=0;u<s;u++)h[l[u]]=this.getFloat32();r.vertices[c].texCoord.push(h)}n++;break;case DataParserTypes.NODE_FACES:if(!this.parseFaces(a,r.indices))return!1;break;default:this.skipNode(a)}}return this.result.addMesh(r),this.pop(),!0},parseVertices:function(e,t,r,n,i){if(e.length!=12*t)return this.error("Node "+DataParserTypes.getName(e.id)+" is corrupted");for(var o=0;o<t;o++)r[o][n].x=i[0]*this.getFloat32(),r[o][n].y=i[1]*this.getFloat32(),r[o][n].z=i[2]*this.getFloat32();return!0},parseFaces:function(e,t){if(e.length<4)return this.errorExpect(4,"faces.num_triangles");var r=this.getUint32();if(e.length-4!=12*r)return this.error("Faces list is corrupted");for(var n=0;n<r;n++)t.push(this.getUint32()),t.push(this.getUint32()),t.push(this.getUint32());return!0},parseScene:function(e){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");for(;this.view.tell()<e.end();){var t=this.parseNodeHeader();if(t.id==DataParserTypes.NODE_GROUP){if(!this.parseGroup(t,!1))return!1}else this.skipNode(t)}return this.pop(),!0},parseGroup:function(e,t){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");var r=this.result.createGroup();for(!1===t?this.result.setRoot(r):(t.children.push(r),r.parent=t);this.view.tell()<e.end();){var n=this.parseNodeHeader();if(!this.hasDataForNode(n))return this.error("Not enough data for node '"+DataParserTypes.getName(n.id)+"'");switch(n.id){case DataParserTypes.NODE_GROUP_ID:if(n.length<4)return this.error("Group ID is corrupted");r.id=this.getUint32(),this.result.mapGroupID(r);break;case DataParserTypes.NODE_STRING:r.name=this.view.getString(n.length);break;case DataParserTypes.NODE_TRANSFORM_POSITION:if(12!=n.length)return this.error("Group position is corrupted");r.position.x=this.getFloat32(),r.position.y=this.getFloat32(),r.position.z=this.getFloat32();break;case DataParserTypes.NODE_TRANSFORM_ROTATION:if(16!=n.length)return this.error("Group rotation is corrupted");r.rotation.x=this.getFloat32(),r.rotation.y=this.getFloat32(),r.rotation.z=this.getFloat32(),r.rotation.w=this.getFloat32();break;case DataParserTypes.NODE_TRANSFORM_SCALE:if(12!=n.length)return this.error("Group scale is corrupted");r.scale.x=this.getFloat32(),r.scale.y=this.getFloat32(),r.scale.z=this.getFloat32();break;case DataParserTypes.NODE_MATRIX4X4:if(64!=n.length)return this.error("Group transformation matrix is corrupted");r.transform=this.getMatrix4x4();break;case DataParserTypes.NODE_MESH_REFERENCE:if(n.length<4)return this.error("Group mesh reference is corrupted");r.meshes.push(this.getUint32());break;case DataParserTypes.NODE_GROUP:this.parseGroup(n,r);break;default:this.skipNode(n)}}return!0},parseCollision:function(e){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");for(;this.view.tell()<e.end();){var t=this.parseNodeHeader();if(t.id==DataParserTypes.NODE_COLLISION_NODE){if(!this.parseCollisionNode(t,!1))return!1}else this.skipNode(t)}return this.pop(),!0},parseCollisionNode:function(e,t){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");var r=this.result.createCollisionTreeNode();for(!1===t?this.result.setCollisionTreeRoot(r):(t.children.push(r),r.parent=t);this.view.tell()<e.end();){var n=this.parseNodeHeader();if(!this.hasDataForNode(n))return this.error("Not enough data for node '"+DataParserTypes.getName(n.id)+"'");switch(n.id){case DataParserTypes.NODE_COLLISION_AABB_CENTER:if(12!=n.length)return this.error("Collision node center is corrupted");r.center.x=this.getFloat32(),r.center.y=this.getFloat32(),r.center.z=this.getFloat32();break;case DataParserTypes.NODE_COLLISION_AABB_EXTENTS:if(12!=n.length)return this.error("Collision node extents are corrupted");r.extents.x=this.getFloat32(),r.extents.y=this.getFloat32(),r.extents.z=this.getFloat32();break;case DataParserTypes.NODE_COLLISION_NODE:this.parseCollisionNode(n,r);break;case DataParserTypes.NODE_COLLISION_FACE_LIST:this.parseCollisionFaceList(n,r);break;default:this.skipNode(n)}}return!0},parseCollisionFaceList:function(e,t){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");for(var r=-1,n=-1,i=[];this.view.tell()<e.end();){var o=this.parseNodeHeader();if(!this.hasDataForNode(o))return this.error("Not enough data for node '"+DataParserTypes.getName(o.id)+"'");switch(o.id){case DataParserTypes.NODE_FACE_LIST_NODE_ID:if(4!=o.length)return this.error("Face list node ID is corrupted");r=this.getUint32();break;case DataParserTypes.NODE_FACE_LIST_MESH_REFERENCE:if(4!=o.length)return this.error("Face list mesh ID is corrupted");n=this.getUint32();break;case DataParserTypes.NODE_FACE_LIST_INDICES:for(;this.view.tell()<o.end();)i.push(this.getUint32());break;default:this.skipNode(o)}}return this.result.addFaceList(t,r,n,i)},parseRoot:function(e){if(!this.hasDataForNode(e))return this.error("Not enough data for node '"+DataParserTypes.getName(e.id)+"'");if(this.view.tell()>=e.end())return!0;var t=this.parseNodeHeader();switch(t.id){case DataParserTypes.NODE_MATERIALS:this.push(t,this.parseMaterials);break;case DataParserTypes.NODE_GEOMETRY:this.push(t,this.parseGeometry);break;case DataParserTypes.NODE_SCENE:this.push(t,this.parseScene);break;case DataParserTypes.NODE_COLLISION:this.push(t,this.parseCollision);break;default:this.skipNode(t)}return!0}}),ThreadedDataParser=DataParser.extend({init:function(e,t,r,n,i){this._super(e,t,r,n,i),this.timer=!1,this.inverval=10},parse:function(){return this.push(!1,this.parseHeader),this.timer=setTimeout(FrakCallback(this,this.threadStep),this.inverval),!0},threadStep:function(){if(this.completed())return this.linkReferences&&this.result.linkReferences(),void(this.isFunction(this.onComplete)&&this.onComplete(this.result.getData(),this.userdata));this.step()?this.timer=setTimeout(FrakCallback(this,this.threadStep),this.inverval):this.onError&&"function"==typeof this.onError&&this.onError(this.errors,this.userdata)}}),ModelLoader=FrakClass.extend({init:function(e,t,r,n){this.descriptor=t,this.shadersManager=r,this.texturesManager=n,this.defaultTexture=!1,this.defaultSampler=!1,this.nodesByID={},this.submeshesByID={},this.submeshes=[]},createDefaultTextureSampler:function(e){this.defaultTexture||e.engine&&(this.defaultTexture=e.engine.WhiteTexture,this.defaultSampler=new Sampler("diffuse0",this.defaultTexture))},load:function(e,t){e.name=t.hierarchy.name,this.loadMaterials(t.materials),this.loadSubmeshes(t.meshes),this.loadNode(e,t.hierarchy),this.loadCollision(e,t)},loadMaterials:function(e){for(var t=0;t<e.length;t++){var r=e[t];r.instance=new Material,this.loadMaterial(r.instance,r)}},loadSubmeshes:function(e){for(var t=0;t<e.length;t++){var r=new Submesh;this.loadSubmesh(r,e[t]),this.submeshesByID[e[t].index]={submesh:r,material:e[t].material.instance}}},loadNode:function(e,t){for(var r in e.localCollisionID=t.id,this.nodesByID[e.localCollisionID]=e,this.loadTransform(e.transform,t.transform),this.loadMesh(e,t.meshes),t.children){var n=new Node(t.children[r].name);this.loadNode(n,t.children[r]),e.addNode(n)}},loadMesh:function(e,t){if(t&&0!=t.length){var r=new Mesh;for(var n in t)if(t[n].index in this.submeshesByID){var i=this.submeshesByID[t[n].index];r.addSubmesh(i.submesh,i.material)}e.addComponent(new MeshComponent(r)),e.addComponent(new MeshRendererComponent)}},loadSubmesh:function(e,t){if(e.faces=t.indices,0!=t.vertices.length){var r=t.vertices[0];if(e.positions=this.loadSubmeshBuffer("position",t.vertices,["x","y","z"]),r.normal&&(e.normals=this.loadSubmeshBuffer("normal",t.vertices,["x","y","z"])),r.tangent&&(e.tangents=this.loadSubmeshBuffer("tangent",t.vertices,["x","y","z"])),r.bitangent&&(e.bitangents=this.loadSubmeshBuffer("bitangent",t.vertices,["x","y","z"])),r.texCoord)for(var n in r.texCoord)e.texCoords2D.push(this.loadSubmeshIndexedBuffer("texCoord",t.vertices,["x","y"],n));e.recalculateBounds()}},loadSubmeshBuffer:function(e,t,r){for(var n in buffer=[],t)for(var n in vertex=t[n],r){var i=r[n];buffer.push(vertex[e][i])}return buffer},loadSubmeshIndexedBuffer:function(e,t,r,n){for(var i in buffer=[],t)for(var i in vertex=t[i],r){var o=r[i];buffer.push(vertex[e][n][o])}return buffer},loadMaterial:function(e,t){for(var r in e.name=t.name,e.shader=this.shadersManager.addSource(t.shader),e.uniforms={},this.loadUniforms(e.uniforms,t),t.textures)for(var n=t.textures[r],i=0;i<n.length;i++){var o=new TextureDescriptor(n[i].path);o.parentDescriptor=this.descriptor;var a=this.texturesManager.addDescriptor(o);e.samplers||(e.samplers=[]),e.samplers.push(new Sampler(r+i,a)),"normal"==r&&(e.shader=this.shadersManager.addSource("normalmapped"))}e.samplers||"diffuse"!=t.shader.toLowerCase()||(e.samplers=[],this.createDefaultTextureSampler(this.texturesManager.context),e.samplers.push(this.defaultSampler))},loadUniforms:function(e,t){t.color.ambient?e.ambient=new UniformColor(t.color.ambient):e.ambient=new UniformColor(new Color(.2,.2,.2,1)),t.color.diffuse?e.diffuse=new UniformColor(t.color.diffuse):e.diffuse=new UniformColor(new Color(1,1,1,1)),t.color.emissive&&(e.emissive=new UniformColor(t.color.emissive)),t.color.specular&&(e.specular=new UniformColor(t.color.specular)),e.twosided=new UniformInt(t.twosided+0)},loadTransform:function(e,t){e.relative[0]=t[0][0],e.relative[4]=t[0][1],e.relative[8]=t[0][2],e.relative[12]=t[0][3],e.relative[1]=t[1][0],e.relative[5]=t[1][1],e.relative[9]=t[1][2],e.relative[13]=t[1][3],e.relative[2]=t[2][0],e.relative[6]=t[2][1],e.relative[10]=t[2][2],e.relative[14]=t[2][3],e.relative[3]=t[3][0],e.relative[7]=t[3][1],e.relative[11]=t[3][2],e.relative[15]=t[3][3]},loadCollisionNodeParameters:function(e,t){var r=new CollisionOctreeNode([e.center.x,e.center.y,e.center.z],2*e.extents.x,t);return e.faces&&(r.faces=e.faces),r},loadCollisionNodeSubnodes:function(e,t,r){if(0!=t.children.length){e.subnodes=[];for(var n=0;n<8;n++){var i=this.loadCollisionNodeParameters(t.children[n],e);e.subnodes.push(i),this.loadCollisionNodeSubnodes(i,t.children[n],r)}}},loadCollision:function(e,t){if(!1!==t.collision){var r=e.addComponent(new LargeMeshCollider);for(var n in r.tree=this.loadCollisionNodeParameters(t.collision,!1),r.tree.nodes=this.nodesByID,r.tree.submeshes={},this.submeshesByID)r.tree.submeshes[n]=this.submeshesByID[n].submesh;this.loadCollisionNodeSubnodes(r.tree,t.collision,t)}}}),JSONModelLoader=FrakClass.extend({init:function(e,t,r,n){this.descriptor=t,this.shadersManager=r,this.texturesManager=n,this.defaultTexture=!1,this.defaultSampler=!1,this.nodesByID={},this.submeshesByID={},this.submeshes=[],this.textureUniformMap={texturesDiffuse:"diffuse",texturesNormals:"normal"}},createDefaultTextureSampler:function(e){this.defaultTexture||e.engine&&(this.defaultTexture=e.engine.WhiteTexture,this.defaultSampler=new Sampler("diffuse0",this.defaultTexture))},load:function(e,t){FRAK.isEmptyObject(t)||(e.name=t.scene.name,this.linkReferences(t),this.loadMaterials(t.materials),this.loadSubmeshes(t.meshes),this.loadNode(e,t.scene),this.loadCollision(e,t))},linkReferences:function(e){for(var t,r=e.materials.length,n=0,i=e.meshes.length;n<i;n++)0<=(t=e.meshes[n]).materialIndex&&t.materialIndex<r&&(t.material=e.materials[t.materialIndex])},loadMaterials:function(e){for(var t,r=0,n=e.length;r<n;r++)(t=e[r]).instance=new Material,this.loadMaterial(t.instance,t)},loadMaterial:function(e,t){var r=t.shader||"diffuse";for(var n in e.name=t.name,e.shader=this.shadersManager.addSource(r),"transparent"==r.toLowerCase()&&(e.shader.requirements.transparent=!0),e.uniforms={},this.loadUniforms(e.uniforms,t),t.textures)for(var i=t.textures[n],o=0;o<i.length;o++){var a=new TextureDescriptor(i[o]);a.parentDescriptor=this.descriptor;var s=this.texturesManager.addDescriptor(a),l="diffuse";n in this.textureUniformMap&&(l=this.textureUniformMap[n]),e.samplers||(e.samplers=[]),e.samplers.push(new Sampler(l+o,s)),"texturesNormals"==n&&(e.shader=this.shadersManager.addSource("normalmapped"))}e.samplers||"diffuse"!=r.toLowerCase()||(e.samplers=[],this.createDefaultTextureSampler(this.texturesManager.context),e.samplers.push(this.defaultSampler))},loadUniforms:function(e,t){t.color.ambient?e.ambient=new UniformColor(t.color.ambient):e.ambient=new UniformColor(new Color(.2,.2,.2,1)),t.color.diffuse?e.diffuse=new UniformColor(t.color.diffuse):e.diffuse=new UniformColor(new Color(1,1,1,1)),t.color.emissive&&(e.emissive=new UniformColor(t.color.emissive)),t.color.specular&&(e.specular=new UniformColor(t.color.specular)),e.twosided=new UniformInt(t.twosided+0)},loadSubmeshes:function(e){for(var t=0,r=e.length;t<r;t++){var n=e[t],i=new Submesh;this.loadSubmesh(i,n),this.submeshesByID[t]={submesh:i,material:n.material.instance}}},loadSubmesh:function(e,t){if(t.faces&&0!=t.faces.length&&t.vertices&&0!=t.vertices.length){var r;e.faces=t.faces,e.positions=t.vertices;var n=t.vertices.length/3;if(t.normals&&t.normals.length/3==n&&(e.normals=t.normals),t.tangents&&t.tangents.length/3==n&&(e.tangents=t.tangents),t.bitangents&&t.bitangents.length/3==n&&(e.bitangents=t.bitangents),t.texCoords1D)for(var i=0,o=t.texCoords1D.length;i<o;i++)(r=t.texCoords1D[i]).length==n&&e.texCoords1D.push(r);if(t.texCoords2D){i=0;for(var a=t.texCoords2D.length;i<a;i++)(r=t.texCoords2D[i]).length/2==n&&e.texCoords2D.push(r)}else if(t.texCoords3D){i=0;for(var s=t.texCoords3D.length;i<s;i++)if((r=t.texCoords3D[i]).length/3===n){for(var l=[],c=0;c<r.length;c+=3)l.push(r[c]),l.push(r[c+1]);e.texCoords2D.push(r),e.yesIGeneratedThese=!0}}if(t.texCoords3D){i=0;for(var h=t.texCoords3D.length;i<h;i++)(r=t.texCoords3D[i]).length/3==n&&e.texCoords3D.push(r)}if(t.texCoords4D){i=0;for(var u=t.texCoords4D.length;i<u;i++)(r=t.texCoords4D[i]).length/4==n&&e.texCoords4D.push(r)}e.recalculateBounds()}},loadNode:function(e,t){var r;e.localCollisionID=t.id,(this.nodesByID[e.localCollisionID]=e).transform.relative=t.relative,this.loadMesh(e,t.meshes);for(var n=0,i=t.subnodes.length;n<i;n++){r=t.subnodes[n];var o=new Node(r.name);this.loadNode(o,r),e.addNode(o)}},loadMesh:function(e,t){if(t&&0!=t.length){for(var r=new Mesh,n=0;n<t.length;n++){var i=t[n];if(i in this.submeshesByID){var o=this.submeshesByID[i];r.addSubmesh(o.submesh,o.material)}}e.addComponent(new MeshComponent(r)),e.addComponent(new MeshRendererComponent)}},loadCollisionNodeParameters:function(e,t){var r=new CollisionOctreeNode(new Float32Array(e.center),2*e.extents[0],t);return e.faces&&(r.faces=e.faces),r},loadCollisionNodeSubnodes:function(e,t,r){if(t.subnodes&&8==t.subnodes.length){e.subnodes=[];for(var n=0;n<8;n++){var i=this.loadCollisionNodeParameters(t.subnodes[n],e);e.subnodes.push(i),this.loadCollisionNodeSubnodes(i,t.subnodes[n],r)}}},loadCollision:function(e,t){if(t.collision){var r=e.addComponent(new LargeMeshCollider);for(var n in r.tree=this.loadCollisionNodeParameters(t.collision,!1),r.tree.nodes=this.nodesByID,r.tree.submeshes={},this.submeshesByID)r.tree.submeshes[n]=this.submeshesByID[n].submesh;this.loadCollisionNodeSubnodes(r.tree,t.collision,t)}}}),Manager=FrakClass.extend({init:function(e){var t=this;this.path="",e&&(this.path=e),0<this.path.length&&"/"!=this.path.slice(-1)&&(this.path+="/"),this.queue=[],this.loading=[],this.cache={},this.cacheSize=0,this.callbacks=[],this.progressCallbacks=[],this.sourceCallback=function(e){return t.path+e},this.descriptorCallback=function(e){return e},this.onAddToQueue=function(e){},this.onLoaded=function(e){}},getTotalItems:function(){return this.queue.length+this.loading.length+this.cacheSize},getWaitingItems:function(){return this.queue.length+this.loading.length},getProgress:function(){return 0==this.getTotalItems()?1:1-this.getWaitingItems()/this.getTotalItems()},addDescriptor:function(e){var t=this.cache[e.serialize(["id"])];return t||((t=this.getLoadingResource(e))||(this.onAddToQueue(e),t=this.createResource(e),this.queue.push([e,e.serialize(["id"]),t])),t)},getLoadingResource:function(e){var t=e.serialize(["id"]);for(var r in this.loading)if(this.loading[r][1]==t)return this.loading[r][2];for(var n in this.queue)if(this.queue[n][1]==t)return this.queue[n][2];return null},removeFromCache:function(e){delete this.cache[e],this.cacheSize--},cleanCache:function(){this.cache={},this.cacheSize=0},load:function(e,t){t&&this.progressCallbacks.push(t),e&&(this.callbacks.push(e),1<this.callbacks.length)?0==this.queue.length&&this.callDoneCallbacks():this.keepLoading()},keepLoading:function(){for(var e=0;e<this.progressCallbacks.length;e++)this.progressCallbacks[e](this.getProgress());if(0!=this.queue.length){var r=this,t=this.queue.shift();this.loading.push(t),this.loadResource(t[0],t[2],function(e,t){r.cache[e.serialize(["id"])]=t,r.cacheSize++,r.removeLoadedResource(e),r.onLoaded(e),r.keepLoading()},function(e){console.warn("Failed to load resource with descriptor: ",e.serialize(["id"])),r.removeLoadedResource(e),r.onLoaded(e),e.getFullPath&&console.warn("Full path: ",e.getFullPath()),r.keepLoading()})}else this.callDoneCallbacks()},removeLoadedResource:function(e){for(var t in this.loading)if(this.loading[t][0]===e){this.loading.splice(t,1);break}},callDoneCallbacks:function(){var e=this.callbacks;this.callbacks=[];for(var t=0;t<e.length;t++)e[t]()},createResource:function(){throw"createResource not implemented by this instance of Manager"},loadResource:function(e,t,r,n){throw"loadResource not implemented by this instance of Manager"}}),TextManager=Manager.extend({init:function(e){this._super(e)},add:function(e){return e=this.sourceCallback(e),this.addDescriptor(new TextDescriptor(e))},createResource:function(e){return{data:!1,descriptor:e}},loadResource:function(e,t,r,n){var i=this.descriptorCallback(e);Logistics.getText(i.getFullPath(),function(e){t.data=e,r(i,t)}).error(function(){n(i)})}}),ShadersManager=Manager.extend({init:function(e,t){this._super(t),this.sourceCallback=function(e){return e},this.context=e,this.builtin={},this.shaderBundle=e.isWebGL2()?"webgl2":"default",BuiltInShaders&&this.shaderBundle in BuiltInShaders&&(this.builtin=BuiltInShaders[this.shaderBundle]),this.setAliases(),this.textManager=new TextManager},setAliases:function(){this.aliases={diffuse:this.bundle("diffuse"),normalmapped:this.bundle("normalmapped"),transparent:this.bundle("transparent"),reflective:this.bundle("reflective"),reflective_masked:this.bundle("reflective_masked"),lines:this.bundle("lines"),test:this.bundle("test"),fallback:this.bundle("fallback"),depthrgba:this.bundle("depthrgba"),gaussianblur:this.bundle("gaussianblur")}},bundle:function(e){return"shaders/{0}/{1}".format(this.shaderBundle,e)},add:function(e,t){return e=this.sourceCallback(e),t=this.sourceCallback(t),this.addDescriptor(new ShaderDescriptor(e,t))},addSource:function(e){var t=e.toLowerCase();return t in this.aliases&&(e=this.aliases[t]),e=this.sourceCallback(e),this.addDescriptor(new ShaderDescriptor(e+".vert",e+".frag"))},createResource:function(e){return new Shader(this.context,e)},loadResource:function(e,t,r,n){var i=this.descriptorCallback(e);if(this.builtin[i.vertexSource]&&this.builtin[i.fragmentSource])console.log("Built in shader loaded:",i.vertexSource,i.fragmentSource),t.addVertexShader(this.builtin[i.vertexSource]),t.addFragmentShader(this.builtin[i.fragmentSource]),r(i,t);else{var o=this.textManager.add(this.path+i.getVertexShaderPath()),a=this.textManager.add(this.path+i.getFragmentShaderPath());this.textManager.load(function(){o.data&&a.data?(t.addVertexShader(o.data),t.addFragmentShader(a.data),r(i,t)):n(i)})}}}),TexturesManager=Manager.extend({init:function(e,t){this._super(t),this.context=e},add:function(e){e=this.sourceCallback(e);var t=new TextureDescriptor(e);return this.addDescriptor(t)},addCube:function(e){if(6!=e.length)throw"TexturesManager.addCube: Cube textures require 6 image URIs";for(var t=new CubeTextureDescriptor,r=0;r<e.length;r++)t.sources.push(this.sourceCallback(e[r]));return this.addDescriptor(t)},createResource:function(e){var t;return e instanceof CubeTextureDescriptor?(t=new CubeTexture(this.context)).name="Cubemap":(t=new Texture(this.context)).name=e.source,t},loadResource:function(e,n,i,o){var a=this.descriptorCallback(e),s=this;if(e instanceof CubeTextureDescriptor){var l=[CubeTexture.FRONT,CubeTexture.BACK,CubeTexture.LEFT,CubeTexture.RIGHT,CubeTexture.BOTTOM,CubeTexture.TOP];!function t(){if(0!=l.length){var r=l.shift();Logistics.getImage(a.getFaceFullPath(r),function(e){n.setFace(s.context,r,e),delete e,t()}).error(function(){o(a)})}else i(a,n)}()}else Logistics.getImage(a.getFullPath(),function(e){n.setImage(s.context,e),delete e,i(a,n)}).error(function(){o(a)})}}),MaterialsManager=Manager.extend({init:function(e,t,r,n){if(this._super(t),r&&!(r instanceof ShadersManager))throw"shadersManager is not instance of ShadersManager";if(n&&!(n instanceof TexturesManager))throw"texturesManager is not instance of TexturesManager";r||(r=new ShadersManager(e)),this.shadersManager=r,n||(n=new TexturesManager(e)),this.texturesManager=n,this.context=e},add:function(e){return e=this.sourceCallback(e),this.addDescriptor(new MaterialDescriptor(e))},createResource:function(e){var t=new Material;return t.descriptor=e,t},loadResource:function(e,r,n,t){var i,o=this.descriptorCallback(e),a=this;o.shaderDescriptor&&(i=this.shadersManager.addDescriptor(o.shaderDescriptor)),this.shadersManager.load(function(){var t={};for(var e in o.textureDescriptors)t[e]=a.texturesManager.addDescriptor(o.textureDescriptors[e]);a.texturesManager.load(function(){for(var e in r.samplers||(r.samplers=[]),t)r.samplers.push(new Sampler(e,t[e]));r.shader=i,r.uniforms=o.uniforms,o.requirements&&r.shader&&(r.shader.requirements.transparent=o.requirements.transparent),n(o,r)})})}}),MaterialSourcesManager=Manager.extend({init:function(e,t,r,n){if(this._super(t),r&&!(r instanceof MaterialsManager))throw"materialsManager is not instance of MaterialsManager";if(n&&!(n instanceof TextManager))throw"textManager is not instance of TextManager";r||(r=new MaterialsManager(e)),this.materialsManager=r,n||(n=new TextManager),this.textManager=n,this.context=e},add:function(e){return e=this.sourceCallback(e),this.addDescriptor(new MaterialSourceDescriptor(e))},createResource:function(e){return new MaterialSource(e)},loadResource:function(e,a,s,t){var l=this.descriptorCallback(e),c=this.textManager.add(l.getFullPath()),h=this;this.textManager.load(function(){var e=FRAK.parseJSON(c.data),t=new MaterialDescriptor;if(t.parentDescriptor=l,e.uniforms)for(var r in e.uniforms){var n=e.uniforms[r];n instanceof Array?(1==n.length&&(t.uniforms[r]=new UniformFloat(n)),2==n.length&&(n[0]instanceof Array?t.uniforms[r]=new UniformMat2(n[0].concat(n[1])):t.uniforms[r]=new UniformVec2(n)),3==n.length&&(n[0]instanceof Array?t.uniforms[r]=new UniformMat3(n[0].concat(n[1]).concat(n[2])):t.uniforms[r]=new UniformVec3(n)),4==n.length&&(n[0]instanceof Array?t.uniforms[r]=new UniformMat4(n[0].concat(n[1]).concat(n[2]).concat(n[3])):t.uniforms[r]=new UniformVec4(n))):n instanceof Object?(!1 in n&&(n.a=0),t.uniforms[r]=new UniformColor(n)):"number"==typeof n&&parseFloat(n)==parseInt(n)?t.uniforms[r]=new UniformInt(n):t.uniforms[r]=new UniformFloat(n)}if(e.textures)for(var i in e.textures){var o=new TextureDescriptor(e.textures[i]);(t.textureDescriptors[i]=o).parentDescriptor=t}e.shader&&(e.shader instanceof Array?t.shaderDescriptor=new ShaderDescriptor(e.shader[0],e.shader[1]):t.shaderDescriptor=new ShaderDescriptor(e.shader),t.shaderDescriptor.parentDescriptor=t),e.requirements&&(t.requirements=e.requirements),a.material=h.materialsManager.addDescriptor(t),h.materialsManager.load(function(){s(l,a)})})}}),ModelsManager=Manager.extend({init:function(e,t,r,n){this._super(t),r||(r=new ShadersManager(e)),this.shadersManager=r,n||(n=new TexturesManager(e)),this.texturesManager=n},getProgress:function(){var e=this._super();return 1==e?e:e+(this.texturesManager.getProgress()+this.shadersManager.getProgress())/2/this.getTotalItems()},add:function(e,t){return e=this.sourceCallback(e),this.addDescriptor(new ModelDescriptor(e,t))},createResource:function(){return new Node},loadResource:function(e,r,n,i){var o=this.descriptorCallback(e),a=this;"json"==e.getFormat()?Logistics.getJSON(o.getFullPath(),function(e){new JSONModelLoader(a.context,o,a.shadersManager,a.texturesManager).load(r,e),n(o,r),a.shadersManager.load(function(){}),a.texturesManager.load(function(){})}):Logistics.getBinary(o.getFullPath(),function(e){e&&0!=e.byteLength?a.createParser(e,function(e,t){new ModelLoader(a.context,o,a.shadersManager,a.texturesManager).load(r,e),n(o,r),a.shadersManager.load(function(){}),a.texturesManager.load(function(){})},function(e,t){i(o)},function(e,t){}).parse():i(o)})},createParser:function(e,t,r,n,i){return new ThreadedDataParser(e,t,r,n,i)}}),AssetsManager=FrakClass.extend({init:function(e,t){this.managers=[],this.assetsPath=t;var n=this;this.loadingCount=0,this.loadedCallbacks=[];var r=function(e){e.onAddToQueue=function(e){n.loadingCount++},e.onLoaded=function(e){if(n.loadingCount--,n.loadingCount<=0){var t=n.loadedCallbacks.slice(0);n.loadedCallbacks=[];for(var r=0;r<t.length;r++){(0,t[r])()}}},n.managers.push(e)};r(this.shadersManager=new ShadersManager(e,this.assetsPath)),r(this.texturesManager=new TexturesManager(e,this.assetsPath)),r(this.modelsManager=new ModelsManager(e,this.assetsPath,this.shadersManager,this.texturesManager)),r(this.textManager=new TextManager(this.assetsPath)),r(this.materialsManager=new MaterialsManager(e,this.assetsPath,this.shadersManager,this.texturesManager)),r(this.materialSourcesManager=new MaterialSourcesManager(e,this.assetsPath,this.materialsManager,this.textManager))},addTexture:function(e){return this.texturesManager.add(e)},addModel:function(e,t){return this.modelsManager.add(e,t)},addShaderSource:function(e){return this.shadersManager.addSource(e)},addShader:function(e,t){return this.shadersManager.add(e,t)},addText:function(e){return this.textManager.add(e)},addMaterial:function(e){return this.materialSourcesManager.add(e)},hasItemsInQueue:function(){for(var e in this.managers)if(0<this.managers[e].getWaitingItems())return!0;return!1},load:function(e,r){var n=this;if(e&&this.loadedCallbacks.push(e),this.hasItemsInQueue())for(var t=0;t<this.managers.length;t++)this.managers[t].load(function(){},a);else{var i=this.loadedCallbacks.slice(0);this.loadedCallbacks=[];for(var o=0;o<i.length;o++)i[o]()}function a(){if(r){for(var e=0,t=0;t<n.managers.length;t++)n.managers[t]?e+=n.managers[t].getProgress():e+=1;r(e/n.managers.length)}}}}),BoundingVolume=Serializable.extend({init:function(e){this.center=!1,e&&(this.center=vec3.clone(e))},type:function(){return"BoundingVolume"},isPoint:function(){return!0},toString:function(){return"BoundingVolume[center=("+this.center[0]+","+this.center[1]+","+this.center[2]+")]"}}),BoundingVolumeVectorCache=[vec3.create(),vec3.create(),vec3.create()],BoundingBox=BoundingVolume.extend({init:function(e,t){this._super(e),this.size=vec3.create(),t&&vec3.copy(this.size,t),this.extents=vec3.scale(vec3.create(),this.size,.5),this.min=vec3.create(),this.max=vec3.create(),this.recalculate()},type:function(){return"BoundingBox"},recalculate:function(){vec3.scale(this.size,this.extents,2),this.center&&(vec3.subtract(this.min,this.center,this.extents),vec3.add(this.max,this.center,this.extents))},set:function(e,t){e&&(this.center||(this.center=vec3.create()),vec3.copy(this.center,e)),t&&vec3.copy(this.size,t),vec3.scale(this.extents,this.size,.5),this.recalculate()},transform:function(e,t){if(t||(t=new BoundingBox),!this.center)return t;var r=0,n=0;mat4.translation(t.min,e),mat4.translation(t.max,e);for(var i=0;i<3;i++)for(var o=0;o<3;o++)(r=e[4*o+i]*this.min[o])<(n=e[4*o+i]*this.max[o])?(t.min[i]+=r,t.max[i]+=n):(t.min[i]+=n,t.max[i]+=r);return vec3.subtract(t.size,t.max,t.min),vec3.scale(t.extents,t.size,.5),t.center||(t.center=vec3.create()),vec3.add(t.center,t.min,t.extents),t},isPoint:function(){return 0==this.size[0]&&0==this.size[1]&&0==this.size[2]},getOuterSphereRadius:function(){return vec3.len(this.extents)},containsPoint:function(e){return!!this.center&&(e[0]>=this.min[0]&&e[1]>=this.min[1]&&e[2]>=this.min[2]&&e[0]<=this.max[0]&&e[1]<=this.max[1]&&e[2]<=this.max[2])},containsBox:function(e){return!!this.center&&(this.containsPoint(e.min)&&this.containsPoint(e.max))},intersectsBox:function(e){return!!this.center&&(this.max[0]>e.min[0]&&this.min[0]<e.max[0]&&this.max[1]>e.min[1]&&this.min[1]<e.max[1]&&this.max[2]>e.min[2]&&this.min[2]<e.max[2])},intersectsPlane:function(e){if(!this.center)return!1;var t=BoundingVolumeVectorCache[0],r=BoundingVolumeVectorCache[1],n=BoundingVolumeVectorCache[2];vec3.copy(t,this.max),vec3.copy(r,this.min);var i=1/0,o=-1/0,a=e.getDistanceToPoint(this.min);return a<i&&(vec3.copy(t,this.min),i=a),o<a&&(vec3.copy(r,this.min),o=a),(a=e.getDistanceToPoint(this.max))<i&&(vec3.copy(t,this.max),i=a),o<a&&(vec3.copy(r,this.max),o=a),vec3.set(n,this.min[0],this.min[1],this.max[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),vec3.set(n,this.min[0],this.max[1],this.min[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),vec3.set(n,this.min[0],this.max[1],this.max[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),vec3.set(n,this.max[0],this.min[1],this.min[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),vec3.set(n,this.max[0],this.min[1],this.max[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),vec3.set(n,this.max[0],this.max[1],this.min[2]),(a=e.getDistanceToPoint(n))<i&&(vec3.copy(t,n),i=a),o<a&&(vec3.copy(r,n),o=a),!e.sameSide(t,r)||!(!e.pointOnPlane(t)&&!e.pointOnPlane(r))},intersectsTriangle:function(e,t,r){if(!this.center)return!1;if(AABBPlaneCache.setByPoints(e,t,r),!this.intersectsPlane(AABBPlaneCache))return!1;if(this.containsPoint(e)||this.containsPoint(t)||this.containsPoint(r))return!0;var n=BoundingVolumeVectorCache[0],i=BoundingVolumeVectorCache[1];vec3.copy(n,e),vec3.copy(i,e);for(var o=0;o<3;o++)t[o]<n[o]&&(n[o]=t[o]),r[o]<n[o]&&(n[o]=r[o]),t[o]>i[o]&&(i[o]=t[o]),r[o]>i[o]&&(i[o]=r[o]);if(!(this.max[0]>=n[0]&&this.min[0]<=i[0]&&this.max[1]>=n[1]&&this.min[0]<=i[1]&&this.max[2]>=n[2]&&this.min[2]<=i[2]))return!1;var a=vec2.fromValues(e[0],e[1]),s=vec2.fromValues(t[0],t[1]),l=vec2.fromValues(r[0],r[1]),c=vec2.fromValues(this.min[0],this.min[1]),h=vec2.fromValues(this.max[0],this.max[1]);return!!(LineRectIntersection2D(a,s,c,h)||LineRectIntersection2D(s,l,c,h)||LineRectIntersection2D(l,a,c,h)||PointInTriangle2D(a,s,l,c))&&(vec2.set(a,e[2],e[1]),vec2.set(s,t[2],t[1]),vec2.set(l,r[2],r[1]),vec2.set(c,this.min[2],this.min[1]),vec2.set(h,this.max[2],this.max[1]),!!(LineRectIntersection2D(a,s,c,h)||LineRectIntersection2D(s,l,c,h)||LineRectIntersection2D(l,a,c,h)||PointInTriangle2D(a,s,l,c))&&(vec2.set(a,e[0],e[2]),vec2.set(s,t[0],t[2]),vec2.set(l,r[0],r[2]),vec2.set(c,this.min[0],this.min[2]),vec2.set(h,this.max[0],this.max[2]),!!(LineRectIntersection2D(a,s,c,h)||LineRectIntersection2D(s,l,c,h)||LineRectIntersection2D(l,a,c,h)||PointInTriangle2D(a,s,l,c))))},encapsulatePoint:function(e){if(!this.center)return this.center=vec3.clone(e),this.extents[0]=0,this.extents[1]=0,this.extents[2]=0,void this.recalculate();if(!this.containsPoint(e)){for(var t=vec3.subtract(BoundingVolumeVectorCache[0],e,this.center),r=0;r<3;r++)Math.abs(t[r])>this.extents[r]&&(this.extents[r]+=(Math.abs(t[r])-this.extents[r])/2,this.center[r]=e[r]+(e[r]>this.center[r]?-1:1)*this.extents[r]);this.recalculate()}},encapsulateBox:function(e){if(e.center)return this.center?void(this.containsBox(e)||(this.encapsulatePoint(e.min),this.encapsulatePoint(e.max))):(this.center=vec3.clone(e.center),this.extents=vec3.clone(e.extents),void this.recalculate())},getVertices:function(e){return e||(e=[vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create()]),vec3.add(e[0],this.center,[this.extents[0],this.extents[1],this.extents[2]]),vec3.add(e[1],this.center,[-this.extents[0],this.extents[1],this.extents[2]]),vec3.add(e[2],this.center,[this.extents[0],-this.extents[1],this.extents[2]]),vec3.add(e[3],this.center,[-this.extents[0],-this.extents[1],this.extents[2]]),vec3.add(e[4],this.center,[this.extents[0],this.extents[1],-this.extents[2]]),vec3.add(e[5],this.center,[-this.extents[0],this.extents[1],-this.extents[2]]),vec3.add(e[6],this.center,[this.extents[0],-this.extents[1],-this.extents[2]]),vec3.add(e[7],this.center,[-this.extents[0],-this.extents[1],-this.extents[2]]),e},toString:function(){return"BoundingBox[\n\tcenter=("+this.center[0]+", "+this.center[1]+", "+this.center[2]+")\n\tmin=("+this.min[0]+", "+this.min[1]+", "+this.min[2]+")\n\tmax=("+this.max[0]+", "+this.max[1]+", "+this.max[2]+")\n\textents=("+this.extents[0]+", "+this.extents[1]+", "+this.extents[2]+")\n\tsize=("+this.size[0]+", "+this.size[1]+", "+this.size[2]+")\n]\n"}});function LineLineIntersection2D(e,t,r,n,i){var o=(t[0]-e[0])*(n[1]-r[1])-(t[1]-e[1])*(n[0]-r[0]);if(0==o)return!1;var a=((e[1]-r[1])*(n[0]-r[0])-(e[0]-r[0])*(n[1]-r[1]))/o,s=((e[1]-r[1])*(t[0]-e[0])-(e[0]-r[0])*(t[1]-e[1]))/o;return!(a<0||1<a||s<0||1<s)&&(i&&(i[0]=e[0]+a*(t[0]-e[0]),i[1]=e[1]+a*(t[1]-e[1])),!0)}function LineRectIntersection2D(e,t,r,n){return!!(LineLineIntersection2D(e,t,r,[r[0],n[1]])||LineLineIntersection2D(e,t,[r[0],n[1]],n)||LineLineIntersection2D(e,t,n,[n[0],r[1]])||LineLineIntersection2D(e,t,r,[n[0],r[1]]))}function PointInTriangle2D(e,t,r,n){var i=(t[1]-r[1])*(e[0]-r[0])+(r[0]-t[0])*(e[1]-r[1]);if(0==i)return!1;var o=((t[1]-r[1])*(n[0]-r[0])+(r[0]-t[0])*(n[1]-r[1]))/i,a=((r[1]-e[1])*(n[0]-r[0])+(e[0]-r[0])*(n[1]-r[1]))/i;return 0<=o&&0<=a&&o+a<=1}var BoundingSphere=BoundingVolume.extend({init:function(e,t){this._super(e),this.radius=0,t&&(this.radius=t)},type:function(){return"BoundingSphere"},isPoint:function(){return 0==this.radius},containsPoint:function(e){return!!this.center&&vec3.distance(e,this.center)<=this.radius},containsSphere:function(e){return!!this.center&&vec3.distance(e.center,this.center)<=this.radius-e.radius},intersectsSphere:function(e){if(!this.center)return!1;var t=vec3.squaredLength(vec3.subtract(BoundingVolumeVectorCache[0],this.center,e.center)),r=this.radius+e.radius;return t<=r*r},encapsulatePoint:function(e){if(!this.center)return this.center=vec3.clone(e),void(this.radius=0);if(!this.containsPoint(e)){var t=vec3.subtract(BoundingVolumeVectorCache[0],this.center,e),r=vec3.length(t)+this.radius;vec3.normalize(t,t),this.radius=r/2;var n=vec3.scale(BoundingVolumeVectorCache[1],t,this.radius);vec3.add(this.center,e,n)}},encapsulateSphere:function(e){if(e.center){if(!this.center)return this.center=vec3.clone(e.center),void(this.radius=e.radius);if(!this.containsSphere(e)){var t=vec3.subtract(BoundingVolumeVectorCache[0],e.center,this.center),r=vec3.length(t)+e.radius;vec3.normalize(t,t),vec3.scale(t,t,r);var n=vec3.add(BoundingVolumeVectorCache[2],this.center,t);this.encapsulatePoint(n)}}},transform:function(e,t){if(t||(t=new BoundingSphere),!this.center)return t;var r=mat4.getScale(BoundingVolumeVectorCache[0],e),n=vec3.transformMat4(BoundingVolumeVectorCache[1],this.center,e);return t.center||(t.center=vec3.create()),vec3.copy(t.center,n),t.radius=this.radius*Math.max(r[0],r[1],r[2]),t},toString:function(){return"BoundingSphere[center=("+this.center[0]+", "+this.center[1]+", "+this.center[2]+") radius="+this.radius+"]"}}),Plane=FrakClass.extend({init:function(){this.normal=vec3.create(),this.distance=0},setByPoints:function(e,t,r){return this.normal=vec3.cross(vec3.create(),vec3.subtract(vec3.create(),t,e),vec3.subtract(vec3.create(),r,e)),vec3.normalize(this.normal,this.normal),this.distance=-vec3.dot(this.normal,t),this},setByNormalAndPoint:function(e,t){return this.normal=vec3.clone(e),vec3.normalize(this.normal,this.normal),this.distance=-vec3.dot(this.normal,t),this},getDistanceToPoint:function(e){return vec3.dot(this.normal,e)+this.distance},getDistanceOnLine:function(e,t){var r=vec3.scale(vec3.create(),this.normal,-this.distance),n=vec3.dot(t,this.normal);return Math.abs(n)<EPSILON?1/0:vec3.dot(vec3.sub(r,r,e),this.normal)/n},getLineIntersection:function(e,t,r){r||(r=vec3.create());var n=this.getDistanceOnLine(e,t);return vec3.scaleAndAdd(r,e,t,n),r},projectToPlane:function(e,t){return t||(t=vec3.create()),vec3.scale(t,this.normal,this.getDistanceToPoint(e)),vec3.sub(t,e,t),t},pointInFront:function(e){return 0<vec3.dot(this.normal,e)+this.distance},pointInBack:function(e){return vec3.dot(this.normal,e)+this.distance<0},pointOnPlane:function(e){return Math.abs(vec3.dot(this.normal,e)+this.distance)<EPSILON},sameSide:function(e,t){return!((vec3.dot(this.normal,e)+this.distance)*(vec3.dot(this.normal,t)+this.distance)<0)},toString:function(){return"Plane["+this.normal[0]+", "+this.normal[1]+", "+this.normal[2]+", "+this.distance+"]"}}),AABBPlaneCache=new Plane,Ray=FrakClass.extend({init:function(e,t){this.infinite=!1,this.origin=vec3.create(),this.destination=vec3.create(),e&&vec3.copy(this.origin,e),t&&vec3.copy(this.destination,t)},clone:function(){var e=new Ray(this.origin,this.destination);return e.infinite=this.infinite,e},getLength:function(){return vec3.distance(this.origin,this.destination)},getDirection:function(e){return e||(e=vec3.create()),this.getVector(e),vec3.normalize(e,e),e},getVector:function(e){return e||(e=vec3.create()),vec3.subtract(e,this.destination,this.origin),e},transform:function(e){vec3.transformMat4(this.origin,this.origin,e),vec3.transformMat4(this.destination,this.destination,e)},transformWithLength:function(e,t){var r=mat4.clone(e);r[12]=0,r[13]=0,r[14]=0;var n=this.getDirection();vec3.transformMat4(this.origin,this.origin,e),vec3.transformMat4(n,n,r),vec3.scale(n,n,t),vec3.add(this.destination,this.origin,n)},getPointOnRay:function(e){var t=vec3.create(),r=this.getVector();return vec3.add(t,this.origin,vec3.scale(r,r,e)),t},getClosestPointOnRay:function(e){var t=this.getDirection(),r=vec3.dot(t,vec3.subtract(vec3.create(),e,this.origin));return vec3.add(vec3.create(),this.origin,vec3.scale(t,t,r))},distanceOfPoint:function(e){return vec3.dot(this.getDirection(),vec3.subtract(vec3.create(),e,this.origin))<=0?vec3.distance(e,this.origin):vec3.distance(vec3.cross(vec3.create(),this.getDirection(),vec3.subtract(vec3.create(),e,this.origin)))},intersectBoundingVolume:function(e,t){return!!(e instanceof BoundingVolume&&e.center)&&(e instanceof BoundingSphere?this.intersectSphere(e.center,e.radius,t):e instanceof BoundingBox&&this.intersectAABB(e.min,e.max,t))},intersectPlane:function(e,t){if(e.sameSide(this.origin,this.destination))return!1;var r=this.getDirection(),n=-e.getDistanceToPoint(this.origin)/vec3.dot(r,e.normal);return t&&t.add(vec3.add(vec3.create(),this.origin,vec3.scale(r,r,n))),!0},intersectTriangle:function(e,t,r,n){var i=vec3.subtract(RayTestLocalCache[0],r,e),o=vec3.subtract(RayTestLocalCache[1],t,e),a=vec3.cross(RayTestLocalCache[2],o,i);vec3.normalize(a,a);var s=vec3.dot(vec3.subtract(RayTestLocalCache[3],this.origin,e),a),l=vec3.dot(vec3.subtract(RayTestLocalCache[3],this.destination,e),a);if(0<=s*l)return!1;var c=this.getVector();c=vec3.add(c,this.origin,vec3.scale(c,c,-s/(l-s)));var h=vec3.subtract(RayTestLocalCache[2],c,e),u=vec3.dot(i,i),d=vec3.dot(i,o),f=vec3.dot(i,h),m=vec3.dot(o,o),v=vec3.dot(o,h),p=1/(u*m-d*d),g=(m*f-d*v)*p,x=(u*v-d*f)*p;return 0<=g&&0<=x&&g+x<=1&&(n&&n.add(c),!0)},intersectTriangleDistanceOnly:function(e,t,r){var n=vec3.subtract(RayTestLocalCache[0],r,e),i=vec3.subtract(RayTestLocalCache[1],t,e),o=vec3.cross(RayTestLocalCache[2],i,n);vec3.normalize(o,o);var a=vec3.dot(vec3.subtract(RayTestLocalCache[3],this.origin,e),o),s=vec3.dot(vec3.subtract(RayTestLocalCache[3],this.destination,e),o);if(0<=a*s)return!1;var l=this.getVector(),c=-a/(s-a);l=vec3.add(l,this.origin,vec3.scale(l,l,c));var h=vec3.subtract(RayTestLocalCache[2],l,e),u=vec3.dot(n,n),d=vec3.dot(n,i),f=vec3.dot(n,h),m=vec3.dot(i,i),v=vec3.dot(i,h),p=1/(u*m-d*d),g=(m*f-d*v)*p,x=(u*v-d*f)*p;return 0<=g&&0<=x&&g+x<=1&&c},intersectSphere:function(e,t,r){var n=vec3.sub(RayTestLocalCache[0],this.origin,e),i=this.getDirection(),o=vec3.dot(i,n),a=o*o-vec3.dot(n,n)+t*t;return Math.abs(a)<EPSILON?(r&&r.add(vec3.add(vec3.create(),this.origin,vec3.scale(i,i,-o))),!0):0<a&&(r&&(r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[0],i,-o-Math.sqrt(a)))),r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[0],i,-o+Math.sqrt(a))))),!0)},intersectAABB:function(e,t,r){var n=this.getDirection(RayTestLocalCache[0]),i=RayTestLocalCache[1],o=RayTestLocalCache[2];n[0]=1/n[0],n[1]=1/n[1],n[2]=1/n[2],i[0]=(e[0]-this.origin[0])*n[0],o[0]=(t[0]-this.origin[0])*n[0],i[1]=(e[1]-this.origin[1])*n[1],o[1]=(t[1]-this.origin[1])*n[1],i[2]=(e[2]-this.origin[2])*n[2],o[2]=(t[2]-this.origin[2])*n[2];var a=Math.max(Math.min(i[0],o[0]),Math.min(i[1],o[1]),Math.min(i[2],o[2])),s=Math.min(Math.max(i[0],o[0]),Math.max(i[1],o[1]),Math.max(i[2],o[2]));return!(s<0||s<a)&&(this.infinite?(r&&(this.getDirection(n),r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[1],n,a))),r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[1],n,s)))),!0):!(a*a>vec3.sqrDist(this.origin,this.destination)&&(this.origin[0]<e[0]||this.origin[1]<e[1]||this.origin[2]<e[2]||this.origin[0]>t[0]||this.origin[1]>t[1]||this.origin[2]>t[2])&&(this.destination[0]<e[0]||this.destination[1]<e[1]||this.destination[2]<e[2]||this.destination[0]>t[0]||this.destination[1]>t[1]||this.destination[2]>t[2]))&&(r&&(this.getDirection(n),r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[1],n,a))),r.add(vec3.add(vec3.create(),this.origin,vec3.scale(RayTestLocalCache[1],n,s)))),!0))},toString:function(){return"Ray("+vec3.str(this.origin)+", "+vec3.str(this.destination)+", infinite = "+this.infinite+")"}}),RayTestResult=FrakClass.extend({init:function(e){this.ray=e.clone(),this.hits=[],this.addCallback=!1},add:function(e){var t={point:e,collider:!1,submesh:!1,node:!1};FRAK.isFunction(this.addCallback)&&this.addCallback(t),this.hits.push(t)},empty:function(){return 0==this.hits.length},sort:function(){var r=this;this.hits.sort(function(e,t){return vec3.sqrDist(r.ray.origin,e.point)-vec3.sqrDist(r.ray.origin,t.point)})},nearest:function(){if(this.empty())return!1;for(var e=1/0,t=0,r=0;r<this.hits.length;r++){var n=vec3.sqrDist(this.ray.origin,this.hits[r].point);n<e&&(e=n,t=r)}return this.hits[t]}}),RayTestLocalCache=[vec3.create(),vec3.create(),vec3.create(),vec3.create()],Submesh=FrakClass.extend({init:function(){this.materialIndex=-1,this.faces=[],this.positions=[],this.texCoords1D=[],this.texCoords2D=[],this.texCoords3D=[],this.texCoords4D=[],this.tangents=!1,this.normals=!1,this.bitangents=!1,this.barycentric=!1,this.boundingBox=new BoundingBox,this.boundingSphere=new BoundingSphere},calculateTangents:function(){for(var e=new Float32Array(this.positions.length),t=new Float32Array(this.positions.length),r=this.texCoords2D[0],n=vec3.create(),i=vec3.create(),o=vec3.create(),a=vec2.create(),s=vec2.create(),l=vec2.create(),c=vec3.create(),h=vec3.create(),u=0;u<this.faces.length;u+=3){var d=this.faces[u],f=this.faces[u+1],m=this.faces[u+2];vec3.set(n,this.positions[3*d],this.positions[3*d+1],this.positions[3*d+2]),vec3.set(i,this.positions[3*f],this.positions[3*f+1],this.positions[3*f+2]),vec3.set(o,this.positions[3*m],this.positions[3*m+1],this.positions[3*m+2]),vec2.set(a,r[2*d],r[2*d+1]),vec2.set(s,r[2*f],r[2*f+1]),vec2.set(l,r[2*m],r[2*m+1]);var v=i[0]-n[0],p=o[0]-n[0],g=i[1]-n[1],x=o[1]-n[1],w=i[2]-n[2],b=o[2]-n[2],y=s[0]-a[0],T=l[0]-a[0],S=s[1]-a[1],C=l[1]-a[1],E=1/(y*C-T*S);vec3.set(c,(C*v-S*p)*E,(C*g-S*x)*E,(C*w-S*b)*E),vec3.set(h,(y*p-T*v)*E,(y*x-T*g)*E,(y*b-T*w)*E),e[3*d+0]+=c[0],e[3*d+1]+=c[1],e[3*d+2]+=c[2],e[3*f+0]+=c[0],e[3*f+1]+=c[1],e[3*f+2]+=c[2],e[3*m+0]+=c[0],e[3*m+1]+=c[1],e[3*m+2]+=c[2],t[3*d+0]+=h[0],t[3*d+1]+=h[1],t[3*d+2]+=h[2],t[3*f+0]+=h[0],t[3*f+1]+=h[1],t[3*f+2]+=h[2],t[3*m+0]+=h[0],t[3*m+1]+=h[1],t[3*m+2]+=h[2]}this.tangents=new Float32Array(this.positions.length),this.bitangents=new Float32Array(this.positions.length);var _=vec3.create(),R=vec3.create(),D=vec3.create(),P=vec3.create();for(u=0;u<this.normals.length;u+=3){vec3.set(_,this.normals[u],this.normals[u+1],this.normals[u+2]),vec3.set(R,e[u],e[u+1],e[u+2]),vec3.scale(D,_,vec3.dot(_,R)),vec3.sub(D,R,D),vec3.normalize(D,D),this.tangents[u]=D[0],this.tangents[u+1]=D[1],this.tangents[u+2]=D[2],vec3.set(D,t[u],t[u+1],t[u+2]),vec3.cross(P,_,R);var M=vec3.dot(P,D)<0?-1:1;vec3.set(R,this.tangents[u],this.tangents[u+1],this.tangents[u+2]),vec3.cross(D,_,R),vec3.scale(D,D,M),vec3.normalize(D,D),this.bitangents[u]=D[0],this.bitangents[u+1]=D[1],this.bitangents[u+2]=D[2]}delete e,delete t},calculateBarycentric:function(){this.barycentric=new Float32Array(this.positions.length);for(var e=0;e<this.faces.length;e+=3){var t=this.faces[e],r=this.faces[e+1],n=this.faces[e+2];this.barycentric[3*t+0]=1,this.barycentric[3*t+1]=0,this.barycentric[3*t+2]=0,this.barycentric[3*r+0]=0,this.barycentric[3*r+1]=1,this.barycentric[3*r+2]=0,this.barycentric[3*n+0]=0,this.barycentric[3*n+1]=0,this.barycentric[3*n+2]=1}},recalculateBounds:function(){this.boundingBox=new BoundingBox,this.boundingSphere=new BoundingSphere;for(var e=0,t=this.positions.length;e<t;e+=3)this.boundingBox.encapsulatePoint(vec3.fromValues(this.positions[e+0],this.positions[e+1],this.positions[e+2])),this.boundingSphere.encapsulatePoint(vec3.fromValues(this.positions[e+0],this.positions[e+1],this.positions[e+2]))},generateEdges:function(){var r=this;function e(e,t){r.edges[r.faces[e]]||(r.edges[e]={}),r.edges[r.faces[e]][r.faces[t]]=!0}this.edges={};for(var t=0,n=this.faces.length;t<n;t+=3)e(t,t+1),e(t+1,t),e(t+1,t+2),e(t+2,t+1),e(t+2,t),e(t,t+2)}}),Mesh=FrakClass.extend({init:function(){this.submeshes=[],this.materials=[],this.boundingBox=new BoundingBox,this.boundingSphere=new BoundingSphere},addSubmesh:function(e,t){this.boundingBox.encapsulateBox(e.boundingBox),this.boundingSphere.encapsulateSphere(e.boundingSphere),this.submeshes.push(e),t&&(this.materials.push(t),e.materialIndex=this.materials.length-1)},getMaterial:function(e){return 0<=e&&e<this.materials.length&&this.materials[e]},setMaterial:function(e,t){if(e<0||e>=this.materials.length)throw"Material.setMaterial: index out of bounds.";this.materials[e]=t},addMaterial:function(e){return this.materials.push(e),this.materials.length-1},getPolycount:function(){var e=0;for(var t in this.submeshes)e+=this.submeshes[t].faces.length/3;return e},empty:function(){return 0===this.submeshes.length}}),Primitives={plane:function(e,t,r){var n=new Mesh,i=new Submesh;i.positions=[-.5*e,-.5*t,0,-.5*e,.5*t,0,.5*e,.5*t,0,.5*e,-.5*t,0],i.normals=[0,0,1,0,0,1,0,0,1,0,0,1],i.texCoords2D=[[0,0,0,1,1,1,1,0]],i.faces=[0,1,2,0,2,3],i.recalculateBounds(),n.addSubmesh(i,r);var o=new Node("Plane");return o.addComponent(new MeshComponent(n)),o.addComponent(new MeshRendererComponent),o},box:function(e,t,r){var n=new Mesh,o=new Submesh;o.positions=[],o.normals=[],o.texCoords2D=[[]];var a=vec3.create(),s=vec3.create(),l=vec3.create();function i(e,t,r,n){vec3.sub(s,t,e),vec3.sub(l,n,e),vec3.cross(a,s,l),vec3.negate(a,a),vec3.normalize(a,a);var i=o.positions.length/3;o.positions.push(e[0],e[1],e[2]),o.normals.push(a[0],a[1],a[2]),o.texCoords2D[0].push(0,1),o.positions.push(t[0],t[1],t[2]),o.normals.push(a[0],a[1],a[2]),o.texCoords2D[0].push(1,1),o.positions.push(r[0],r[1],r[2]),o.normals.push(a[0],a[1],a[2]),o.texCoords2D[0].push(1,0),o.positions.push(n[0],n[1],n[2]),o.normals.push(a[0],a[1],a[2]),o.texCoords2D[0].push(0,0),o.faces.push(i+0,i+3,i+2),o.faces.push(i+2,i+1,i+0)}var c=[vec3.fromValues(e[0]-t[0],e[1]-t[1],e[2]-t[2]),vec3.fromValues(e[0]+t[0],e[1]-t[1],e[2]-t[2]),vec3.fromValues(e[0]+t[0],e[1]+t[1],e[2]-t[2]),vec3.fromValues(e[0]-t[0],e[1]+t[1],e[2]-t[2]),vec3.fromValues(e[0]-t[0],e[1]-t[1],e[2]+t[2]),vec3.fromValues(e[0]+t[0],e[1]-t[1],e[2]+t[2]),vec3.fromValues(e[0]+t[0],e[1]+t[1],e[2]+t[2]),vec3.fromValues(e[0]-t[0],e[1]+t[1],e[2]+t[2])];i(c[0],c[1],c[2],c[3]),i(c[5],c[4],c[7],c[6]),i(c[4],c[0],c[3],c[7]),i(c[1],c[5],c[6],c[2]),i(c[4],c[5],c[1],c[0]),i(c[3],c[2],c[6],c[7]),o.calculateTangents(),o.recalculateBounds(),n.addSubmesh(o,r);var h=new Node("Box");return h.addComponent(new MeshComponent(n)),h.addComponent(new MeshRendererComponent),h},sphere:function(e,t,r,n){if(e<=0)throw"Primitives.sphere: invalid sphere radius";if(t<2||r<2)throw"Primitives.sphere: invalid sphere slices/stacks parameters (slices<2 or stacks<2)";var i=360/t,o=180/r,a=360/i*(180/o)*4,s=new Mesh,l=new Submesh;l.positions=new Float32Array(3*a),l.normals=new Float32Array(3*a),l.texCoords2D=[new Float32Array(2*a)];for(var c=Math.PI/180,h=0,u=vec3.create(),d=vec3.create(),f=vec3.create(),m=vec3.create(),v=0;v<180;v+=o)for(var p=0;p<360;p+=i)l.faces.push(h+0,h+1,h+2),l.faces.push(h+2,h+3,h+0),u[0]=e*Math.sin((v+o)*c)*Math.cos(c*(p+i)),u[1]=e*Math.cos((v+o)*c),u[2]=e*Math.sin((v+o)*c)*Math.sin(c*(p+i)),d[0]=e*Math.sin((v+o)*c)*Math.cos(p*c),d[1]=e*Math.cos((v+o)*c),d[2]=e*Math.sin((v+o)*c)*Math.sin(p*c),f[0]=e*Math.sin(v*c)*Math.cos(c*p),f[1]=e*Math.cos(v*c),f[2]=e*Math.sin(v*c)*Math.sin(c*p),m[0]=e*Math.sin(v*c)*Math.cos(c*(p+i)),m[1]=e*Math.cos(v*c),m[2]=e*Math.sin(v*c)*Math.sin(c*(p+i)),l.positions[3*(h+0)+0]=u[0],l.positions[3*(h+0)+1]=u[1],l.positions[3*(h+0)+2]=u[2],l.positions[3*(h+1)+0]=d[0],l.positions[3*(h+1)+1]=d[1],l.positions[3*(h+1)+2]=d[2],l.positions[3*(h+2)+0]=f[0],l.positions[3*(h+2)+1]=f[1],l.positions[3*(h+2)+2]=f[2],l.positions[3*(h+3)+0]=m[0],l.positions[3*(h+3)+1]=m[1],l.positions[3*(h+3)+2]=m[2],vec3.normalize(u,u),vec3.normalize(d,d),vec3.normalize(f,f),vec3.normalize(m,m),l.normals[3*(h+0)+0]=u[0],l.normals[3*(h+0)+1]=u[1],l.normals[3*(h+0)+2]=u[2],l.normals[3*(h+1)+0]=d[0],l.normals[3*(h+1)+1]=d[1],l.normals[3*(h+1)+2]=d[2],l.normals[3*(h+2)+0]=f[0],l.normals[3*(h+2)+1]=f[1],l.normals[3*(h+2)+2]=f[2],l.normals[3*(h+3)+0]=m[0],l.normals[3*(h+3)+1]=m[1],l.normals[3*(h+3)+2]=m[2],l.texCoords2D[0][2*(h+0)+0]=c*(p+i)/(2*Math.PI),l.texCoords2D[0][2*(h+0)+1]=(v+o)*c/Math.PI,l.texCoords2D[0][2*(h+1)+0]=p*c/(2*Math.PI),l.texCoords2D[0][2*(h+1)+1]=(v+o)*c/Math.PI,l.texCoords2D[0][2*(h+2)+0]=c*p/(2*Math.PI),l.texCoords2D[0][2*(h+2)+1]=v*c/Math.PI,l.texCoords2D[0][2*(h+3)+0]=c*(p+i)/(2*Math.PI),l.texCoords2D[0][2*(h+3)+1]=v*c/Math.PI,h+=4;l.calculateTangents(),l.recalculateBounds(),s.addSubmesh(l,n);var g=new Node("Sphere");return g.addComponent(new MeshComponent(s)),g.addComponent(new MeshRendererComponent),g},cone:function(e,t,r,n){if(e<=0)throw"Primitives.cone: invalid cone radius";if(0==t)throw"Primitives.cone: cannot create a cone with zero height";if(r<2)throw"Primitives.cone: invalid slices (slices<2)";var i=360/r,o=vec3.fromValues(0,t/2,0),a=vec3.fromValues(0,-t/2,0),s=360/i*6,l=new Mesh,c=new Submesh;c.positions=new Float32Array(3*s),c.normals=new Float32Array(3*s),c.texCoords2D=[new Float32Array(2*s)];for(var h=Math.PI/180,u=vec3.fromValues(a[0],.5*t-(e*e+t*t)/t,a[2]),d=0,f=vec3.create(),m=0;m<360;m+=i){c.faces.push(d+0,d+1,d+2),vec3.set(f,0,-1,0),c.positions[3*d+0]=e*Math.sin(m*h),c.positions[3*d+1]=a[1],c.positions[3*d+2]=e*Math.cos(m*h),c.normals[3*d+0]=f[0],c.normals[3*d+1]=f[1],c.normals[3*d+2]=f[2],c.texCoords2D[0][2*d+0]=m/360,c.texCoords2D[0][2*d+1]=1,d++,c.positions[3*d+0]=e*Math.sin((m+i)*h),c.positions[3*d+1]=a[1],c.positions[3*d+2]=e*Math.cos((m+i)*h),c.normals[3*d+0]=f[0],c.normals[3*d+1]=f[1],c.normals[3*d+2]=f[2],c.texCoords2D[0][2*d+0]=(m+i)/360,c.texCoords2D[0][2*d+1]=1,d++,c.positions[3*d+0]=a[0],c.positions[3*d+1]=a[1],c.positions[3*d+2]=a[2],c.normals[3*d+0]=f[0],c.normals[3*d+1]=f[1],c.normals[3*d+2]=f[2],c.texCoords2D[0][2*d+0]=m/360,c.texCoords2D[0][2*d+1]=0,d++,c.faces.push(d+0,d+1,d+2);var v=vec3.fromValues(e*Math.sin(m*h),a[1],e*Math.cos(m*h)),p=vec3.fromValues(e*Math.sin((m+i)*h),a[1],e*Math.cos((m+i)*h)),g=vec3.fromValues(o[0],o[1],o[2]);vec3.sub(f,v,u),vec3.normalize(f,f),c.positions[3*(d+0)+0]=v[0],c.positions[3*(d+0)+1]=v[1],c.positions[3*(d+0)+2]=v[2],c.normals[3*(d+0)+0]=f[0],c.normals[3*(d+0)+1]=f[1],c.normals[3*(d+0)+2]=f[2],c.texCoords2D[0][2*(d+0)+0]=m/360,c.texCoords2D[0][2*(d+0)+1]=1,vec3.sub(f,p,u),vec3.normalize(f,f),c.positions[3*(d+1)+0]=p[0],c.positions[3*(d+1)+1]=p[1],c.positions[3*(d+1)+2]=p[2],c.normals[3*(d+1)+0]=f[0],c.normals[3*(d+1)+1]=f[1],c.normals[3*(d+1)+2]=f[2],c.texCoords2D[0][2*(d+1)+0]=(m+i)/360,c.texCoords2D[0][2*(d+1)+1]=1,vec3.set(f,0,1,0),c.positions[3*(d+2)+0]=g[0],c.positions[3*(d+2)+1]=g[1],c.positions[3*(d+2)+2]=g[2],c.normals[3*(d+2)+0]=f[0],c.normals[3*(d+2)+1]=f[1],c.normals[3*(d+2)+2]=f[2],c.texCoords2D[0][2*(d+2)+0]=m/360,c.texCoords2D[0][2*(d+2)+1]=0,d+=3}c.calculateTangents(),c.recalculateBounds(),l.addSubmesh(c,n);var x=new Node("Cone");return x.addComponent(new MeshComponent(l)),x.addComponent(new MeshRendererComponent),x},text:function(e,t){var r=new Node("Text");return r.addComponent(new TextComponent(e,t)),r.addComponent(new TextRendererComponent),r},canvasBoard:function(e,t){var r=new Node("Text");return r.addComponent(new CanvasBoardComponent(e,t)),r.addComponent(new CanvasBoardRendererComponent),r}},CollisionOctreeNode=FrakClass.extend({init:function(e,t,r){this.parent=!1,this.depth=0,this.subnodes=!1,this.bounds=!1,r?(this.parent=r,this.root=r.root,this.depth=r.depth+1):(this.maxDepth=3,(this.root=this).nodes={},this.submeshes={},this.cache=[vec3.create(),vec3.create(),vec3.create(),vec3.create(),vec3.create()]),this.faces=!1,this.setSize(e,t)},clone:function(e){var t=new CollisionOctreeNode(this.bounds.center,this.bounds.size[0],e||!1);if(t.depth=this.depth,this.nodes)for(var r in t.nodes={},this.nodes)t.nodes[r]=this.nodes[r];if(this.submeshes)for(var n in t.submeshes={},this.submeshes)t.submeshes[n]=this.submeshes[n];if(t.faces=this.faces,this.subnodes){t.subnodes=[];for(var i=0;i<this.subnodes.length;i++)t.subnodes.push(this.subnodes[i].clone(t))}return t},getNodeID:function(){var e="/",t="root";if(this.parent)for(var r in e=this.parent.getNodeID(),this.parent.subnodes)if(this.parent.subnodes[r]===this){t=r;break}return"{0}{1}/".format(e,t)},setSize:function(e,t){this.bounds=new BoundingBox(e,[t,t,t])},isLeaf:function(){return!1===this.subnodes},hasGeometry:function(){return!1!==this.faces},subdivide:function(){this.subnodes=[];var e=.5*this.bounds.size[0],t=.5*e,r=vec3.create();this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[t,t,t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[-t,t,t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[t,-t,t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[-t,-t,t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[t,t,-t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[-t,t,-t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[t,-t,-t]),e,this)),this.subnodes.push(new CollisionOctreeNode(vec3.add(r,this.bounds.center,[-t,-t,-t]),e,this))},optimize:function(){if(!this.isLeaf()){for(var e in this.subnodes)this.subnodes[e].optimize();var t=0;for(e=0;e<this.subnodes.length;e++)!this.subnodes[e].hasGeometry()&&this.subnodes[e].isLeaf()&&t++;8==t&&(delete this.subnodes,this.subnodes=!1)}},rayIntersectBounds:function(e){var t=e.getDirection(this.root.cache[0]),r=this.root.cache[1],n=this.root.cache[2];t[0]=1/t[0],t[1]=1/t[1],t[2]=1/t[2],r[0]=(this.bounds.min[0]-e.origin[0])*t[0],n[0]=(this.bounds.max[0]-e.origin[0])*t[0],r[1]=(this.bounds.min[1]-e.origin[1])*t[1],n[1]=(this.bounds.max[1]-e.origin[1])*t[1],r[2]=(this.bounds.min[2]-e.origin[2])*t[2],n[2]=(this.bounds.max[2]-e.origin[2])*t[2];var i=Math.max(Math.min(r[0],n[0]),Math.min(r[1],n[1]),Math.min(r[2],n[2])),o=Math.min(Math.max(r[0],n[0]),Math.max(r[1],n[1]),Math.max(r[2],n[2]));return!(o<0||o<i)&&(e.infinite?i:!(i*i>vec3.sqrDist(e.origin,e.destination)&&(e.origin[0]<this.bounds.min[0]||e.origin[1]<this.bounds.min[1]||e.origin[2]<this.bounds.min[2]||e.origin[0]>this.bounds.max[0]||e.origin[1]>this.bounds.max[1]||e.origin[2]>this.bounds.max[2])&&(e.destination[0]<this.bounds.min[0]||e.destination[1]<this.bounds.min[1]||e.destination[2]<this.bounds.min[2]||e.destination[0]>this.bounds.max[0]||e.destination[1]>this.bounds.max[1]||e.destination[2]>this.bounds.max[2]))&&i)},rayIntersectGeometry:function(e,t){if(!this.hasGeometry())return!1;var r={submesh:!1,node:!1,t:1/0,normal:vec3.create()},n=this.root.cache[0],i=this.root.cache[1],o=this.root.cache[2],a=mat4.create();for(var s in this.faces){var l=e.clone();mat4.isIdentity(this.root.nodes[s].transform.absolute)||(mat4.invert(a,this.root.nodes[s].transform.absolute),l.transform(a));var c=this.root.nodes[s].getComponent(MeshRendererComponent);for(var h in this.faces[s]){var u;if(c)for(var d in c.meshRenderers)if(c.meshRenderers[d].submesh==this.root.submeshes[h]){u=c.meshRenderers[d].visible;break}var f=this.faces[s][h],m=this.root.submeshes[h].positions;for(d=0;d<f.length;d+=3){n[0]=m[3*f[d]],n[1]=m[3*f[d]+1],n[2]=m[3*f[d]+2],i[0]=m[3*f[d+1]],i[1]=m[3*f[d+1]+1],i[2]=m[3*f[d+1]+2],o[0]=m[3*f[d+2]],o[1]=m[3*f[d+2]+1],o[2]=m[3*f[d+2]+2];var v=l.intersectTriangleDistanceOnly(n,i,o);!1!==v&&v<r.t&&(u||t)&&(r.t=v,r.submesh=this.root.submeshes[h],r.node=this.root.nodes[s],vec3.cross(r.normal,vec3.subtract(this.root.cache[3],i,n),vec3.subtract(this.root.cache[4],o,n)),vec3.normalize(r.normal,r.normal))}}}return r},getNodesWithGeometry:function(e,t){var r=this.rayIntersectBounds(e);if(!1!==r){if(this.hasGeometry()){for(var n=0;n<t.length&&!(t[n].t>r);n++);t.splice(n,0,{t:r,octreeNode:this})}if(!this.isLeaf())for(n=0;n<this.subnodes.length;n++)this.subnodes[n].getNodesWithGeometry(e,t)}},getNearestRayCollision:function(e,t,r){var n=[];this.getNodesWithGeometry(e,n);for(var i={t:1/0,octreeNode:!1,submesh:!1,node:!1,normal:!1},o=0;o<n.length;o++)if(!(!1!==i.octreeNode&&n[o].depth==i.octreeNode.depth&&n[o].t>i.t)){var a=n[o].octreeNode.rayIntersectGeometry(t,r);a.t<i.t&&(i.t=a.t,i.submesh=a.submesh,i.octreeNode=n[o].octreeNode,i.node=a.node,i.normal=a.normal)}return i}}),Component=Serializable.extend({init:function(){this._super(),this.updatePasses=1,this.started=!1,this.node=!1,this.enable()},excluded:function(){return["started","node"]},getScene:function(){return this.node.scene},enable:function(){this.enabled||this.onEnable(),this.enabled=!0},disable:function(){this.enabled&&this.onDisable(),this.enabled=!1},instantiate:function(){return this.clone()},onAdd:function(e){},onRemove:function(e){},onAddScene:function(e){},onRemoveScene:function(e){},onEnable:function(){},onDisable:function(){},onStart:function(e,t){},start:function(e,t){this.onStart(e,t)},onLoad:function(e,t){},onEnd:function(e,t){},onPreRender:function(e,t){},onPostRender:function(e,t){},onUpdateTransform:function(e){},onUpdate:function(e,t){}}),Transform=Component.extend({init:function(e){this._super(),this.relative=e||mat4.identity(mat4.create()),this.absolute=mat4.copy(mat4.create(),this.relative)},onAdd:function(e){e.transform=this},type:function(){return"Transform"},excluded:function(){return this._super().concat(["absolute"])},calculateRelativeFromAbsolute:function(e){if(e){var t=mat4.invert(mat4.create(),e);mat4.multiply(this.relative,this.absolute,t)}else mat4.copy(this.relative,this.absolute)},getPosition:function(e){return e||(e=vec3.create()),mat4.translation(e,this.absolute)},getRelativePosition:function(e){return e||(e=vec3.create()),mat4.translation(e,this.relative)},setPosition:function(e){mat4.fromRotationTranslation(this.relative,quat.fromMat4(quat.create(),this.relative),e)},getRotation:function(e){return e||(e=quat.create()),quat.fromMat4(e,this.absolute)},translate:function(e){this.relative=mat4.translate(this.relative,this.relative,e)},rotate:function(e,t){this.relative=mat4.rotate(this.relative,this.relative,e,t)},scale:function(e){this.relative=mat4.scale(this.relative,this.relative,e)},clone:function(){var e=new Transform;return e.relative=mat4.clone(this.relative),e.absolute=mat4.clone(this.absolute),e}}),CameraComponent=Component.extend({init:function(e,t){if(!e||!t)throw"CameraComponent can be initialized only with given viewMatrix and projectionMatrix. Normally one should create OrthoCamera or PerspectiveCamera instead";this._super(),this.camera=new Camera(e,t,new ForwardRenderStage)},excluded:function(){return this._super().concat(["camera"])},type:function(){return"CameraComponent"},onAddScene:function(e){e.scene.cameras.push(this.camera),e.scene.cameras.sort(function(e,t){return e.order-t.order}),this.useCameraViewMatrix()},onRemoveScene:function(e){for(var t=e.scene.cameras,r=0;r<t.length;r++)t[r]==this.camera&&(t.splice(r,1),r--)},onStart:function(e,t){this.initRenderStage(e,t)},onUpdateTransform:function(e){this.node.transform&&mat4.invert(this.camera.viewMatrix,this.node.transform.absolute)},lookAt:function(e,t){t||(t=[0,1,0]),mat4.lookAt(this.camera.viewMatrix,this.camera.getPosition(),e,t),this.useCameraViewMatrix()},setPosition:function(e){this.camera.setPosition(e),this.useCameraViewMatrix()},center:function(e){this.camera.center(e),this.useCameraViewMatrix()},fitToView:function(e){this.camera.fitToView(e),this.useCameraViewMatrix()},fitNodeToView:function(e){var r=new BoundingBox;e.onEachChild(function(e){if(e.getComponent(MeshComponent)){var t=e.getComponent(MeshComponent);r.encapsulateBox(t.mesh.boundingBox.transform(e.transform.absolute))}}),this.fitToView(r)},screenPointToViewportPoint:function(e){var t=vec2.create(),r=vec2.create();this.camera.target instanceof TargetScreen&&(r=this.camera.target.getPosition());var n=this.camera.target.getSize();return Math.abs(n[0])<EPSILON||Math.abs(n[1])<EPSILON||(t[0]=(e[0]-r[0])/n[0],t[1]=(e[1]-r[1])/n[1]),t},unprojectScreenPoint:function(e){var t=this.node.scene.camera.target.getSize(),r=vec2.create(),n=vec2.fromValues(e[0]-r[0],t[1]-e[1]+r[1]);if(Math.abs(t[0])<EPSILON||Math.abs(t[1])<EPSILON)return!1;var i=vec4.fromValues(n[0]/t[0]*2-1,n[1]/t[1]*2-1,2*e[2]-1,1),o=mat4.mul(mat4.create(),this.camera.projectionMatrix,this.camera.viewMatrix);return!!mat4.invert(o,o)&&(vec4.transformMat4(i,i,o),!(Math.abs(i[3])<EPSILON)&&(i[3]=1/i[3],vec3.fromValues(i[0]*i[3],i[1]*i[3],i[2]*i[3])))},screenPointToRay:function(e){var t=this.unprojectScreenPoint([e[0],e[1],0]),r=this.unprojectScreenPoint([e[0],e[1],1]);return!(!t||!r)&&new Ray(t,r)},worldToScreenPoint:function(e,t){t||(t=vec2.create());var r=this.camera.target.getSize(),n=mat4.mul(mat4.create(),this.camera.projectionMatrix,this.camera.viewMatrix),i=vec4.fromValues(e[0],e[1],e[2],1);return vec4.transformMat4(i,i,n),i[0]/=i[3],i[1]/=i[3],i[2]/=i[3],t[0]=Math.round((i[0]+1)/2*r[0]),t[1]=Math.round((1-i[1])/2*r[1]),t},useCameraViewMatrix:function(){this.node.transform&&(this.node.transform.absolute=mat4.invert(mat4.create(),this.camera.viewMatrix),this.node.calculateRelativeFromAbsolute())},initRenderStage:function(e,t){if(this.camera.target instanceof TargetScreen){var r=e.canvas;this.camera.target.setSize(r.width,r.height)}"forward"==t.options.renderer?("blended"!=t.options.transparencyMode&&"stochastic"!=t.options.transparencyMode||this.camera.renderStage.addStage(new OITPostProcess),!0===t.options.ssao&&this.camera.renderStage.addStage(new SSAOPostProcess)):"deferred"==t.options.renderer&&(delete this.camera.renderStage,this.camera.renderStage=new DeferredRenderStage,this.camera.renderStage.addStage(new OITPostProcess)),!0===t.options.antialias&&this.camera.renderStage.addStage(new AntiAliasPostProcess),this.camera.renderStage.start(e,t,this.camera)},onContextRestored:function(e){this.camera.renderStage=new ForwardRenderStage,this.initRenderStage(e,e.engine)}}),PerspectiveCamera=CameraComponent.extend({init:function(e,t,r,n){e||(e=45),r||(r=.3),n||(n=1e3),t||(t=4/3),this.fov=e,this.aspect=t,this.near=r,this.far=n;var i=mat4.create();mat4.lookAt(i,[0,0,-100],[0,0,0],[0,1,0]),this._super(i,this.calculatePerspective()),this.camera.near=this.near,this.camera.far=this.far},type:function(){return"PerspectiveCamera"},onStart:function(e,t){this.aspect||this.setAspectRatio(e.canvas.width/e.canvas.height),this._super(e,t)},setClipPlanes:function(e,t){this.near=e,this.far=t,this.camera.near=this.near,this.camera.far=this.far,this.camera.projectionMatrix=this.calculatePerspective()},setAspectRatio:function(e){this.aspect=e,this.camera.projectionMatrix=this.calculatePerspective()},setVerticalFieldOfView:function(e){this.fov=e,this.camera.projectionMatrix=this.calculatePerspective()},setHorizontalFieldOfView:function(e){e=e*(2*Math.PI)/360;var t=Math.tan(e/2)/this.aspect;this.fov=2*Math.atan(t)*180/Math.PI,this.camera.projectionMatrix=this.calculatePerspective()},getVerticalFieldOfView:function(){return 180*this.camera.getFieldOfView()/Math.PI},getHorizontalFieldOfView:function(){var e=Math.tan(.5*this.camera.getFieldOfView()),t=this.aspect*e;return 180*(2*Math.atan(t))/Math.PI},calculatePerspective:function(){var e=mat4.create(),t=this.aspect;return t||(t=1),mat4.perspective(e,this.fov*(2*Math.PI)/360,t,this.near,this.far),e}}),OrthoCamera=CameraComponent.extend({init:function(e,t,r,n,i,o){e||(e=0),t||(t=512),r||(r=512),n||(n=0),i||(i=-100),o||(o=100);var a=mat4.ortho(mat4.create(),e,t,r,n,i,o);this._super(mat4.identity(mat4.create()),a)},type:function(){return"OrthoCamera"}}),MeshComponent=Component.extend({init:function(e){this.mesh=e,this._super()},type:function(){return"MeshComponent"},instantiate:function(){var e=this._super();return e.mesh=this.mesh,e}}),RendererComponent=Component.extend({init:function(){this._super(),this.castShadows=!0,this.receiveShadows=!0,this.lightContribution=1,this.reflectivity=0},type:function(){return"RendererComponent"},instantiate:function(){var e=this._super();return e.castShadows=this.castShadows,e.receiveShadows=this.receiveShadows,e.lightContribution=this.lightContribution,e.reflectivity=this.reflectivity,e},onContextRestored:function(e){}}),MeshRendererComponent=RendererComponent.extend({init:function(){this.meshRenderers=[],this._super()},type:function(){return"MeshRendererComponent"},excluded:function(){return this._super().concat(["meshRenderers"])},createRenderer:function(e,t,r,n){return new SubmeshRenderer(e,t,r,n)},onStart:function(e,t){this.updateRenderers(e,t)},addRenderers:function(o,e){var a=this;this.node.onEachComponent(function(e){if(e instanceof MeshComponent)for(var t=0;t<e.mesh.submeshes.length;t++){var r=e.mesh.submeshes[t],n=e.mesh.getMaterial(r.materialIndex);if(n){if(0!=r.positions.length&&0!=r.faces.length){var i=a.createRenderer(o,a.node.transform.absolute,r,n);a.getScene().dynamicSpace.addRenderer(i),a.meshRenderers.push(i),a.enabled||(i.visible=!1)}}else console.warn("Failed to find submesh material: ",e.node.name,e.node)}})},removeRenderers:function(){for(var e=0;e<this.meshRenderers.length;e++)this.getScene().dynamicSpace.removeRenderer(this.meshRenderers[e])},updateRenderers:function(e,t){this.removeRenderers(),this.addRenderers(e,t)},onEnd:function(e){this.removeRenderers()},onUpdateTransform:function(e){for(var t,r=this.castShadows,n=this.node.layer,i=this.receiveShadows,o=this.lightContribution,a=this.reflectivity,s=0,l=this.meshRenderers.length;s<l;++s)(t=this.meshRenderers[s]).layer=n,t.castShadows=r,t.receiveShadows=i,t.lightContribution=o,t.reflectivity=a,t.setMatrix(e)},onEnable:function(){for(var e=0;e<this.meshRenderers.length;++e)this.meshRenderers[e].visible=!0},onDisable:function(){for(var e=0;e<this.meshRenderers.length;++e)this.meshRenderers[e].visible=!1},getBoundingBox:function(e){for(var t=new BoundingBox,r=0;r<this.meshRenderers.length;++r)e&&!this.meshRenderers[r].visible||t.encapsulateBox(this.meshRenderers[r].globalBoundingBox);return t},getBoundingSphere:function(e){for(var t=new BoundingSphere,r=0;r<this.meshRenderers.length;++r)e&&!this.meshRenderers[r].visible||t.encapsulateSphere(this.meshRenderers[r].globalBoundingSphere);return t},setTransparency:function(e){e=!!e;for(var t=0;t<this.meshRenderers.length;++t)this.meshRenderers[t].transparent=e},getSubmeshRenderer:function(e){for(var t=0;t<this.meshRenderers.length;++t)if(this.meshRenderers[t].submesh===e)return this.meshRenderers[t];return!1},onContextRestored:function(e){this._super(e);for(var t=0;t<this.meshRenderers.length;++t)this.meshRenderers[t].onContextRestored(e)}}),SkyboxComponent=Component.extend({init:function(){this._super()},type:function(){return"SkyboxComponent"},setup:function(e,t,r){this.cubeTexture=e.texturesManager.addCube([r[2].source,r[3].source,r[1].source,r[0].source,r[4].source,r[5].source]);var n=1;t.scene&&t.scene.camera&&t.scene.camera.far&&(n=Math.sqrt(t.scene.camera.far*t.scene.camera.far/3)),this.meshNode=Primitives.box([0,0,0],[n,n,n],new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("skybox")),{},[new Sampler("skybox0",this.cubeTexture)])),this.node.addNode(this.meshNode);var i=this.meshNode.getComponent(MeshRendererComponent);i.castShadows=!1,i.disable(),i.addRenderers(t.context,t)}}),TextRendererComponent=MeshRendererComponent.extend({type:function(){return"TextRendererComponent"},onContextRestored:function(e){this._super(e);var t=this.node.getComponent(TextComponent);t&&t.updateText()}}),CanvasBoardRendererComponent=MeshRendererComponent.extend({type:function(){return"CanvasBoardRendererComponent"}}),TextComponent=MeshComponent.extend({init:function(e,t){this._super(new Mesh),this.context=!1,this.material=!1,this.texture=!1,this.wrap=t?0:t,this.sampler=new Sampler("diffuse0",null),this.lines=[],this.color=new Color(0,0,0,1),this.fontSize=56,this.style="normal",this.variant="normal",this.weight="normal",this.family="monospace",this.backgroundColor=new Color(0,0,0,0),this.outline=!0,this.outlineColor=new Color(1,1,1,1),this.outlineWidth=5,this.textLength=0,this.setText(e)},excluded:function(){return this._super().concat(["material","texture","sampler","context"])},type:function(){return"TextComponent"},applyTextStyles:function(e){this.outline&&(e.strokeStyle=this.outlineColor.toString(),e.lineWidth=this.outlineWidth),e.fillStyle=this.color.toString(),e.textBaseline="middle",e.textAlign="center",e.font=this.font},updateFont:function(){this.font="","normal"!=this.style&&(this.font+=this.style+" "),"normal"!=this.variant&&(this.font+=this.variant+" "),"normal"!=this.weight&&(this.font+=this.weight+" "),this.font+=this.fontSize+"px "+this.family},updateText:function(){if(this.context&&0!=this.text.length){var e=this.node.getComponent(TextRendererComponent);if(e){this.updateFont();var t=document.createElement("canvas"),r=t.getContext("2d");this.applyTextStyles(r),this.wrap?this.lines=this.getLines(this.text):this.textLength=r.measureText(this.text).width,t.width=nextHighestPowerOfTwo(r.measureText(this.text).width),t.height=nextHighestPowerOfTwo(2*this.fontSize),r.fillStyle=this.backgroundColor.toString(),r.fillRect(0,0,t.width,t.height),this.applyTextStyles(r),this.outline&&r.strokeText(this.text,t.width/2,t.height/2),r.fillText(this.text,t.width/2,t.height/2),this.texture.setImage(this.context,t);var n=t.width/t.height,i=this.mesh.submeshes[0];if(i.positions[0]=-.5*n,i.positions[1]=-.5,i.positions[3]=-.5*n,i.positions[4]=.5,i.positions[6]=.5*n,i.positions[7]=.5,i.positions[9]=.5*n,i.positions[10]=-.5,i.recalculateBounds(),0<e.meshRenderers.length)e.meshRenderers[0].buffer.update("position",i.positions)}}},onStart:function(e,t){this.context=e,this.material=new Material(t.assetsManager.addShaderSource("transparent"),{diffuse:new UniformColor({r:1,g:1,b:1,a:1})},[this.sampler]),this.material.shader.requirements.transparent=!0,this.material.name="TextComponentMaterial",this.texture=new Texture(e),this.texture.mipmapped=!0,this.texture.clampToEdge=!0,this.sampler.texture=this.texture;var r=new Submesh;r.positions=new Float32Array(12),r.normals=[0,0,1,0,0,1,0,0,1,0,0,1],r.texCoords2D=[[0,0,0,1,1,1,1,0]],r.faces=[0,1,2,0,2,3],r.recalculateBounds(),this.mesh.addSubmesh(r,this.material),this.updateText()},setText:function(e){this.text=String(e),this.updateText()},getLines:function(e,t){var r=e.split(" "),n=[],i=r[0];if(t<=0)return r;if(r.length<=t)return r;for(var o=1;o<r.length;o++)i.length>e.length/t?(n.push(i),i=""):i+=" "+r[o];return n.push(i),n},onContextRestored:function(e){this.texture&&delete this.texture,this.texture=new Texture(e),this.texture.mipmapped=!0,this.texture.clampToEdge=!0,this.sampler.texture=this.texture}}),LineRendererComponent=RendererComponent.extend({init:function(e,t){this._super(),this.lightContribution=0,this.receiveShadows=!1,this.castShadows=!1,this.defaultColor=e instanceof Color?(this.color=new UniformColor(e),e):(this.color=new UniformColor(new Color(.5,.5,.5,1)),new Color),this.defaultWidth=t||1,this.maxWidth=this.defaultWidth,this.roundCapPoints=Math.pow(2,Math.max(1,Math.round(Math.log2(this.defaultWidth))-2)),this.renderer=null,this.damaged=!0,this.material=new Material(null,{viewport:new UniformVec2},[]),this.overlay=!1,this.lines=[]},type:function(){return"LineRendererComponent"},excluded:function(){return this._super().concat(["damaged","renderer","material"])},onStart:function(e,t){this.material.shader=t.assetsManager.addShaderSource("lines"),this.material.samplers=[],vec2.copy(this.material.uniforms.viewport.value,t.scene.camera.target.size),this.renderer||(this.renderer=new LineRenderer(e,this.node.transform.absolute,this.material)),this.getScene().dynamicSpace.addRenderer(this.renderer)},onEnd:function(e){this.renderer&&this.getScene().dynamicSpace.removeRenderer(this.renderer),delete this.renderer,this.renderer=null},onUpdate:function(e){this.damaged&&this.rebuild(e.context)},onUpdateTransform:function(e){this.renderer&&(this.renderer.layer=this.node.layer,this.renderer.castShadows=this.castShadows,this.renderer.receiveShadows=this.receiveShadows,this.renderer.lightContribution=this.lightContribution,this.renderer.setMatrix(e))},onEnable:function(){this.renderer&&(this.renderer.visible=!0)},onDisable:function(){this.renderer&&(this.renderer.visible=!1)},onPreRender:function(e,t){vec2.copy(this.material.uniforms.viewport.value,t.target.size)},onPostRender:function(e,t){this.overlay&&this.renderer&&this.enabled&&(e.projection.push(),e.modelview.push(),e.projection.load(t.projectionMatrix),e.modelview.load(t.viewMatrix),e.modelview.multiply(this.node.transform.absolute),this.material.bind(),this.renderer.renderGeometry(e,this.material.shader),this.material.unbind(),e.projection.pop(),e.modelview.pop())},rebuild:function(e){this.renderer||(this.renderer=new LineRenderer(e,this.node.transform.absolute,this.material));var s=[],l=[],t=[],r=[],n=[],i=[],c=this.roundCapPoints,o=function(){var e=s.length/3;s.push(0,-.5,0),s.push(0,.5,0),s.push(0,.5,1),s.push(0,-.5,1);var t=4;l.push(e,e+1,e+2,e,e+2,e+3),s.push(0,0,0),s.push(0,0,1),t+=2;for(var r=0;r<2;r++){var n=3*Math.PI/2-r*Math.PI;s.push(.5*Math.cos(n),.5*Math.sin(n),r);for(var i=++t-1,o=1;o<c+1;o++){var a=3*Math.PI/2-(o+c*r)/c*Math.PI;s.push(.5*Math.cos(a),.5*Math.sin(a),r),l.push(e+4+r,e+i+o-1,e+i+o),t++}}return t};if(this.renderer.instanced){if(this.lines.length){o();for(a=0;a<this.lines.length;a++)t.push(this.lines[a].a[0],this.lines[a].a[1],this.lines[a].a[2]),r.push(this.lines[a].b[0],this.lines[a].b[1],this.lines[a].b[2]),i.push(this.lines[a].color.r,this.lines[a].color.g,this.lines[a].color.b,this.lines[a].color.a),n.push(this.lines[a].width)}}else for(var a=0;a<this.lines.length;a++)for(var h=o(),u=0;u<h;u++)t.push(this.lines[a].a[0],this.lines[a].a[1],this.lines[a].a[2]),r.push(this.lines[a].b[0],this.lines[a].b[1],this.lines[a].b[2]),i.push(this.lines[a].color.r,this.lines[a].color.g,this.lines[a].color.b,this.lines[a].color.a),n.push(this.lines[a].width);this.renderer.count=this.lines.length,this.renderer.buffer.updateFaces(l);var d=this,f=function(e,t,r,n){d.renderer.buffer.has(e)?d.renderer.buffer.update(e,t):d.renderer.buffer.add(e,t,r,n)};f("position",s,3,0),f("pointA",t,3,1),f("pointB",r,3,1),f("width",n,1,1),f("color",i,4,1),this.damaged=!1},clear:function(e){this.lines=[],this.damaged=!0},addLine:function(e,t,r,n){var i=this.lines.length;return this.lines.push({a:e,b:t,color:r||this.defaultColor,width:n||this.defaultWidth}),this.damaged=!0,n&&n>this.maxWidth&&(this.maxWidth=n,this.roundCapPoints=Math.pow(2,Math.max(1,Math.round(Math.log2(n))-2))),{vertexOffset:i}},addLines:function(e){var t=this;return e.map(function(e){return t.addLine(e.a,e.b,e.color,e.width)})},updateLine:function(e,t,r,n,i){(e=this.lines[e.vertexOffset]).a=t,e.b=r,e.color=n||e.color,e.width=i||e.width,this.damaged=!0},addTriangle:function(e,t,r){this.addLine(e,t),this.addLine(t,r),this.addLine(r,e),this.damaged=!0},addBox:function(e){if(!(e instanceof BoundingBox))throw"LineRendererComponent.addBox expects box to be of type BoundingBox";this.addLine(e.min,[e.min[0],e.min[1],e.max[2]]),this.addLine(e.min,[e.min[0],e.max[1],e.min[2]]),this.addLine(e.min,[e.max[0],e.min[1],e.min[2]]),this.addLine(e.max,[e.max[0],e.min[1],e.max[2]]),this.addLine(e.max,[e.max[0],e.max[1],e.min[2]]),this.addLine(e.max,[e.min[0],e.max[1],e.max[2]]),this.addLine([e.min[0],e.max[1],e.min[2]],[e.min[0],e.max[1],e.max[2]]),this.addLine([e.min[0],e.max[1],e.max[2]],[e.min[0],e.min[1],e.max[2]]),this.addLine([e.min[0],e.min[1],e.max[2]],[e.max[0],e.min[1],e.max[2]]),this.addLine([e.max[0],e.min[1],e.max[2]],[e.max[0],e.min[1],e.min[2]]),this.addLine([e.max[0],e.min[1],e.min[2]],[e.max[0],e.max[1],e.min[2]]),this.addLine([e.max[0],e.max[1],e.min[2]],[e.min[0],e.max[1],e.min[2]]),this.damaged=!0},addGrid:function(e,t,r){var n=[t[0]/2,t[1]/2];r||(r=[1,1]);for(var i=-n[0];i<=n[0];i++)this.addLine([i*r[0]+e[0],e[1],-n[1]*r[1]+e[2]],[i*r[0]+e[0],e[1],n[1]*r[1]+e[2]]);for(i=-n[1];i<=n[1];i++)this.addLine([-n[0]*r[0]+e[0],e[1],i*r[1]+e[2]],[n[0]*r[0]+e[0],e[1],i*r[1]+e[2]]);this.damaged=!0},onContextRestored:function(e){this._super(e),this.renderer&&(this.damaged=!0,delete this.renderer.buffer,this.renderer.buffer=new LinesRenderBuffer(e),this.rebuild(e))}}),CanvasBoardComponent=MeshComponent.extend({init:function(e,t){this._super(new Mesh),this.width=e,this.height=t||e,this.context=!1,this.material=!1,this.texture=!1,this.canvasContext=!1,this.canvas=!1,this.sampler=new Sampler("diffuse0",null)},excluded:function(){return this._super().concat(["material","texture","sampler","context"])},type:function(){return"CanvasBoardComponent"},createContext:function(){if(this.context){var e=this.node.getComponent(CanvasBoardRendererComponent);if(e){this.canvas=document.createElement("canvas"),this.canvasContext=this.canvas.getContext("2d"),this.canvas.width=this.width,this.canvas.height=this.height,this.canvasContext.fillStyle="white",this.canvasContext.fillRect(0,0,this.canvas.width,this.canvas.height);var t=this.mesh.submeshes[0];if(t.positions[0]=-.5,t.positions[1]=-.5,t.positions[3]=-.5,t.positions[4]=.5,t.positions[6]=.5,t.positions[7]=.5,t.positions[9]=.5,t.positions[10]=-.5,t.recalculateBounds(),this.texture.setImage(this.context,this.canvas),0<e.meshRenderers.length)e.meshRenderers[0].buffer.update("position",t.positions)}}},updateImage:function(){this.texture.setImage(this.context,this.canvas)},onStart:function(e,t){this.context=e,this.material=new Material(t.assetsManager.addShaderSource("transparent"),{diffuse:new UniformColor({r:1,g:1,b:1,a:1})},[this.sampler]),this.material.shader.requirements.transparent=!0,this.material.name="CanvasBoardMaterial",this.texture=new Texture(e),this.texture.mipmapped=!0,this.texture.clampToEdge=!0,this.sampler.texture=this.texture;var r=new Submesh;r.positions=new Float32Array(12),r.normals=[0,0,1,0,0,1,0,0,1,0,0,1],r.texCoords2D=[[0,0,0,1,1,1,1,0]],r.faces=[0,1,2,0,2,3],r.recalculateBounds(),this.mesh.addSubmesh(r,this.material),this.createContext()},getCanvasContext:function(){return this.canvasContext}}),Controller=Component.extend({init:function(){this._super(),this.delta=vec2.create(),this.dragDelta=vec2.create(),this.position=!1,this.oldPosition=!1,this.startDragPosition=!1,this.buttons=[!1,!1,!1]},excluded:function(){return this._super().concat(["delta","dragDelta","position","oldPosition","startDragPosition","buttons","keyStates"])},type:function(){return"Controller"},onAddScene:function(e){e.scene.engine.input.registerController(this)},onRemoveScene:function(e){e.scene.engine.input.unregisterController(this)},bind:function(e,t,r){this.node&&e&&t&&r&&this.node.scene.engine.input.bind(e,t,r)},getPriority:function(e){return 0},onStart:function(e,t){for(var r=0;r<this.buttons.length;r++)this.buttons[r]=!1},onUpdate:function(e){},onKeyStateChange:function(e,t){},onKeyDown:function(e){},onKeyUp:function(e){},onButtonDown:function(e,t,r){},onButtonUp:function(e,t,r){},onClick:function(e,t,r){},onMouseMove:function(e,t,r){},onMouseDown:function(e,t,r){this.buttons[t]=!0},onMouseUp:function(e,t,r){this.buttons[t]=!1}}),FlightController=Controller.extend({init:function(){this._super(),this.rotation=vec3.create(),this.velocity=vec3.fromValues(0,0,0),this.angularVelocity=vec3.fromValues(0,0,0),this.acceleration=.2,this.deceleration=.2,this.friction=.01,this.rotationAcceleration=.001,this.rotationFriction=.1,this.tmpRotation=quat.create(),this.tmpImpulse=vec3.create()},type:function(){return"FlightController"},onAdd:function(){this._super(),this.bind("W","accelerate",this),this.bind("S","decelerate",this),this.bind("A","strafeLeft",this),this.bind("D","strafeRight",this),this.bind("C","moveDown",this),this.bind("space","moveUp",this),this.bind("up_arrow","accelerate",this),this.bind("down_arrow","decelerate",this),this.bind("left_arrow","strafeLeft",this),this.bind("right_arrow","strafeRight",this)},accelerate:function(e){this.addLocalImpulse([0,0,-this.acceleration*e])},decelerate:function(e){this.addLocalImpulse([0,0,this.deceleration*e])},strafeLeft:function(e){this.addLocalImpulse([-this.deceleration*e,0,0])},strafeRight:function(e){this.addLocalImpulse([this.deceleration*e,0,0])},moveUp:function(e){this.addWorldImpulse([0,this.acceleration*e,0])},moveDown:function(e){this.addWorldImpulse([0,-this.acceleration*e,0])},addWorldImpulse:function(e){vec3.add(this.velocity,this.velocity,e)},addLocalImpulse:function(e){quat.fromMat4(this.tmpRotation,this.node.transform.absolute),vec3.transformQuat(this.tmpImpulse,e,this.tmpRotation),vec3.add(this.velocity,this.velocity,this.tmpImpulse)},onStep:function(e,t,r){return!0},onUpdate:function(e,t){this._super(e,t);var r=e.fps.getDelta(),n=1+this.friction*r;vec3.scale(this.velocity,this.velocity,1/n);var i=1+this.rotationFriction*r;vec3.scale(this.angularVelocity,this.angularVelocity,1/i);var o=vec3.scale(vec3.create(),this.velocity,r),a=vec3.scale(vec3.create(),this.angularVelocity,r);vec3.add(this.rotation,this.rotation,a);var s=quat.create();quat.rotateY(s,s,this.rotation[1]),quat.rotateX(s,s,this.rotation[0]);var l=mat4.translation(vec3.create(),this.node.transform.relative),c=vec3.add(vec3.create(),o,l);this.onStep(l,c,s)&&mat4.fromRotationTranslation(this.node.transform.relative,s,c)},onMouseMove:function(e,t,r){if(0===t){var n=vec3.create(),i=this.rotationAcceleration;vec3.scale(n,[-r[1],-r[0],0],i),vec3.add(this.angularVelocity,this.angularVelocity,n)}}}),OrbitController=FlightController.extend({init:function(){this._super(),this.target=new TypeReference("Transform"),this.panButton=2,this.rotateButton=0,this.position=vec3.create(),this.velocity=vec3.create(),this.pan=vec3.create(),this.minimumPan=[-100,-100,-100],this.maximumPan=[100,100,100],this.panXAxis=[1,0,0],this.panYAxis=[0,0,1],this.panSpeed=.05,this.rotation=vec3.create(),this.angularVelocity=vec3.create(),this.minimumPitch=-Math.PI/2.2,this.maximumPitch=0,this.rotationAcceleration=.012,this.rotationFriction=.1,this.lastPinch=0,this.zoomSpeed=1,this.doZoomIn=!1,this.doZoomOut=!1,this.distance=5,this.minimumDistance=2.5,this.maximumDistance=7.5,this.distanceSteps=4,this.direction=vec3.create(),this.cameraPosition=vec3.create(),this.targetPosition=vec3.create(),this.lookat=mat4.create(),this.tmpRotation=quat.create(),this.cbOnChange},excluded:function(){return this._super().concat(["velocity","angularVelocity","doZoomIn","doZoomOut","direction","cameraPosition","targetPosition","lookat"])},type:function(){return"OrbitController"},onAdd:function(){this._super(),this.bind("W","zoomIn",this),this.bind("S","zoomOut",this),this.bind("A","rotateLeft",this),this.bind("D","rotateRight",this),this.bind("E","rotateUp",this),this.bind("Q","rotateDown",this)},onChange:function(e,t){this.cbOnChange&&"function"==typeof this.cbOnChange&&this.cbOnChange(e,t)},getZoom:function(){return(this.distance-this.minimumDistance)/(this.maximumDistance-this.minimumDistance)},setZoom:function(e){e=Math.max(0,e);var t=this.maximumDistance-this.minimumDistance;this.distance=Math.min(this.minimumDistance+t*e,this.maximumDistance),this.onChange("distance",this.distance)},setDistance:function(e){this.distance=Math.min(Math.max(e,this.minimumDistance),this.maximumDistance),this.onChange("distance",this.distance)},zoomIn:function(e){this.enabled&&(e||(e=1),this.distance-=e*this.zoomSpeed*(this.maximumDistance-this.minimumDistance)/this.distanceSteps,this.distance<this.minimumDistance&&(this.distance=this.minimumDistance),this.onChange("distance",this.distance))},zoomOut:function(e){this.enabled&&(e||(e=1),this.distance+=e*this.zoomSpeed*(this.maximumDistance-this.minimumDistance)/this.distanceSteps,this.distance>this.maximumDistance&&(this.distance=this.maximumDistance),this.onChange("distance",this.distance,e*this.zoomSpeed*(this.maximumDistance-this.minimumDistance)/this.distanceSteps))},rotateLeft:function(e){this.accelerate([0,-this.rotationAcceleration,0],e)},rotateRight:function(e){this.accelerate([0,this.rotationAcceleration,0],e)},rotateUp:function(e){this.accelerate([this.rotationAcceleration,0,0],e)},rotateDown:function(e){this.accelerate([-this.rotationAcceleration,0,0],e)},accelerate:function(e,t){this.enabled&&(vec3.scale(e,e,t),vec3.add(this.angularVelocity,this.angularVelocity,e),this.onChange("accelerate",e))},onUpdate:function(e,t){this._super(e,t),this.target.isNull()||(vec3.add(this.rotation,this.rotation,this.angularVelocity),quat.identity(this.tmpRotation),quat.rotateY(this.tmpRotation,this.tmpRotation,this.rotation[1]),quat.rotateX(this.tmpRotation,this.tmpRotation,this.rotation[0]),vec3.set(this.direction,0,0,1),vec3.transformQuat(this.direction,this.direction,this.tmpRotation),vec3.scale(this.direction,this.direction,this.distance),mat4.translation(this.targetPosition,this.target.value.absolute),vec3.add(this.cameraPosition,this.targetPosition,this.direction),vec3.add(this.targetPosition,this.targetPosition,this.pan),vec3.add(this.cameraPosition,this.cameraPosition,this.pan),mat4.lookAt(this.lookat,this.cameraPosition,this.targetPosition,[0,1,0]),mat4.invert(this.node.transform.absolute,this.lookat),this.node.calculateRelativeFromAbsolute(),this.doZoomIn&&this.zoomIn(),this.doZoomOut&&this.zoomOut())},onMouseMove:function(e,t,r,n){!1!==this.rotateButton&&t==this.rotateButton&&this.rotate(r[1],r[0]),!1!==this.panButton&&t==this.panButton&&this.move(r[0],r[1])},onPan:function(e,t){this.move(t[0],t[1])},rotate:function(e,t){var r=vec3.create();vec3.scale(r,[-e,-t,0],this.rotationAcceleration),vec3.add(this.rotation,this.rotation,r),this.rotation[0]=Math.max(this.minimumPitch,this.rotation[0]),this.rotation[0]=Math.min(this.maximumPitch,this.rotation[0]),this.onChange("rotate",e,t)},move:function(e,t){var r=vec3.create();vec3.scale(r,this.panXAxis,-e),vec3.add(r,r,vec3.scale(vec3.create(),this.panYAxis,-t)),r=vec3.scale(r,r,this.distance/900);var n=quat.fromMat4(quat.create(),this.node.transform.absolute),i=vec3.fromValues(0,0,1);vec3.transformQuat(i,i,n);var o=Math.atan2(i[2],i[0]);o-=Math.PI/2,quat.identity(n),quat.rotateY(n,n,o),quat.conjugate(n,n),quat.normalize(n,n),vec3.transformQuat(r,r,n),vec3.add(this.pan,this.pan,r),this.pan[0]=Math.max(this.pan[0],this.minimumPan[0]),this.pan[1]=Math.max(this.pan[1],this.minimumPan[1]),this.pan[2]=Math.max(this.pan[2],this.minimumPan[2]),this.pan[0]=Math.min(this.pan[0],this.maximumPan[0]),this.pan[1]=Math.min(this.pan[1],this.maximumPan[1]),this.pan[2]=Math.min(this.pan[2],this.maximumPan[2]),this.onChange("move",e,t)},onPinch:function(e,t){t=this.getZoom()+(1-t),this.setZoom(t)},onRotate:function(e,t,r,n){var i=t*(Math.PI/180);this.rotation[1]=this.rotation[1]+i,this.onChange("rotate",t)},onMouseWheel:function(e,t,r,n,i){r<0?this.zoomIn():this.zoomOut()}}),SmoothOrbitController=OrbitController.extend({init:function(){this._super(),this.speed=5,this.currentRotation=vec2.create(),this.currentDistance=this.distance,this.enableRotatingX=!0,this.enableRotatingY=!0},excluded:function(){return this._super().concat(["currentRotation","currentDistance","tmpRotation"])},type:function(){return"SmoothOrbitController"},onUpdate:function(e,t){if(!this.target.isNull()){var r=e.fps.getDelta()/1e3*this.speed;r=Math.min(r,1),this.enableRotatingX&&(this.currentRotation[0]=lerp(this.currentRotation[0],this.rotation[0],r)),this.enableRotatingY&&(this.currentRotation[1]=lerp(this.currentRotation[1],this.rotation[1],r)),this.currentDistance=lerp(this.currentDistance,this.distance,r),quat.identity(this.tmpRotation),quat.rotateY(this.tmpRotation,this.tmpRotation,this.currentRotation[1]),quat.rotateX(this.tmpRotation,this.tmpRotation,this.currentRotation[0]),vec3.set(this.direction,0,0,1),vec3.transformQuat(this.direction,this.direction,this.tmpRotation),vec3.scale(this.direction,this.direction,this.currentDistance),mat4.translation(this.targetPosition,this.target.value.absolute),vec3.add(this.cameraPosition,this.targetPosition,this.direction),vec3.add(this.targetPosition,this.targetPosition,this.pan),vec3.add(this.cameraPosition,this.cameraPosition,this.pan),mat4.lookAt(this.lookat,this.cameraPosition,this.targetPosition,[0,1,0]),mat4.invert(this.node.transform.absolute,this.lookat),this.node.calculateRelativeFromAbsolute(),this.doZoomIn&&this.zoomIn(),this.doZoomOut&&this.zoomOut()}}}),Billboard=Component.extend({init:function(e,t,r){this._super(),this.cameraToLookAt=e,this.smoothRotation=!0===t,this.rotationSpeed=4,r&&(this.rotationSpeed=r),this.cacheMat4=[mat4.create()],this.cacheQuat=[quat.create(),quat.create()],this.cacheVec3=[vec3.create(),vec3.create()]},type:function(){return"Billboard"},onUpdate:function(e){if(this.enabled){if(!(this.cameraToLookAt instanceof Camera))throw"Billboard.cameraToLookAt is not an instance of Camera";var t=e.fps.getDelta()/1e3,r=mat4.invert(this.cacheMat4[0],this.cameraToLookAt.viewMatrix),n=quat.fromMat4(this.cacheQuat[0],r);if(this.smoothRotation){var i=quat.fromMat4(this.cacheQuat[1],this.node.transform.relative);quat.slerp(n,i,n,this.rotationSpeed*t)}quat.normalize(n,n);var o=mat4.translation(this.cacheVec3[0],this.node.transform.relative),a=mat4.getScale(this.cacheVec3[1],this.node.transform.relative);mat4.fromRotationTranslationScale(this.node.transform.relative,n,o,a)}}}),VerticalBillboard=Billboard.extend({init:function(e,t,r){this._super(e,t,r)},type:function(){return"VerticalBillboard"},onUpdate:function(e){if(!(this.cameraToLookAt instanceof Camera))throw"VerticalBillboard.cameraToLookAt is not an instance of Camera";var t=e.fps.getDelta()/1e3,r=mat4.invert(this.cacheMat4[0],this.cameraToLookAt.viewMatrix),n=quat.fromMat4(this.cacheQuat[0],r);if(quat.multiply(n,n,quat.euler(this.cacheQuat[1],0,180,0)),this.smoothRotation){n[0]=0,n[2]=0,quat.normalize(n,n);var i=quat.fromMat4(this.cacheQuat[1],this.node.transform.relative);quat.slerp(n,i,n,this.rotationSpeed*t)}quat.normalize(n,n);var o=mat4.translation(this.cacheVec3[0],this.node.transform.relative),a=mat4.getScale(this.cacheVec3[1],this.node.transform.relative);mat4.fromRotationTranslationScale(this.node.transform.relative,n,o,a)}}),Collider=Component.extend({init:function(){this._super()},type:function(){return"Collider"},onStart:function(e,t){this.getScene().dynamicSpace.addCollider(this)},onEnd:function(e,t){this.getScene().dynamicSpace.removeCollider(this)},rayTest:function(e,t,r){return!1}}),MeshCollider=Collider.extend({init:function(){this._super()},type:function(){return"MeshCollider"},rayTest:function(e,t,r){if(!this.enabled)return!1;var n=this.node.getComponent(MeshRendererComponent);if(!n)return!1;for(var i=n.meshRenderers,o=vec3.create(),a=vec3.create(),s=vec3.create(),l=!1,c=0;c<i.length;c++)if((r||i[c].visible)&&e.intersectBoundingVolume(i[c].globalBoundingBox)){var h=e.clone(),u=mat4.invert(mat4.create(),i[c].matrix);h.transform(u);var d=i[c].submesh.faces,f=i[c].submesh.positions;if(t){var m=this;t.addCallback=function(e){vec3.transformMat4(e.point,e.point,i[c].matrix),e.submesh=i[c].submesh,e.collider=m,e.node=m.node}}for(var v=0;v<d.length;v+=3)if(o[0]=f[3*d[v]],o[1]=f[3*d[v]+1],o[2]=f[3*d[v]+2],a[0]=f[3*d[v+1]],a[1]=f[3*d[v+1]+1],a[2]=f[3*d[v+1]+2],s[0]=f[3*d[v+2]],s[1]=f[3*d[v+2]+1],s[2]=f[3*d[v+2]+2],h.intersectTriangle(o,a,s,t)){if(!t)return!0;l=!0;break}if(t)t.addCallback=!1;else if(l)return!0}return l}}),LargeMeshCollider=Collider.extend({init:function(e){this._super(),this.tree=!1,this.meshes=[],this.damaged=!1,this.invMat=mat4.create()},type:function(){return"LargeMeshCollider"},excluded:function(){return this._super().concat(["tree","meshes"])},isComplete:function(){return!1!==this.tree&&0==this.meshes.length},onAdd:function(e){if(this._super(),this.damaged){var n=this.node;function t(t){var r=null;return n.onEachChild(function(e){if(e.localCollisionID===t)return r=e,!0}),r}for(var r in this.tree.nodes){var i=this.tree.nodes[r].localCollisionID;i<0||(this.tree.nodes[r]=t(i))}this.damaged=!1}},clone:function(){var e=new LargeMeshCollider;return this.tree&&(e.tree=this.tree.clone(),e.damaged=!0),e},rayTest:function(e,t,r){if(!this.enabled||!this.isComplete())return!1;var n=e.clone();mat4.invert(this.invMat,this.node.transform.absolute),n.transform(this.invMat);var i=this.tree.getNearestRayCollision(n,e,r);if(i.t==1/0||i.t==-1/0)return!1;if(t&&i){var o=n.getPointOnRay(i.t);vec3.transformMat4(o,o,this.node.transform.absolute),t.hits.push({point:o,collider:this,submesh:i.submesh,node:i.node,normal:i.normal})}return!1!==i}}),Resource=Component.extend({init:function(){this._super(),this.descriptor=!1},excluded:function(){return this._super().concat(["resource"])},type:function(){return"ResourceComponent"}}),TextureResource=Resource.extend({init:function(){this._super(),this.descriptor=new TextureDescriptor,this.texture=!1,this.engine=!1},excluded:function(){return this._super().concat(["texture","engine"])},type:function(){return"TextureResource"},load:function(e){var t=this;this.texture=this.engine.assetsManager.texturesManager.addDescriptor(this.descriptor),this.engine.assetsManager.load(function(){t.onLoaded(),e&&e(t.engine.context,t.engine)})},onStart:function(e,t){this.engine=t,this.load()},onLoaded:function(){}}),ModelResource=Resource.extend({init:function(){this._super(),this.descriptor=new ModelDescriptor,this.model=!1},type:function(){return"ModelResource"},excluded:function(){return this._super().concat(["model","engine"])},load:function(e){if(this.descriptor.source){var t=this;this.model=this.engine.assetsManager.modelsManager.addDescriptor(this.descriptor),this.engine.assetsManager.load(function(){t.node.addNode(t.model),t.onLoaded(),e&&e(t.engine.context,t.engine)})}},onStart:function(e,t){this.engine=t,this.load()},onLoaded:function(){}}),MaterialResource=Resource.extend({init:function(){this._super(),this.descriptor=new MaterialSourceDescriptor,this.material=!1,this.engine=!1},excluded:function(){return this._super().concat(["material","engine"])},type:function(){return"MaterialResource"},load:function(e){var t=this;this.texture=this.engine.assetsManager.materialSourcesManager.addDescriptor(this.descriptor),this.engine.assetsManager.load(function(){t.onLoaded(),e&&e(t.engine.context,t.engine)})},onStart:function(e,t){this.engine=t,this.load()},onLoaded:function(){}}),Light=Component.extend({init:function(){this._super(),this.color=new Color(1,1,1,1),this.intensity=1,this.shadowCasting=!1,this.shadowMask=4294967295,this.damaged=!0},type:function(){return"Light"},onAddScene:function(e){e.scene.lights.push(this)},onRemoveScene:function(e){for(var t=e.scene.lights,r=0;r<t.length;r++)t[r]==this&&(t.splice(r,1),r--)},getGeometryRenderers:function(){return[]},isPositional:function(){return!1},onContextRestored:function(e){},damage:function(){this.damaged=!0},undamage:function(){this.damaged=!1}}),OmniLight=Light.extend({init:function(e,t){this._super(),this.size=e||1,this.color=t||new Color(1,1,1,1),this.intensity=1,this.geometry=null,this.material=null},type:function(){return"OmniLight"},onStart:function(e,t){this._super(),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_light_omni")),{lightColor:new UniformColor(this.color),lightPosition:new UniformVec3(vec3.create()),lightIntensity:new UniformFloat(this.intensity),lightRadius:new UniformFloat(this.size)},[]),this.geometry=Primitives.sphere(this.size,16,16,this.material),this.geometry.getComponent(MeshRendererComponent).disable(),this.node.addNode(this.geometry),t.assetsManager.load()},onPreRender:function(){vec4.set(this.material.uniforms.lightColor.value,this.color.r,this.color.g,this.color.b,this.color.a),this.node.transform.getPosition(this.material.uniforms.lightPosition.value),this.material.uniforms.lightIntensity.value=this.intensity,this.material.uniforms.lightRadius.value=this.size},getGeometryRenderers:function(){return this.geometry.getComponent(MeshRendererComponent).meshRenderers},isPositional:function(){return!0}}),AmbientLight=Light.extend({init:function(e){this._super(),this.color=e||new Color(.2,.2,.2,1),this.geometry=null,this.material=null},type:function(){return"AmbientLight"},onStart:function(e,t){this._super(),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_light_ambient")),{lightColor:new UniformColor(this.color)},[]);var r=new Mesh,n=new Submesh;n.positions=[-1,-1,0,-1,1,0,1,1,0,1,-1,0],n.normals=[0,0,1,0,0,1,0,0,1,0,0,1],n.texCoords2D=[[0,0,0,1,1,1,1,0]],n.faces=[0,1,2,0,2,3],n.recalculateBounds(),r.addSubmesh(n,this.material),this.geometry=new Node("AmbientLightGeometry"),this.geometry.addComponent(new MeshComponent(r)),this.geometry.addComponent(new MeshRendererComponent).disable(),this.node.addNode(this.geometry),t.assetsManager.load()},onUpdate:function(){vec4.set(this.material.uniforms.lightColor.value,this.color.r,this.color.g,this.color.b,this.color.a)},getGeometryRenderers:function(){return this.geometry.getComponent(MeshRendererComponent).meshRenderers}}),DirectionalLight=Light.extend({init:function(e,t){this._super(),this.intensity=1,this.color=t||new Color(1,1,1,1),this.direction=vec3.fromValues(1,1,1),e&&this.setLightDirection(e),this.shadowResolution=vec2.fromValues(2048,2048),this.shadowBias=.01,this.geometry=null,this.material=null,this.shadow=null,this.shadowSampler=null,this.lightView=mat4.create(),this.lightProj=mat4.create()},type:function(){return"DirectionalLight"},setLightDirection:function(e){vec3.copy(this.direction,e),vec3.normalize(this.direction,this.direction)},onStart:function(e,t){if(this._super(),vec2.set(this.shadowResolution,t.options.directionalShadowResolution,t.options.directionalShadowResolution),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("deferred_light_directional")),{lightColor:new UniformColor(this.color),lightIntensity:new UniformFloat(this.intensity),lightDirection:new UniformVec3(vec3.create()),lightView:new UniformMat4(mat4.create()),lightProjection:new UniformMat4(mat4.create()),useShadows:new UniformInt(0),shadowBias:new UniformFloat(.01)},[]),this.shadowCasting&&!this.shadow){if(e.isWebGL2())this.shadow=new TargetTextureFloat(this.shadowResolution,e,!1);else{var r=e.gl.getExtension("OES_texture_half_float"),n=e.gl.getExtension("OES_texture_float");this.shadow=n||r?new TargetTextureFloat(this.shadowResolution,e,!1):new TargetTexture(this.shadowResolution,e,!1)}this.shadowSampler=new Sampler("shadow0",this.shadow.texture),this.material.samplers.push(this.shadowSampler)}var i=new Mesh,o=new Submesh;o.positions=[-1,-1,0,-1,1,0,1,1,0,1,-1,0],o.normals=[0,0,1,0,0,1,0,0,1,0,0,1],o.texCoords2D=[[0,0,0,1,1,1,1,0]],o.faces=[0,1,2,0,2,3],o.recalculateBounds(),i.addSubmesh(o,this.material),this.geometry=new Node("DirectionalLightGeometry"),this.geometry.addComponent(new MeshComponent(i)),this.geometry.addComponent(new MeshRendererComponent).disable(),this.node.addNode(this.geometry),t.assetsManager.load()},onUpdate:function(e){vec4.set(this.material.uniforms.lightColor.value,this.color.r,this.color.g,this.color.b,this.color.a),vec3.copy(this.material.uniforms.lightDirection.value,this.direction),this.material.uniforms.lightIntensity.value=this.intensity,this.material.uniforms.useShadows.value=this.shadowCasting?1:0,this.material.uniforms.shadowBias.value=this.shadowBias,this.updateSamplers(e.context)},updateSamplers:function(e){this.shadowCasting&&(this.shadow||(this.shadow=new TargetTextureFloat(this.shadowResolution,e,!1),this.shadowSampler?this.shadowSampler.texture=this.shadow.texture:(this.shadowSampler=new Sampler("shadow0",this.shadow.texture),this.material.samplers.push(this.shadowSampler))),mat4.copy(this.material.uniforms.lightView.value,this.lightView),mat4.copy(this.material.uniforms.lightProjection.value,this.lightProj))},getGeometryRenderers:function(){return this.geometry.getComponent(MeshRendererComponent).meshRenderers},onContextRestored:function(e){delete this.shadow,this.shadow=null}});function TerrainMesh(){var y=this;this.generate=function(e,t,r){if(r<1)throw"TerrainMesh: numCones must be at least 1";var i=[],o=[],a=[],s=[],l=[],c=0,n=e*Math.pow(2,r-1),h=n/2,d=1,f=2,m=3,v=4;function u(e){return(e+h)/n}function p(e,t,r,n){i.push(e[0],e[1],e[2]),o.push(u(e[0]),u(e[2])),a.push(0,1,0),l.push(0,0,1),i.push(e[0]-.5*t,e[1],e[2]-.5*t),o.push(u(e[0]-.5*t),u(e[2]-.5*t)),a.push(0,1,0),l.push(0,1,0),r!==d&&n!==d&&(i.push(e[0]-.5*t,e[1],e[2]),o.push(u(e[0]-.5*t),u(e[2])),a.push(0,1,0),l.push(0,0,0)),i.push(e[0]-.5*t,e[1],e[2]+.5*t),o.push(u(e[0]-.5*t),u(e[2]+.5*t)),a.push(0,1,0),l.push(1,0,0),r!==m&&n!==m&&(i.push(e[0],e[1],e[2]+.5*t),o.push(u(e[0]),u(e[2]+.5*t)),a.push(0,1,0),l.push(0,0,0)),i.push(e[0]+.5*t,e[1],e[2]+.5*t),o.push(u(e[0]+.5*t),u(e[2]+.5*t)),a.push(0,1,0),l.push(1,1,0),r!==f&&n!==f&&(i.push(e[0]+.5*t,e[1],e[2]),o.push(u(e[0]+.5*t),u(e[2])),a.push(0,1,0),l.push(0,0,0)),i.push(e[0]+.5*t,e[1],e[2]-.5*t),o.push(u(e[0]+.5*t),u(e[2]-.5*t)),a.push(0,1,0),l.push(0,1,1),r!==v&&n!==v&&(i.push(e[0],e[1],e[2]-.5*t),o.push(u(e[0]),u(e[2]-.5*t)),a.push(0,1,0),l.push(0,0,0)),r&&n?(s.push(c+0,c+1,c+2,c+0,c+2,c+3,c+0,c+3,c+4,c+0,c+4,c+5,c+0,c+5,c+6,c+0,c+6,c+1),c+=7):r||n?(s.push(c+0,c+1,c+2,c+0,c+2,c+3,c+0,c+3,c+4,c+0,c+4,c+5,c+0,c+5,c+6,c+0,c+6,c+7,c+0,c+7,c+1),c+=8):(s.push(c+0,c+1,c+2,c+0,c+2,c+3,c+0,c+3,c+4,c+0,c+4,c+5,c+0,c+5,c+6,c+0,c+6,c+7,c+0,c+7,c+8,c+0,c+8,c+1),c+=9)}function g(e,t,r,n){for(var i=vec3.create(),o=e/t,a=-(e-t)/2,s=0;s<o;s++){for(var l=-(e-t)/2,c=0;c<o;c++)if(n&&a>n[0]&&a<n[1]&&l>n[0]&&l<n[1])l+=t;else{if(i[0]=a,i[2]=l,i[1]=r,0==s||s==o-1||0==c||c==o-1){var h=null,u=null;0==s?h=d:s==o-1&&(h=f),0==c?u=v:c==o-1&&(u=m),p(i,t,h,u)}else p(i,t);l+=t}a+=t}}var x=.5;g(e,t,x);for(var w=vec2.create(),b=1;b<r;b++)vec2.set(w,-(e-t)/2,(e-t)/2),g(e*=2,t*=2,x*=2,w);y.positions=i,y.barycentric=l,y.normals=a,y.uv=o,y.faces=s}}var GPUTerrain=MeshRendererComponent.extend({init:function(e,t,r){this._super(),this.options=FRAK.extend({size:1024,verticalScale:64,numCones:8,initialConeSize:32},r),this.uvSize=Math.pow(2,this.options.numCones-1)*this.options.initialConeSize,this.heightSource=new TextureDescriptor(e),this.colorSource=new TextureDescriptor(t),this.cameraPosition=vec3.create()},type:function(){return"TerrainComponent"},onStart:function(e,t){this.height=t.assetsManager.texturesManager.addDescriptor(this.heightSource),this.color=t.assetsManager.texturesManager.addDescriptor(this.colorSource),this.material=new Material(t.assetsManager.addShaderSource(t.assetsManager.shadersManager.bundle("terrain")),{diffuse:new UniformColor({r:1,g:1,b:1,a:1}),ambient:new UniformColor({r:.2,g:.2,b:.2}),uvOffset:new UniformVec2(vec2.fromValues(0,0)),uvScale:new UniformVec2(vec2.fromValues(1,1)),verticalScale:new UniformFloat(this.options.verticalScale)},[new Sampler("diffuse0",this.color),new Sampler("height",this.height)]);var r=new TerrainMesh;r.generate(this.options.initialConeSize,1,this.options.numCones);var n=new Mesh,i=new Submesh;i.positions=r.positions,i.barycentric=r.barycentric,i.normals=r.normals,i.texCoords2D=[r.uv],i.faces=r.faces,i.calculateTangents(),i.recalculateBounds(),n.addSubmesh(i,this.material),this.node.addComponent(new MeshComponent(n)),this._super(e,t),t.assetsManager.load()},onPreRender:function(e,t){t.getPosition(this.cameraPosition),this.cameraPosition[1]=0;var r=(this.cameraPosition[0]+this.options.size/2)/this.options.size,n=(this.cameraPosition[2]+this.options.size/2)/this.options.size;vec2.set(this.material.uniforms.uvScale.value,this.uvSize/this.options.size,this.uvSize/this.options.size),vec2.set(this.material.uniforms.uvOffset.value,r,n),this.material.uniforms.verticalScale.value=this.options.verticalScale,this.node.transform.setPosition(this.cameraPosition)}}),Descriptor=Serializable.extend({init:function(){this._super(),this.source="",this.parentDescriptor=!1},included:function(){return!0},excluded:function(){return this._super().concat(["parentDescriptor"])},type:function(){return"Descriptor"},equals:function(e){if(this.type()!=e.type())return!1;if(this.getFullPath()!=e.getFullPath())return!1;if(this.parentDescriptor&&e.parentDescriptor){if(!this.parentDescriptor.equals(e.parentDescriptor))return!1}else if(this.parentDescriptor!=e.parentDescriptor)return!1;return!0},getCurrentRelativeDirectory:function(){return 0==this.source.length?"":this.source.substring(0,this.source.lastIndexOf("/")+1)},getCurrentDirectory:function(){var e="";return this.parentDescriptor&&(e=this.parentDescriptor.getCurrentDirectory()),e+this.getCurrentRelativeDirectory()},getParentDirectory:function(){return this.parentDescriptor?this.parentDescriptor.getCurrentDirectory():""},getFullPath:function(){return this.getParentDirectory()+this.source}}),TextDescriptor=Descriptor.extend({init:function(e){this._super(),this.source=e},type:function(){return"TextDescriptor"},equals:function(e){return!!this._super(e)&&this.source==e.source}}),ModelDescriptor=Descriptor.extend({init:function(e,t){this._super(),this.source=e,this.format=t||"auto"},type:function(){return"ModelDescriptor"},getFormat:function(){return"auto"==this.format?this.source.endsWith(".data")?"binary":this.source.endsWith(".json")?"json":"binary":this.format}}),ShaderDescriptor=Descriptor.extend({init:function(e,t){this._super(),this.fragmentSource=t?(this.vertexSource=e,t):(this.vertexSource=e+".vert",e+".frag")},type:function(){return"ShaderDescriptor"},equals:function(e){return!!this._super(e)&&(this.vertexSource==e.vertexSource&&this.fragmentSource==e.fragmentSource)},getVertexShaderPath:function(){return this.getParentDirectory()+this.vertexSource},getFragmentShaderPath:function(){return this.getParentDirectory()+this.fragmentSource}}),MaterialDescriptor=Descriptor.extend({init:function(e,t,r){this._super(),r||(r=[]),t||(t={}),this.shaderDescriptor=e,this.uniforms=t,this.textureDescriptors=r,this.materialResourceDescriptor=!1,this.requirements={}},type:function(){return"MaterialDescriptor"},equals:function(e){return!1}}),MaterialSource=Descriptor.extend({init:function(e){this._super(),this.material=!1,this.sourceDescriptor=e},type:function(){return"MaterialSource"},equals:function(e){return!1}}),MaterialSourceDescriptor=Descriptor.extend({init:function(e){this._super(),this.source=e},type:function(){return"MaterialSourceDescriptor"},equals:function(e){return this.source==e.source}}),TextureDescriptor=Descriptor.extend({init:function(e,t,r){this._super(),this.source=e,this.width=t,this.height=r},type:function(){return"TextureDescriptor"},equals:function(e){return!!this._super(e)&&(this.source==e.source&&this.width==e.width&&height==e.height)}}),CubeTextureDescriptor=Descriptor.extend({init:function(e){this._super(),this.sources=e||[]},type:function(){return"CubeTextureDescriptor"},equals:function(e){if(!this._super(e))return!1;if(this.sources.length!=e.sources.length)return!1;for(var t=0;t<this.sources.length;t++)if(this.sources[t]!=e.sources[t])return!1;return!0},getFaceFullPath:function(e){if(e<0||e>this.sources.length)throw"CubeTextureDescriptor.getFaceFullPath: index out of bounds";this.source=this.sources[e];var t=this.getFullPath();return this.source="",t}}),EmptyNode=Serializable.extend({init:function(e){this._super(),this.name=e||"Empty Node",this.subnodes=[],this.components=[],this.scene=!1,this.parent=!1,this.layer=1,this.tags=[],this._super()},excluded:function(){return["parent","scene"]},type:function(){return"EmptyNode"},addNode:function(e){if(!(e instanceof EmptyNode))throw"addNode: The given node is not a subclass of EmptyNode";this.subnodes.push(e);var t=this;return e.parent=this,e.onEachChild(function(e){e.scene=t.scene}),e.scene&&e.onEachChildComponent(function(e){e.onAddScene(t),e.node.onAddComponent(e)}),e.onAdd(this),t.scene.engine&&e.onEachChildComponent(function(e){e.started||(t.scene.starting||!1===t.scene.started?t.scene.startingQueue.push(e):(e.onLoad(t.scene.engine.assetsManager,t.scene.engine),e.start(t.scene.engine.context,t.scene.engine),e.started=!0))}),e},removeNode:function(e){var t=this;this.scene.engine&&e.onEachChildComponent(function(e){e.started&&e.onEnd(t.scene.engine.context,t.scene.engine),e.started=!1}),e.onRemove(this),e.scene&&e.onEachChildComponent(function(e){e.onRemoveScene(t),e.node.onRemoveComponent(e)}),e.onEachChild(function(e){e.scene=!1}),e.parent=!1;for(var r=0;r<this.subnodes.length;r++)if(this.subnodes[r]==e){this.subnodes.splice(r,1);break}return e},removeSubnodes:function(){for(var e=this.subnodes.slice(0),t=0;t<e.length;t++)this.removeNode(e[t])},addComponent:function(e){if(!e.type())throw"Unable to add a component that doesn't define it's type by returning it from type() method";return this.components.push(e),e.node=this,e.onAdd(this),this.scene&&(e.onAddScene(this),this.onAddComponent(e)),!e.started&&this.scene&&this.scene.engine&&(this.scene.started||this.scene.starting)&&(e.start(this.scene.engine.context,this.scene.engine),e.started=!0),e},removeComponent:function(e){for(var t=0;t<this.components.length;t++)if(this.components[t]===e){this.components.splice(t,1);break}return this.scene.engine&&e.started&&(e.onEnd(this.scene.engine.context,this.scene.engine),e.started=!1),this.scene&&(e.onRemoveScene(this),this.onRemoveComponent(e)),e.onRemove(this),e.node=!1,e},removeComponentsByType:function(e){for(var t=[],r=0;r<this.components.length;r++)this.components[r]instanceof e&&(t.push(this.components[r]),this.components.splice(r,1),r--);for(r=0;r<t.length;r++)this.scene.engine&&t[r].started&&(t[r].onEnd(this.scene.engine.context,this.scene.engine),t[r].started=!1),this.scene&&(t[r].onRemoveScene(this),this.onRemoveComponent(t[r])),t[r].onRemove(this),t[r].node=!1;return t},getComponent:function(e){for(var t=0;t<this.components.length;t++)if(this.components[t]instanceof e)return this.components[t];return!1},getComponents:function(e){for(var t=[],r=0;r<this.components.length;r++)this.components[r]instanceof e&&t.push(this.components[r]);return 0!=t.length&&t},calculateRelativeFromAbsolute:function(){this.parent.transform&&this.transform.calculateRelativeFromAbsolute(this.parent.transform.absolute)},instantiate:function(){var e=new EmptyNode(this.name);e.isInstanced=!0,e.layer=this.layer,e.tags=this.tags.slice(0);for(var t=0;t<this.subnodes.length;t++)e.addNode(this.subnodes[t].instantiate());for(var r=0;r<this.components.length;r++)e.addComponent(this.components[r].instantiate());return e},enable:function(e){e?this.onEachComponent(function(e){e.enable()}):this.onEachChildComponent(function(e){e.enable()})},disable:function(e){e?this.onEachComponent(function(e){e.disable()}):this.onEachChildComponent(function(e){e.disable()})},onAdd:function(e){},onRemove:function(e){},onAddComponent:function(e){this.scene.components.push(e),e.onUpdate!=Component.prototype.onUpdate&&this.scene.updatedComponents.push(e),e.onPreRender!=Component.prototype.onPreRender&&this.scene.preRenderedComponents.push(e),e.onPostRender!=Component.prototype.onPostRender&&this.scene.postRenderedComponents.push(e)},onRemoveComponent:function(e){function t(e,t){var r=e.indexOf(t);-1==r||e.splice(r,1)}t(this.scene.components,e),e.onUpdate!=Component.prototype.onUpdate&&t(this.scene.updatedComponents,e),e.onPreRender!=Component.prototype.onPreRender&&t(this.scene.preRenderedComponents,e),e.onPostRender!=Component.prototype.onPostRender&&t(this.scene.postRenderedComponents,e)},onEachChild:function(e){if(!0===e(this))return!0;for(var t=0;t<this.subnodes.length;t++)if(!0===this.subnodes[t].onEachChild(e))return!0},onEachChildExclusive:function(e){for(var t=0;t<this.subnodes.length;t++)if(!0===this.subnodes[t].onEachChild(e))return!0},onEachDirectChild:function(e){for(var t=0;t<this.subnodes.length;t++)if(!0===e(this.subnodes[t]))return!0},onEachComponent:function(e){for(var t=0;t<this.components.length;t++)if(!0===e(this.components[t]))return!0},onEachChildComponent:function(t){this.onEachChild(function(e){if(!0===e.onEachComponent(t))return!0})},onEachChildComponentExclusive:function(t){this.onEachChildExclusive(function(e){if(!0===e.onEachComponent(t))return!0})},getChildComponentsOfType:function(t){var r=[];return this.onEachChildComponent(function(e){e instanceof t&&r.push(e)}),r},find:function(e){var t=e.split("/");if(0==t.length)return!1;var r=this;if(""===t[0]){if(!this.scene)return!1;r=this.scene.root,t.shift()}if(2<t.length){var n=t.slice(0,1),i=t.slice(1,t.length).join("/");(t=n).push(i)}for(var o=0;o<t.length;o++)if(!1===(r=r.findChildWithName(t[o],e)))return!1;return r},findChildWithName:function(e,t){for(var r=0;r<this.subnodes.length;r++)if(this.subnodes[r].name===e)return this.subnodes[r];return!1},path:function(){for(var e=[],t=this;t;)e.push(t.name),t=t.parent;return"/"+e.reverse().join("/")}}),Node=EmptyNode.extend({init:function(e){this._super(e),this.name=e||"Node",this.transform=this.addComponent(new Transform),this.localCollisionID=-1},excluded:function(){return this._super().concat(["transform"])},type:function(){return"Node"},getBoundingBox:function(t){var r=new BoundingBox;return this.onEachChildComponent(function(e){e instanceof MeshRendererComponent&&r.encapsulateBox(e.getBoundingBox(t))}),r},getBoundingSphere:function(t){var r=new BoundingSphere;return this.onEachChildComponent(function(e){e instanceof MeshRendererComponent&&r.encapsulateSphere(e.getBoundingSphere(t))}),r},instantiate:function(){var e=new Node(this.name);e.isInstanced=!0,e.localCollisionID=this.localCollisionID,e.removeComponentsByType(Transform),e.layer=this.layer,e.tags=this.tags.slice(0);for(var t=0;t<this.subnodes.length;t++)e.addNode(this.subnodes[t].instantiate());for(var r=0;r<this.components.length;r++)e.addComponent(this.components[r].instantiate());return e.transform=e.getComponent(Transform),e},updateChildTransforms:function(){var e,t,r,n,i,o=this.transform.absolute,a=this.subnodes;for(e=0,r=a.length;e<r;e++)(i=a[e]).transform&&(mat4.multiply(i.transform.absolute,o,i.transform.relative),i.updateChildTransforms());for(t=0,n=this.components.length;t<n;t++)this.components[t].onUpdateTransform(o)},setAbsolutePosition:function(e){this.parent&&this.parent.transform?(mat4.fromRotationTranslationScale(this.transform.absolute,quat.fromMat4(quat.create(),this.transform.absolute),e,mat4.getScale(vec3.create(),this.transform.absolute)),this.transform.calculateRelativeFromAbsolute(this.parent.transform.absolute)):this.transform.calculateRelativeFromAbsolute()}}),Scene=Serializable.extend({init:function(){this.root=new Node,(this.root.scene=this).dynamicSpace=new DynamicSpace,this.cameras=[],this.lights=[],this.engine=!1,this.starting=!1,this.started=!1,this.startingQueue=[],this.components=[],this.preRenderedComponents=[],this.postRenderedComponents=[],this.updatedComponents=[];var i=this;this.processPreRenderList=function(e,t){for(var r=0;r<i.preRenderedComponents.length;++r){var n=i.preRenderedComponents[r];n.node.layer&t.layerMask&&(e.modelview.push(),e.modelview.multiply(n.node.transform.absolute),n.onPreRender(e,t),e.modelview.pop())}},this.processPostRenderList=function(e,t){for(var r=0;r<i.postRenderedComponents.length;++r){var n=i.postRenderedComponents[r];n.node.layer&t.layerMask&&(e.modelview.push(),e.modelview.multiply(n.node.transform.absolute),n.onPostRender(e,t),e.modelview.pop())}}},fields:function(){return["root"]},start:function(n){if(!this.started&&!this.starting){this.starting=!0;var i=this;this.root.onEachChildComponent(function(e){e.enabled&&(e.started||e.onLoad(i.engine.assetsManager,i.engine))});!function(){i.root.updateChildTransforms(),i.root.onEachChildComponent(function(e){e.enabled&&(e.started||i.startingQueue.push(e))});var r=null;(r=function(){for(var e=(new Date).getTime()+50;(new Date).getTime()<e;){if(0===i.startingQueue.length)return i.started=!0,i.starting=!1,void("function"==typeof i.engine.sceneStarted&&i.engine.sceneStarted());var t=i.startingQueue.shift();t.started||(t.start(n,i.engine),t.started=!0)}setTimeout(r,10)})()}()}},end:function(t,r){this.started&&(this.root.updateChildTransforms(),this.root.onEachChildComponent(function(e){e.enabled&&e.started&&(e.onEnd(t,r),e.started=!1)}),this.started=!1)},render:function(e){if(this.started)for(var t=0;t<this.cameras.length;++t)this.cameras[t].render(e,this,this.processPreRenderList,this.processPostRenderLists)},update:function(e){if(this.started){for(var t=1,r=0;r<t;++r)for(var n=0;n<this.updatedComponents.length;++n){var i=this.updatedComponents[n];i.enabled&&(r<i.updatePasses&&i.started&&i.onUpdate(e,r),t<i.updatePasses&&(t=i.updatePasses))}this.root.updateChildTransforms()}},getMaterials:function(){var r=[];return this.root.onEachChildComponent(function(e){if(e instanceof MeshComponent)for(var t in e.mesh.materials)r.push(e.mesh.materials[t])}),r},broadcast:function(t,r,n){if(n=n||null,t.prototype instanceof Light)for(var e,i=0;i<this.lights.length;i++)(e=this.lights[i])instanceof t&&r in e&&"function"==typeof e[r]&&e[r](n);else this.root.onEachChildComponent(function(e){e instanceof t&&r in e&&"function"==typeof e[r]&&e[r](n)})}}),DefaultScene=Scene.extend({init:function(){this._super(),this.root.name="Root",this.cameraNode=new Node("Camera"),this.cameraComponent=this.cameraNode.addComponent(new PerspectiveCamera),this.cameraComponent.aspect=!1,this.camera=this.cameraComponent.camera,this.root.addNode(this.cameraNode),this.lightNode=new Node("Light"),this.light=new DirectionalLight,this.light.color=new Color(1,1,1,1),this.light.intensity=1,this.light.setLightDirection(vec3.fromValues(.9,1,.9)),this.lightNode.addComponent(this.light),this.root.addNode(this.lightNode)}}),FPS=FrakClass.extend({init:function(){this.frametime=0,this.lastMeasurement=(new Date).getTime(),this.averageMultiplier=.95,this.delta=0},measure:function(){var e=FRAK.timestamp();0<e-this.lastMeasurement&&(this.frametime=this.frametime*this.averageMultiplier+this.delta*(1-this.averageMultiplier),this.delta=e-this.lastMeasurement),this.lastMeasurement=e},getAverage:function(){return this.frametime<=0?0:1e3/this.frametime},getDelta:function(){return this.delta}}),Engine=FrakClass.extend({init:function(e,t,r){if(t||(t={}),this.options=FRAK.extend({assetsPath:"",defaultRequestedFPS:60,requestedFPS:60,anisotropicFiltering:4,useVAO:!0,debug:!1,antialias:!1,ssao:!1,transparencyMode:"default",renderer:"default",softShadows:!1,runInBackground:!1,context:!1,contextErrorCallback:null,captureScreenshot:!1,webGLVersion:"auto",builtinShaders:!0,directionalShadowResolution:2048,shadowManualUpdate:!1},t),this.validateOptions(e),this.context=this.options.context,this.context.engine=this,r||(r=new DefaultScene),this.scene=r,(this.scene.engine=this).fps=new FPS,this.running=!1,this.input=!1,this.screenshot=!1,this.onScreenshotCaptured=!1,this.debugCTX=!1,this.debugWidth=256,this.debugFPS=[],this.debugCount=24,this.assetsManager=new AssetsManager(this.context,this.options.assetsPath),this.options.builtinShaders||(this.assetsManager.shadersManager.builtin={}),this.WhiteTexture=new Texture(this.context),this.WhiteTexture.name="WhiteTexture",this.WhiteTexture.mipmapped=!1,this.WhiteTexture.clearImage(this.context,[255,255,255,255]),this.WhiteTextureSampler=new Sampler("tex0",this.WhiteTexture),this.DiffuseFallbackSampler=new Sampler("diffuse0",this.WhiteTexture),document.addEventListener("visibilitychange",FrakCallback(this,this.onVisibilityChange)),this.context.canvas.addEventListener("webglcontextlost",FrakCallback(this,this.onContextLost),!1),this.context.canvas.addEventListener("webglcontextrestored",FrakCallback(this,this.onContextRestored),!1),FRAK.fullscreenEnabled){this.useUpscaling=!1;var n=FrakCallback(this,this.onFullscreenChange);document.addEventListener("fullscreenchange",n),document.addEventListener("webkitfullscreenchange",n),document.addEventListener("mozfullscreenchange",n),document.addEventListener("MSFullscreenChange",n)}this.setupInput()},onContextLost:function(e){console.log("FRAK: Rendering context lost"),e.preventDefault(),this.pause()},onContextRestored:function(e){console.log("FRAK: Rendering context restored"),(this.context.engine=this).context.restore(),this.run()},onVisibilityChange:function(){if(!this.options.runInBackground)if(document.hidden){if(!1===this.running)return void(this._externallyPaused=!0);this.pause()}else{if(this._externallyPaused)return void delete this._externallyPaused;this.run()}},onFullscreenChange:function(){var i;if(this.context instanceof RenderingContext)if(FRAK.isFullscreen()){i=this.context.canvas,this._savedCanvasStyles={position:i.style.position,left:i.style.left,right:i.style.right,top:i.style.top,bottom:i.style.bottom,width:i.style.width,height:i.style.height,canvasWidth:i.getAttribute("width"),canvasHeight:i.getAttribute("height"),aspectRatio:this.scene.cameraComponent.aspect},i.style.position="absolute",i.style.left=0,i.style.right=0,i.style.top=0,i.style.bottom=0,i.style.width="100%",i.style.height="100%";var o=this;setTimeout(function(){var e=i.getBoundingClientRect();if(o.scene.cameraComponent.setAspectRatio(e.width/e.height),!o.useUpscaling){var t=o.context.gl,r=t.canvas.clientWidth,n=Math.max(1,t.canvas.clientHeight);i.setAttribute("width",r),i.setAttribute("height",n),o.scene.camera.target.setSize(t.drawingBufferWidth,t.drawingBufferHeight)}},2e3/this.options.requestedFPS)}else if(this._savedCanvasStyles){if((i=this.context.canvas).style.position=this._savedCanvasStyles.position,i.style.left=this._savedCanvasStyles.left,i.style.right=this._savedCanvasStyles.right,i.style.top=this._savedCanvasStyles.top,i.style.bottom=this._savedCanvasStyles.bottom,i.style.width=this._savedCanvasStyles.width,i.style.height=this._savedCanvasStyles.height,this._savedCanvasStyles.aspectRatio&&this.scene.cameraComponent.setAspectRatio(this._savedCanvasStyles.aspectRatio),!this.useUpscaling){i.setAttribute("width",this._savedCanvasStyles.canvasWidth),i.setAttribute("height",this._savedCanvasStyles.canvasHeight);var e=this.context.gl;this.scene.camera.target.setSize(e.drawingBufferWidth,e.drawingBufferHeight)}delete this._savedCanvasStyles}},setupInput:function(){this.input=new Input(this,this.context.canvas)},run:function(){if(!1===this.running){var t;this.running=!0;var r,n=FRAK.timestamp(),i=1e3/this.options.requestedFPS,o=this;this.scene.started||this.scene.start(this.context,this),this._currentAnimationFrame=FRAK.requestAnimationFrame(function e(){t=FRAK.timestamp(),i<(r=t-n)&&(n=t-r%i,o.frame()),o.running&&(o._currentAnimationFrame=FRAK.requestAnimationFrame(e))})}},sceneStarted:function(){},stop:function(){this.pause(),this.scene.started&&this.scene.end(this.context)},pause:function(){this.running=!1,this._currentAnimationFrame&&FRAK.cancelAnimationFrame(this._currentAnimationFrame)},togglePause:function(){!1===this.running?this.run():this.pause()},requestFullscreen:function(e){FRAK.fullscreenEnabled?(this.useUpscaling=e,FRAK.requestFullscreen(this.context.canvas)):console.warn("FRAK: Fullscreen API is disabled in this browser.")},exitFullscreen:function(){FRAK.fullscreenEnabled?FRAK.exitFullscreen():console.warn("FRAK: Fullscreen API is disabled in this browser.")},startIdle:function(e){e||(e=1),this.options.requestedFPS=e,this.pause(),this.run()},stopIdle:function(){this.options.requestedFPS=this.options.defaultRequestedFPS,this.pause(),this.run()},frame:function(){(this.context.engine=this).input.update(this),this.scene.update(this),this.scene.render(this.context),this.fps.measure(),this.options.captureScreenshot&&this._captureScreenshot(),this.options.showDebug&&this.renderDebugInfo()},validateOptions:function(e){this.options.context||(this.options.context=new RenderingContext(e,null,this.options.contextErrorCallback,this.options.webGLVersion));var t=this.options.context.gl;switch(this.options.transparencyMode){case"sorted":case"blended":case"stochastic":break;default:this.options.transparencyMode="blended"}if("sorted"!=this.options.transparencyMode&&!this.options.context.isWebGL2()){var r=t.getExtension("OES_texture_float"),n=t.getExtension("OES_texture_half_float");r||n||(this.options.transparencyMode="sorted")}switch(this.options.renderer){case"auto":this.options.context.isWebGL2()||t.getExtension("WEBGL_draw_buffers")&&t.getExtension("OES_texture_float")&&t.getExtension("OES_standard_derivatives")?this.options.renderer="deferred":this.options.renderer="forward";break;case"deferred":case"forward":break;default:this.options.renderer="forward"}},resize:function(){if(this.context instanceof RenderingContext){var e=this.context.gl;this.scene.cameraComponent.setAspectRatio(e.drawingBufferWidth/e.drawingBufferHeight),this.scene.camera.target.setSize(e.drawingBufferWidth,e.drawingBufferHeight)}},stats:function(){if(this.scene){var e=this.scene.camera.renderStage.generator.organizer;console.log("=============== Statistics ====================="),console.log("  Visible faces (opaque/transparent): {0}/{1}".format(e.visibleSolidFaces,e.visibleTransparentFaces)),console.log("  Visible renderers (opaque/transparent): {0}/{1}".format(e.visibleSolidRenderers,e.visibleTransparentRenderers)),console.log("  Visible batches (opaque/transparent): {0}/{1}".format(e.visibleSolidBatches,e.visibleTransparentBatches)),console.log("================================================")}},renderDebugInfo:function(){var e=this.scene.camera.renderStage.generator.organizer;if(!this.debugCTX){var t=document.createElement("canvas");t.width=this.debugWidth,t.height=this.debugWidth/2,t.style.position="absolute",t.style.top=0,t.style.zIndex=100,t.style.backgroundColor="rgba(0, 0, 0, 0.5)";var r=this.context.canvas.parentNode;r.insertBefore(t,r.firstChild),this.debugCTX=t.getContext("2d")}if(this.debugCTX&&this.debugCount<1){var n=this.debugCTX;n.clearRect(0,0,this.debugWidth,this.debugWidth/2),n.font="Normal 20px Arial",n.fillStyle="rgba(240,240,240,0.75)",n.fillText("FPS: "+this.fps.getAverage().toFixed(2),10,20),n.font="Normal 12px Arial",n.fillText("Faces: "+e.visibleSolidFaces+" / "+e.visibleTransparentFaces,10,45),n.fillText("Renderers: "+e.visibleSolidRenderers+" / "+e.visibleTransparentRenderers,10,60),n.fillText("Batches: "+e.visibleSolidBatches+" / "+e.visibleTransparentBatches,10,75),n.fillText("RequestedFPS: "+this.options.requestedFPS,this.debugWidth/2,45),n.fillText("WebGL: "+this.context.version,this.debugWidth/2,60);var i=this.context.gl,o=i.getExtension("WEBGL_debug_renderer_info");if(o){var a=i.getParameter(o.UNMASKED_VENDOR_WEBGL),s=i.getParameter(o.UNMASKED_RENDERER_WEBGL);n.fillText(a,10,90),n.fillText(s,10,105)}this.debugFPS.push(this.fps.getAverage().toFixed(2)),60<this.debugFPS.length&&this.debugFPS.shift();for(var l=this.debugWidth/2,c=0;c<this.debugFPS.length;c++)this.debugFPS[c]<20?n.fillStyle="#FF0000":this.debugFPS[c]<30?n.fillStyle="#f6921e":n.fillStyle="#00FF00",n.fillRect(l+2*c,25-this.debugFPS[c]/60*20,2,2);this.debugCount=Math.max(3,Math.floor(this.fps.getAverage()/2))}this.debugCount--},_captureScreenshot:function(){var e=this.context.gl.canvas.toDataURL();e&&this.onScreenshotCaptured&&(this.options.captureScreenshot=!1,this.onScreenshotCaptured(e))},captureScreenshot:function(e){"function"==typeof e&&(this.options.captureScreenshot=!0,this.onScreenshotCaptured=e)}}),Input=FrakClass.extend({init:function(e,t){this.controllers=[],this.engine=e,this.canvas=t,this.lastPinch=0,this.lastRotation=0,this.buttons=[!1,!1,!1],this.button=-1,this.position=vec2.create(),this.delta=vec2.create(),this.lastDelta=vec2.create(),this.deltaChange=vec2.create(),this.scrollDelta=0,this.hammertime=HammerWF(this.canvas),this.hammertime.get("pinch").set({enable:!0}),this.hammertime.get("rotate").set({enable:!0}),this.hammertime.get("pan").set({threshold:0,pointers:0}),this.singlepan=new HammerWF.Pan({event:"pan",direction:HammerWF.DIRECTION_ALL,threshold:5,pointers:1}),this.hammertime.add(this.singlepan),this.bindings={},this.keyStates={},this.wfPanEnabled=!1,this.keymap={enter:13,escape:27,backspace:8,tab:9,shift:16,ctrl:17,alt:18,pause:19,caps_lock:20,space:32,page_up:33,page_down:34,end:35,home:36,left_arrow:37,up_arrow:38,right_arrow:39,down_arrow:40,insert:45,delete:46,left_window_key:91,right_window_key:92,select_key:93,numpad_0:96,numpad_1:97,numpad_2:98,numpad_3:99,numpad_4:100,numpad_5:101,numpad_6:102,numpad_7:103,numpad_8:104,numpad_9:105,multiply:106,add:107,subtract:109,decimal_point:110,divide:111,f1:112,f2:113,f3:114,f4:115,f5:116,f6:117,f7:118,f8:119,f9:120,f10:121,f11:122,f12:123,num_lock:144,scroll_lock:145,semi_colon:186,equal_sign:187,comma:188,dash:189,period:190,forward_slash:191,grave_accent:192,open_bracket:219,back_slash:220,close_braket:221,single_quote:222,0:48,1:49,2:50,3:51,4:52,5:53,6:54,7:55,8:56,9:57,a:65,b:66,c:67,d:68,e:69,f:70,g:71,h:72,i:73,j:74,k:75,l:76,m:77,n:78,o:79,p:80,q:81,r:82,s:83,t:84,u:85,v:86,w:87,x:88,y:89,z:90},this.setup()},setup:function(){this.registerKeyboardEvents(),this.registerPointerEvents()},registerController:function(e){return this.controllers.push(e),!0},registerPointerEvents:function(){this.hammertime&&(this.hammertime.on("pinch",FrakCallback(this,this.onPinch)),this.hammertime.on("pinchend",FrakCallback(this,this.onPinchEnd)),this.hammertime.on("tap",FrakCallback(this,this.onTap)),this.hammertime.on("transformstart",FrakCallback(this,this.onTransformStart)),this.hammertime.on("panstart",FrakCallback(this,this.onPanStart)),this.hammertime.on("panend",FrakCallback(this,this.onPanEnd)),this.hammertime.on("rotate",FrakCallback(this,this.onRotate)),this.hammertime.on("rotateend",FrakCallback(this,this.onRotateEnd)),this.hammertime.on("touch",FrakCallback(this,this.onTouch)),this.hammertime.on("panleft panright panup pandown",FrakCallback(this,this.onPan))),this.canvas.addEventListener("mousewheel",FrakCallback(this,this.onMouseWheel)),this.canvas.addEventListener("DOMMouseScroll",FrakCallback(this,this.onMouseWheelMOZ)),this.canvas.addEventListener("contextmenu",function(e){e.preventDefault()},!1)},registerKeyboardEvents:function(){this.canvas&&(this.canvas.addEventListener("keydown",FrakCallback(this,this.onKeyDown)),this.canvas.addEventListener("keyup",FrakCallback(this,this.onKeyUp)),this.canvas.focus&&this.canvas.focus())},unregisterController:function(e){var t=this.controllers.indexOf(e);return-1<t&&(this.controllers.splice(t,1),!0)},bind:function(e,t,r){e&&t&&r&&(e in this.keymap?this.bindings[this.keymap[e]]=[r,t]:this.bindings[e.charCodeAt(0)]=[r,t])},sendEvent:function(r){if(this.engine.running){var e=Array.prototype.slice.call(arguments,0);e=e.slice(1,e.length);for(var t=[],n=0;n<this.controllers.length;n++)this.controllers[n][r]&&t.push(this.controllers[n]);t.sort(function(e,t){return t.getPriority(r)-e.getPriority(r)});for(n=0;n<t.length&&!0!==t[n][r].apply(t[n],e);n++);}},translateCoordinates:function(e,t,r){var n=this.canvas.getBoundingClientRect(),i=t-n.left,o=r-n.top;return vec2.set(e,i,o)},onTap:function(e){if(e){var t;this.translateCoordinates(this.position,e.center.x,e.center.y);for(this.setMouseButtons(e.frakButtons),t=0;t<this.buttons.length&&!this.buttons[t];t++);t==this.buttons.length&&(t=0),this.sendEvent("onClick",this.position,t,e.pointerType,e),this.resetMouseButtons()}},onPan:function(e){e&&(e.preventDefault(),vec2.set(this.deltaChange,e.deltaX,e.deltaY),vec2.sub(this.deltaChange,this.deltaChange,this.lastDelta),vec2.set(this.lastDelta,e.deltaX,e.deltaY),this.setMouseButtons(e.frakButtons),this.translateCoordinates(this.position,e.center.x,e.center.y),Math.max(vec2.len(this.deltaChange))<100&&("touch"==e.pointerType?this.sendEvent("onPan",this.position,this.deltaChange,e.pointerType,e):this.sendEvent("onMouseMove",this.position,this.button,this.deltaChange,e.pointerType,e)))},onPanStart:function(e){e&&(this.setMouseButtons(e.frakButtons),this.translateCoordinates(this.position,e.center.x,e.center.y),this.sendEvent("onButtonDown",this.position,this.button,0,e.pointerType,e))},onPanEnd:function(e){vec2.set(this.lastDelta,0,0),e&&(this.setMouseButtons(e.frakButtons),this.translateCoordinates(this.position,e.center.x,e.center.y),this.sendEvent("onButtonUp",this.position,this.button,0,e.pointerType,e),this.resetMouseButtons())},onTouch:function(){console.info("onTouch in frak")},onTransformStart:function(e){e.gesture.preventDefault(),e.gesture&&(this.lastRotation=e.gesture.rotation)},onPinch:function(e){if(e.preventDefault(),e){this.translateCoordinates(this.position,e.clientX,e.clientY);var t=e.scale-this.lastPinch;this.lastPinch=e.scale-1,this.sendEvent("onPinch",this.position,t,"touch",e)}},onPinchEnd:function(){this.lastPinch=0},onRotate:function(e){if(e){this.translateCoordinates(this.position,e.clientX,e.clientY);var t=e.rotation-this.lastRotation;this.lastRotation=e.rotation,Math.max(t)<10&&this.sendEvent("onRotate",this.position,t,"touch",e)}},onRotateEnd:function(e){this.lastRotation=0},onMultiDrag:function(e){console.log("Multi drag in frak")},onMouseWheel:function(e){if(e){e.preventDefault();var t=0;t="wheelDelta"in e?e.wheelDelta<0?1:0<e.wheelDelta?-1:0:0<e.deltaY?1:e.deltaY<0?-1:0,this.scrollDelta+=e.deltaY,this.translateCoordinates(this.position,e.clientX,e.clientY),this.sendEvent("onMouseWheel",this.position,this.scrollDelta,t,"mouse",e)}},onMouseWheelMOZ:function(e){if(e){e.preventDefault();var t=0<e.detail?1:e.detail<0?-1:0;this.scrollDelta+=e.detail,this.translateCoordinates(this.position,e.clientX,e.clientY),this.sendEvent("onMouseWheel",this.position,this.scrollDelta,t,"mouse",e)}},onKeyDown:function(e){e&&(this.sendEvent("onKeyDown",e.which,"keyboard",e),this.sendEvent("onKeyStateChange",e.which,!0,"keyboard",e),this.keyStates[e.which]=!0)},onKeyUp:function(e){e&&(this.sendEvent("onKeyUp",e.which,"keyboard",e),this.sendEvent("onKeyStateChange",e.which,!1,"keyboard",e),delete this.keyStates[e.which])},update:function(){this.processKeyEvents()},processKeyEvents:function(){for(var e in this.keyStates)if(this.bindings[e]){var t=this.bindings[e];t&&"object"==typeof t[0]&&"string"==typeof t[1]&&t[0][t[1]](this.engine.fps.getDelta()/1e3,e)}},setMouseButtons:function(e){if(e&&!(e.length<3)){this.button=-1;for(var t=0;t<3;t++)this.buttons[t]=e[t],!0===e[t]&&(this.button=t)}},resetMouseButtons:function(){this.button=-1,this.buttons[0]=!1,this.buttons[1]=!1,this.buttons[2]=!1}});"undefined"!=typeof HammerWF&&(HammerWF.MouseInput.prototype.handler=function(e){if("mousedown"==e.type&&(this.pressed=!0),this.pressed&&this.allow){"mouseup"==e.type&&(this.pressed=!1);var t=[!1,!1,!1];"buttons"in e?(t[0]=!!(1&e.buttons),t[1]=!!(4&e.buttons),t[2]=!!(2&e.buttons)):"button"in e&&(t[e.button]=!0);this.callback(this.manager,{mousedown:1,mousemove:2,mouseup:4}[e.type],{pointers:[e],changedPointers:[e],pointerType:"mouse",srcEvent:e,frakButtons:t})}},HammerWF.PointerEventInput.prototype.handler=function(e){var t=this.store,r=!1,n={2:"touch",3:"pen",4:"mouse",5:"kinect"};var i={pointerdown:1,pointermove:2,pointerup:4,pointercancel:8,pointerout:8}[e.type.toLowerCase().replace("ms","")],o=n[e.pointerType]||e.pointerType,a=function(e,t,r){if(e.indexOf&&!r)return e.indexOf(t);for(var n=0;n<e.length;){if(r&&e[n][r]==t||!r&&e[n]===t)return n;n++}return-1}(t,e.pointerId,"pointerId");if(1&i?a<0&&(t.push(e),a=t.length-1):12&i&&(r=!0),!(a<0)){var s=[!!(1&(t[a]=e).buttons),!!(4&e.buttons),!!(2&e.buttons)];this.callback(this.manager,i,{pointers:t,changedPointers:[e],pointerType:o,srcEvent:e,frakButtons:s}),r&&t.splice(a,1)}});var BuiltInShaders={default:{"shaders\\default\\attributes.frag":"// Attributes shader\r\nprecision mediump float; \r\n\r\nuniform float texCoord2d0Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d1Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d2Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d3Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float positionMultiplier;\t\t\t\t// Position output multiplier between 0 and 1\r\nuniform float tangentMultiplier;\t\t\t\t// Tangent output multiplier between 0 and 1\r\nuniform float bitangentMultiplier;\t\t\t// BiTangent output multiplier between 0 and 1\r\nuniform float normalMultiplier;\t\t\t\t\t// Normal output multiplier between 0 and 1\r\nuniform float barycentricMultiplier;\t\t// Barycentric output multiplier between 0 and 1\r\n\r\nvarying vec2 fragTexcoord2d0;\r\nvarying vec2 fragTexcoord2d1;\r\nvarying vec2 fragTexcoord2d2;\r\nvarying vec2 fragTexcoord2d3;\r\nvarying vec4 fragPosition;\r\nvarying vec4 fragTangent;\r\nvarying vec4 fragBitangent;\r\nvarying vec4 fragNormal;\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = \r\n\t\tvec4(fragTexcoord2d0, 0.0, 1.0)*texCoord2d0Multiplier+\r\n\t\tvec4(fragTexcoord2d1, 0.0, 1.0)*texCoord2d1Multiplier+\r\n\t\tvec4(fragTexcoord2d2, 0.0, 1.0)*texCoord2d2Multiplier+\r\n\t\tvec4(fragTexcoord2d3, 0.0, 1.0)*texCoord2d3Multiplier+\r\n\t\tvec4(fragPosition.rgb, 1.0)*positionMultiplier+\r\n\t\tvec4(fragTangent.rgb, 1.0)*tangentMultiplier+\r\n\t\tvec4(fragBitangent.rgb, 1.0)*bitangentMultiplier+\r\n\t\tvec4(fragNormal.rgb, 1.0)*normalMultiplier+\r\n\t\tvec4(fragBarycentric, 1.0)*barycentricMultiplier;\r\n}","shaders\\default\\attributes.vert":"// Attributes shader\r\nattribute vec3 position; \r\nattribute vec3 tangent; \r\nattribute vec3 bitangent; \r\nattribute vec3 normal; \r\nattribute vec3 barycentric; \r\nattribute vec2 texcoord2d0; \r\nattribute vec2 texcoord2d1;\r\nattribute vec2 texcoord2d2; \r\nattribute vec2 texcoord2d3; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec2 fragTexcoord2d0;\r\nvarying vec2 fragTexcoord2d1;\r\nvarying vec2 fragTexcoord2d2;\r\nvarying vec2 fragTexcoord2d3;\r\nvarying vec4 fragPosition;\r\nvarying vec4 fragTangent;\r\nvarying vec4 fragBitangent;\r\nvarying vec4 fragNormal;\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main() {\r\n\tfragNormal=projection*modelview*vec4(normal, 1.0); \r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n\tfragTangent=projection*modelview*vec4(tangent, 1.0); \r\n\tfragBitangent=projection*modelview*vec4(bitangent, 1.0); \r\n  fragTexcoord2d0=texcoord2d0;\r\n  fragTexcoord2d1=texcoord2d1;\r\n  fragTexcoord2d2=texcoord2d2;\r\n  fragTexcoord2d3=texcoord2d3;\r\n  fragBarycentric=barycentric;\r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\default\\debug.frag":"// Fallback shader\r\nprecision mediump float; \r\n\r\nuniform vec4 color;\r\n\r\nvoid main(void) { \r\n\tgl_FragColor = color;\r\n}","shaders\\default\\debug.vert":"// Debug shader\r\nattribute vec3 position; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragPosition;\r\n\r\nvoid main() {\r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\default\\DebugPackedDepthTexture.frag":"// DebugPackedDepthTexture\r\nprecision highp float;\r\n\r\n#define USE_VSM\r\n\r\nuniform mat4 modelview;\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec2 uv0;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nfloat unpackHalf(vec2 c) {\r\n\treturn c.x + (c.y / 255.0);\r\n}\r\n\r\nvoid main(void) {\r\n\tvec4 texel = texture2D(diffuse0, uv0);\r\n\r\n#ifdef USE_VSM\r\n\tgl_FragColor = vec4(0.0, unpackHalf(texel.xy), unpackHalf(texel.zw), 1.0);\r\n#else\r\n\tfloat depth = unpack(texel);\r\n\tgl_FragColor = vec4(depth, depth, depth, 1.0);\r\n#endif\r\n}\r\n","shaders\\default\\DebugPackedDepthTexture.vert":"// DebugPackedDepthTexture\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec2 uv0;\r\n\r\nvoid main() {\r\n\tuv0=texcoord2d0;\r\n\tviewPosition = modelview * vec4(position, 1.0);\r\n\tviewNormal = normalize(mat3(modelview)*normal);\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\deferred_background.frag":"precision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main () {\r\n\tgl_FragColor = color;\r\n}\r\n","shaders\\default\\deferred_background.vert":"attribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\deferred_gbuffer.frag":"#extension GL_EXT_draw_buffers : require\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\nuniform float lightContribution;\r\nuniform int useNormalmap;\r\nuniform int useReflection;\r\nuniform int receiveShadows;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D normal0;\r\nuniform samplerCube env0;\r\nuniform sampler2D mask;\r\n\r\nvarying float depth;\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\n\r\nvarying mat3 tbn;\r\n\r\nvec3 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = textureCube(env0, lookup);\r\n\treturn color.rgb;\r\n}\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tvec3 N = viewNormal;\r\n\tif (useNormalmap == 1) {\r\n\t\tvec4 encodedNormal = texture2D(normal0, uv0);\r\n\t\tvec3 localCoords = vec3(2.0 * encodedNormal.rg - vec2(1.0), encodedNormal.b);\r\n\t\tN = normalize(tbn * localCoords);\r\n\t\tN = normalize(mat3(view) * N);\r\n\t}\r\n\r\n\tif (useReflection == 1) {\r\n\t\tvec3 refl = reflection();\r\n\t\tfloat maskValue = texture2D(mask, uv0).r;\r\n\t\tcolor.rgb = mix(refl, color.rgb, maskValue * materialBlend);\r\n\t}\r\n\r\n\tgl_FragData[0] = vec4(color.rgb, specularStrength);\r\n\tgl_FragData[1] = vec4(N, depth);\r\n\tgl_FragData[2] = vec4(worldPosition.xyz, float(specularPower)/255.0);\r\n\tgl_FragData[3] = vec4(lightContribution, receiveShadows, depth, 1.0);\r\n}\r\n","shaders\\default\\deferred_gbuffer.vert":"attribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\nattribute vec3 tangent;\r\nattribute vec3 bitangent;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float zNear;\r\nuniform float zFar;\r\n\r\nvarying float depth;\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\n\r\nvarying mat3 tbn;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tdepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n\r\n\ttbn[0] = normalize(vec3(model * vec4(tangent, 0.0)));\r\n\ttbn[1] = normalize(vec3(model * vec4(bitangent, 0.0)));\r\n\ttbn[2] = worldNormal;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\deferred_light_ambient.frag":"precision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\nuniform sampler2D shadow0;\r\n\r\nuniform vec4 lightColor;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main () {\r\n\tvec4 data0 = texture2D(gb0, uv);\r\n\tvec3 color = data0.rgb * lightColor.rgb;\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}\r\n\r\n","shaders\\default\\deferred_light_ambient.vert":"attribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = texcoord2d0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\deferred_light_directional.frag":"precision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\nuniform sampler2D shadow0;\r\n\r\nuniform vec3 cameraPosition;\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\n\r\nuniform mat4 view;\r\nuniform mat4 lightView;\r\nuniform mat4 lightProjection;\r\nuniform float shadowBias;\r\n\r\nuniform int useShadows;\r\nuniform int useSoftShadows;\r\nuniform int shadowOnly;\r\n\r\nvarying vec2 uv;\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap(vec4 worldPosition) {\r\n\tvec4 shadowPosition = lightProjection * lightView * worldPosition;\r\n\tvec2 shadowUV = shadowPosition.xy / shadowPosition.w;\r\n\tshadowUV = shadowUV * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, shadowUV);\r\n\r\n\treturn VSM(shadowTexel.xy, shadowPosition.z);\r\n\t// return step(shadowPosition.z - shadowBias, shadowTexel.r);\r\n}\r\n\r\nvoid main () {\r\n\tvec4 data2 = texture2D(gb2, uv); // position, specularPower/255\r\n\tvec4 data3 = texture2D(gb3, uv); // material parameters: (lightContribution, receiveShadows, unused, unused)\r\n\tvec4 P = vec4(data2.xyz, 1.0);\r\n\r\n\tfloat shadow = 1.0;\r\n\r\n\tif (useShadows == 1 && data3.g > 0.0) {\r\n\t\tif (useSoftShadows == 1)\r\n\t\t\tshadow = texture2D(shadow0, uv).r;\r\n\t\telse\r\n\t\t\tshadow = shadowmap(P);\r\n\t}\r\n\r\n\tif (shadowOnly == 1) {\r\n\t\tgl_FragColor = vec4(shadow, shadow, shadow, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvec4 data0 = texture2D(gb0, uv); // color, specularIntensity\r\n\r\n\tvec4 data1 = texture2D(gb1, uv); // normal, depth\r\n\r\n\tvec3 C = data0.xyz;\r\n\tvec3 N = data1.xyz;\r\n\tfloat specularIntensity = data0.w;\r\n\tfloat specularPower = 255.0*data2.w;\r\n\r\n\tvec4 viewPosition = view * P;\r\n\tvec3 L = normalize(mat3(view) * lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0);\r\n\tfloat specularLight = pow(clamp(dot(N, H), 0.0, 1.0), float(specularPower));\r\n\tvec3 diffuseColor = C * lightColor.rgb * diffuseLight * lightIntensity;\r\n\tvec3 specularColor = lightColor.rgb * specularLight * specularIntensity;\r\n\r\n\tvec3 lighting = diffuseColor + specularColor;\r\n\r\n\tvec3 final = shadow * mix(C, lighting, data3.r);\r\n\tgl_FragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\default\\deferred_light_directional.vert":"attribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = texcoord2d0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\deferred_light_omni.frag":"precision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\n\r\nuniform vec4 lightColor;\r\nuniform vec3 lightPosition;\r\nuniform float lightIntensity;\r\nuniform float lightRadius;\r\n\r\nuniform mat4 view;\r\nuniform vec3 cameraPosition;\r\n\r\nvarying vec4 screenPosition;\r\n\r\nvoid main() {\r\n\tvec2 uv = screenPosition.xy;\r\n\tuv /= screenPosition.w;\r\n\tuv = 0.5 * (vec2(uv.x, uv.y) + 1.0);\r\n\r\n\tvec4 data0 = texture2D(gb0, uv); // color.rgb, specularIntensity\r\n\tvec4 data1 = texture2D(gb1, uv); // normal.xyz, depth\r\n\tvec4 data2 = texture2D(gb2, uv); // position.xyz, specularPower/255\r\n\t// vec4 data3 = texture2D(gb3, uv); // unused\r\n\r\n\tvec3 C = data0.xyz;\r\n\tvec3 N = data1.xyz;\r\n\tvec3 P = data2.xyz;\r\n\tfloat specularIntensity = data0.w;\r\n\tfloat specularPower = 255.0*data2.w;\r\n\r\n\tvec3 lightVector = lightPosition - P;\r\n\tfloat attenuation = clamp(1.0 - length(lightVector)/lightRadius, 0.0, 1.0);\r\n\tlightVector = normalize(lightVector);\r\n\r\n\tvec4 viewPosition = view * vec4(P, 1.0);\r\n\tvec3 L = normalize(mat3(view) * lightVector);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0);\r\n\tfloat specularLight = pow(clamp(dot(N, H), 0.0, 1.0), float(specularPower));\r\n\tvec3 diffuseColor = C * lightColor.rgb * diffuseLight * lightIntensity;\r\n\tvec3 specularColor = lightColor.rgb * specularLight * specularIntensity;\r\n\r\n\tvec3 final = attenuation * (diffuseColor + specularColor);\r\n\r\n\tgl_FragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\default\\deferred_light_omni.vert":"attribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 screenPosition;\r\n\r\nvoid main() {\r\n\tscreenPosition = projection * view * model * vec4(position, 1.0);\r\n\tgl_Position = screenPosition;\r\n}\r\n","shaders\\default\\deferred_shadow_directional.frag":"/** Directional light shadow-map */\r\n#extension GL_OES_standard_derivatives : require\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture2D(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat dx = dFdx(depth);\r\n\tfloat dy = dFdy(depth);\r\n\tgl_FragColor = vec4(depth, pow(depth, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);\r\n}\r\n","shaders\\default\\deferred_shadow_directional.vert":"/** Directional light shadow-map */\r\nattribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tvec4 clipPosition = projection * viewPosition;\r\n\tdepth = clipPosition.z;\r\n\tuv = texcoord2d0;\r\n\tgl_Position = clipPosition;\r\n}\r\n","shaders\\default\\depth.frag":"// Shader for rendering linear depth values into a floating point texture\r\nprecision mediump float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture2D(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tgl_FragColor = vec4(depth, depth, depth, depth);\r\n}\r\n","shaders\\default\\depth.vert":"// Shader for rendering linear depth values into a floating point texture\r\nattribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float zNear;\r\nuniform float zFar;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tdepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n\tuv = texcoord2d0;\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\DepthRGBA.frag":"// Shader for rendering linear depth values into RGBA texture\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\n// uniform float linearDepthConstant;\r\n\r\n/** Packing Type:\r\n\t1 - packs depth value into RGBA\r\n\t2 - packs depth into RG and depth*depth into BA\r\n**/\r\nuniform int packingType;\r\n\r\nvarying vec4 viewPosition;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvec2 packHalf(float depth) {\r\n\tconst vec2 bias = vec2(1.0 / 255.0, 0.0);\r\n\tvec2 c = vec2(depth, fract(depth * 255.0));\r\n\treturn c - (c.yy * bias);\r\n}\r\n\r\nvoid main () {\r\n\tif (packingType==2) {\r\n\t\tgl_FragColor = vec4(packHalf(gl_FragCoord.z), packHalf(gl_FragCoord.z*gl_FragCoord.z));\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = pack(gl_FragCoord.z); // less precision, but works on most systems\r\n\t\t// float linearDepth = length(viewPosition) * linearDepthConstant;\r\n\t\t// gl_FragColor = pack(linearDepth);\r\n\t}\r\n}\r\n","shaders\\default\\DepthRGBA.vert":"// Shader for rendering linear depth values into RGBA texture\r\nattribute vec3 position;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 viewPosition;\r\n\r\nvoid main() {\r\n\tviewPosition=modelview*vec4(position, 1.0);\r\n\tgl_Position=projection*viewPosition;\r\n}\r\n","shaders\\default\\diffuse.frag":"// Diffuse shader\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = lighting(shadow);\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\default\\diffuse.vert":"// Diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\r\n\tuv0 = texcoord2d0; // TODO: In the future this will probably need to use texture offset and scale uniforms\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\fallback.frag":"// Fallback shader\r\nprecision mediump float; \r\n\r\nvoid main(void) { \r\n\tgl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n}","shaders\\default\\fallback.vert":"// Fallback shader\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n  fragNormal=modelview*vec4(normal, 1.0);\r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n  fragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\default\\font.frag":"// Diffuse shader\r\nprecision mediump float; \r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform int page;\t\t\t\t\t\t// The font page texture\r\n\r\nuniform sampler2D page0;\t\t\r\nuniform sampler2D page1;\r\nuniform sampler2D page2;\r\nuniform sampler2D page3;\r\nuniform sampler2D page4;\r\nuniform sampler2D page5;\r\nuniform sampler2D page6;\r\nuniform sampler2D page7;\r\n\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main(void) {\r\n\tvec4 c;\r\n\tif(page==0) c = texture2D(page0, fragTexcoord2d0);\r\n\tif(page==1) c = texture2D(page1, fragTexcoord2d0);\r\n\tif(page==2) c = texture2D(page2, fragTexcoord2d0);\r\n\tif(page==3) c = texture2D(page3, fragTexcoord2d0);\r\n\tif(page==4) c = texture2D(page4, fragTexcoord2d0);\r\n\tif(page==5) c = texture2D(page5, fragTexcoord2d0);\r\n\tif(page==6) c = texture2D(page6, fragTexcoord2d0);\r\n\tif(page==7) c = texture2D(page7, fragTexcoord2d0);\r\n\tgl_FragColor=vec4(diffuse.r*c.r, diffuse.g*c.g, diffuse.b*c.b, c.a);\r\n}","shaders\\default\\font.vert":"// Font shader\r\nattribute vec3 position; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n\tfragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\default\\forward_shadow.frag":"/** Directional light shadow-map */\r\nprecision highp float;\r\n\r\nuniform int hasFloat;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture2D(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat d = (depth + 1.0) * 0.5;\r\n\r\n\tif (hasFloat == 1) {\r\n\t\tgl_FragColor = vec4(d, d, d, 1.0);\r\n\t}\r\n\telse {\r\n\t\tgl_FragColor = pack(d);\r\n\t}\r\n\r\n}\r\n","shaders\\default\\forward_shadow.vert":"/** Directional light shadow-map */\r\nattribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tvec4 clipPosition = projection * viewPosition;\r\n\tdepth = clipPosition.z;\r\n\tuv = texcoord2d0;\r\n\tgl_Position = clipPosition;\r\n}\r\n","shaders\\default\\forward_shadow_vsm.frag":"/** Directional light shadow-map */\r\n#extension GL_OES_standard_derivatives : require\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nvarying float depth;\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture2D(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat d = (depth + 1.0) * 0.5;\r\n\tfloat dx = dFdx(d);\r\n\tfloat dy = dFdy(d);\r\n\r\n\tgl_FragColor = vec4(d, pow(d, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);\r\n}\r\n","shaders\\default\\GaussianBlur.frag":"// Shader for rendering gaussian blurred image (horizontal)\r\nprecision highp float;\r\n\r\n#define MAX_BLUR_KERNEL_SIZE 10\r\n\r\nuniform float screenWidth;\r\nuniform float screenHeight;\r\nuniform int orientation; // 0 - horizontal, 1 - vertical\r\nuniform int kernelSize; // Recommended values: 3, 5, 7, 10 (10 is currently the maximum)\r\nuniform sampler2D tex0;\r\n\r\nvarying vec2 uv0;\r\n\r\nvoid main () {\r\n\tfloat halfSize = float(kernelSize)*0.5;\r\n\tvec2 texelSize = vec2(1.0/screenWidth, 1.0/screenHeight);\r\n\tvec4 color = vec4(0.0);\r\n\r\n\tif (orientation==1) {\r\n\t\t// vertical pass\r\n\t\tfor (int i=0; i<MAX_BLUR_KERNEL_SIZE; ++i) {\r\n\t\t\tif (i>=kernelSize)\r\n\t\t\t\tbreak;\r\n\t\t\tfloat offset = float(i)-halfSize;\r\n\t\t\tcolor += texture2D(tex0, uv0 + vec2(0.0, offset * texelSize.y));\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\t// horizontal pass\r\n\t\tfor (int i=0; i<MAX_BLUR_KERNEL_SIZE; ++i) {\r\n\t\t\tif (i>=kernelSize)\r\n\t\t\t\tbreak;\r\n\t\t\tfloat offset = float(i)-halfSize;\r\n\t\t\tcolor += texture2D(tex0, uv0 + vec2(offset * texelSize.x, 0.0));\r\n\t\t}\r\n\t}\r\n\tgl_FragColor = color / float(kernelSize);\r\n\t// gl_FragColor = texture2D(tex0, uv0);\r\n}\r\n","shaders\\default\\GaussianBlur.vert":"// Shader for rendering gaussian blurred image (horizontal)\r\nattribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float screenWidth;\r\nuniform float screenHeight;\r\n\r\nvarying vec2 uv0;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\t\r\n\t// Resizes the rendered unit-quad to screen size\r\n\tvec4 viewPosition=modelview*vec4(position.x*screenWidth, position.y*screenHeight, position.z, 1.0);\r\n\tgl_Position=projection*viewPosition;\r\n}\r\n","shaders\\default\\lines.frag":"precision mediump float;\r\n\r\nvarying vec4 fragColor;\r\nvarying vec4 fragPosition;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = fragColor;\r\n}\r\n","shaders\\default\\lines.vert":"attribute vec3 position;\r\nattribute vec3 pointA;\r\nattribute vec3 pointB;\r\nattribute float width;\r\nattribute vec4 color;\r\n\r\nuniform vec2 viewport;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragColor;\r\nvarying vec4 fragPosition;\r\n\r\nvoid main() {\r\n\tvec4 pA = projection * modelview * vec4(pointA, 1.0);\r\n\tvec4 pB = projection * modelview * vec4(pointB, 1.0);\r\n\r\n\tvec2 screenA = viewport * (0.5 * pA.xy / pA.w + 0.5);\r\n\tvec2 screenB = viewport * (0.5 * pB.xy / pB.w + 0.5);\r\n\r\n\tvec2 xBasis = normalize(screenB - screenA);\r\n\tvec2 yBasis = vec2(-xBasis.y, xBasis.x);\r\n\r\n\tvec2 offsetA = screenA.xy + width * (position.x * xBasis + position.y * yBasis);\r\n\tvec2 offsetB = screenB.xy + width * (position.x * xBasis + position.y * yBasis);\r\n\r\n\tvec2 pt = mix(offsetA, offsetB, position.z);\r\n\tvec4 clip = mix(pA, pB, position.z);\r\n\r\n\tfragColor = color;\r\n\tfragPosition=modelview*vec4(position, 1.0);\r\n\tgl_Position=vec4(clip.w * ((2.0 * pt) / viewport - 1.0), clip.z, clip.w);\r\n}\r\n","shaders\\default\\normalmapped.frag":"// Normal mapped diffuse shader\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D normal0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying mat3 tbn;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 encodedNormal = texture2D(normal0, uv0);\r\n\t// vec3 localCoords = 2.0 * encodedNormal.rgb - vec3(1.0);\r\n\tvec3 localCoords = vec3(2.0 * encodedNormal.rg - vec2(1.0), encodedNormal.b);\r\n\tvec3 normalDirection = normalize(tbn * localCoords);\r\n\tvec3 N = normalize(mat3(view) * normalDirection);\r\n\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = lighting(shadow);\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\default\\normalmapped.vert":"// Normal mapped diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\nattribute vec3 tangent;\r\nattribute vec3 bitangent;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\nuniform vec3 lightDirection;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying mat3 tbn;\r\n\r\nhighp mat3 transpose(in highp mat3 m) {\r\n\thighp vec3 i0 = m[0];\r\n\thighp vec3 i1 = m[1];\r\n\thighp vec3 i2 = m[2];\r\n\thighp mat3 outMatrix = mat3(\r\n\t\tvec3(i0.x, i1.x, i2.x),\r\n\t\tvec3(i0.y, i1.y, i2.y),\r\n\t\tvec3(i0.z, i1.z, i2.z)\r\n\t);\r\n\treturn outMatrix;\r\n}\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0; // TODO: In the future this will probably need to use texture offset and scale uniforms\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = normalize(mat3(modelview) * normal);\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\ttbn[0] = normalize(vec3(model * vec4(tangent, 0.0)));\r\n\ttbn[1] = normalize(vec3(model * vec4(bitangent, 0.0)));\r\n\ttbn[2] = worldNormal;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\OITAccum.frag":"/**\r\n * Based on the following ideas:\r\n *\r\n *   - Weighted Blended Order-Independent Transparency\r\n *     http://jcgt.org/published/0002/02/09/\r\n *\r\n *   - Stochastic Transparency\r\n *     http://www.nvidia.com/object/nvidia_research_pub_016.html\r\n *\r\n *   - Simplex noise (C) Ashima Arts\r\n *     https://github.com/ashima/webgl-noise\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nuniform int render_mode;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvec4 mod289(vec4 x) {\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nfloat mod289(float x) {\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x) {\r\n\treturn mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nfloat permute(float x) {\r\n\treturn mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r) {\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfloat taylorInvSqrt(float r) {\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nvec4 grad4(float j, vec4 ip) {\r\n\tconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\r\n\tvec4 p,s;\r\n\tp.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\r\n\tp.w = 1.5 - dot(abs(p.xyz), ones.xyz);\r\n\ts = vec4(lessThan(p, vec4(0.0)));\r\n\tp.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\r\n\treturn p;\r\n}\r\n\r\n// (sqrt(5) - 1)/4 = F4, used once below\r\n#define F4 0.309016994374947451\r\n\r\nfloat snoise(vec4 v) {\r\n\tconst vec4 C = vec4(\r\n\t\t0.138196601125011, // (5 - sqrt(5))/20 G4\r\n\t\t0.276393202250021, // 2 * G4\r\n\t\t0.414589803375032, // 3 * G4\r\n\t\t-0.447213595499958); // -1 + 4 * G4\r\n\r\n\t// First corner\r\n\tvec4 i = floor(v + dot(v, vec4(F4)) );\r\n\tvec4 x0 = v - i + dot(i, C.xxxx);\r\n\r\n\t// Other corners\r\n\t// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\r\n\tvec4 i0;\r\n\tvec3 isX = step( x0.yzw, x0.xxx );\r\n\tvec3 isYZ = step( x0.zww, x0.yyz );\r\n\t// i0.x = dot( isX, vec3( 1.0 ) );\r\n\ti0.x = isX.x + isX.y + isX.z;\r\n\ti0.yzw = 1.0 - isX;\r\n\t// i0.y += dot( isYZ.xy, vec2( 1.0 ) );\r\n\ti0.y += isYZ.x + isYZ.y;\r\n\ti0.zw += 1.0 - isYZ.xy;\r\n\ti0.z += isYZ.z;\r\n\ti0.w += 1.0 - isYZ.z;\r\n\r\n\t// i0 now contains the unique values 0,1,2,3 in each channel\r\n\tvec4 i3 = clamp( i0, 0.0, 1.0 );\r\n\tvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\r\n\tvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\r\n\t// x0 = x0 - 0.0 + 0.0 * C.xxxx\r\n\t// x1 = x0 - i1 + 1.0 * C.xxxx\r\n\t// x2 = x0 - i2 + 2.0 * C.xxxx\r\n\t// x3 = x0 - i3 + 3.0 * C.xxxx\r\n\t// x4 = x0 - 1.0 + 4.0 * C.xxxx\r\n\tvec4 x1 = x0 - i1 + C.xxxx;\r\n\tvec4 x2 = x0 - i2 + C.yyyy;\r\n\tvec4 x3 = x0 - i3 + C.zzzz;\r\n\tvec4 x4 = x0 + C.wwww;\r\n\r\n\t// Permutations\r\n\ti = mod289(i);\r\n\tfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\r\n\tvec4 j1 = permute( permute( permute( permute (\r\n\ti.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\r\n\t+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\r\n\t+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\r\n\t+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\r\n\r\n\t// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\r\n\t// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\r\n\tvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\r\n\tvec4 p0 = grad4(j0, ip);\r\n\tvec4 p1 = grad4(j1.x, ip);\r\n\tvec4 p2 = grad4(j1.y, ip);\r\n\tvec4 p3 = grad4(j1.z, ip);\r\n\tvec4 p4 = grad4(j1.w, ip);\r\n\r\n\t// Normalise gradients\r\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n\tp0 *= norm.x;\r\n\tp1 *= norm.y;\r\n\tp2 *= norm.z;\r\n\tp3 *= norm.w;\r\n\tp4 *= taylorInvSqrt(dot(p4,p4));\r\n\r\n\t// Mix contributions from the five corners\r\n\tvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\r\n\tvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4) ), 0.0);\r\n\tm0 = m0 * m0;\r\n\tm1 = m1 * m1;\r\n\treturn 49.0 *\r\n\t\t( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\r\n\t\t+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\r\n}\r\n\r\nfloat oit_weight(float z, vec4 color) {\r\n\treturn max(min(1.0, max(max(color.r, color.g), color.b) * color.a), color.a) * clamp(0.03 / (1e-5 + pow(z / 200.0, 4.0)), 1e-2, 3e3);\r\n}\r\n\r\nvec4 lighting() {\r\n\t/* TODO: proper lighting for transparent surfaces */\r\n\tvec4 textureColor = texture2D(diffuse0, fragTexcoord2d0);\r\n\tvec4 color = diffuse * textureColor;\r\n\treturn color;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec4 color = lighting();\r\n\r\n\t// Weighted Blended Order-Independent Transparency color pass\r\n\tif (render_mode == 0) {\r\n\t\tfloat linDepth = 2.0 * zNear * zFar / (zFar + zNear - (2.0 * -fragPosition.z - 1.0) * (zFar - zNear));\r\n\t\tfloat weight = oit_weight(linDepth, color);\r\n\t\tgl_FragColor = vec4(color.rgb * color.a, color.a) * weight;\r\n\t}\r\n\r\n\t// Alpha reveal amount pass\r\n\telse if (render_mode == 1) {\r\n\t\tgl_FragColor = vec4(color.a); // total amount revealed (blending: 0; 1-src.a)\r\n\t}\r\n\r\n\t// Alpha mapping pass\r\n\telse if (render_mode == 2) {\r\n\t\tif (color.a < 0.99)\r\n\t\t\tdiscard;\r\n\t\tgl_FragColor = color;\r\n\t}\r\n\r\n\t// Stochastic transparency pass\r\n\telse if (render_mode == 3) {\r\n\t\tfloat random = snoise(fragPosition*150.0);\r\n\t\tif (random > color.a)\r\n\t\t\tdiscard;\r\n\t\tgl_FragColor = vec4(color.rgb * color.a, 1.0);\r\n\t}\r\n}\r\n","shaders\\default\\OITAccum.vert":"/** Order independent transparency - vertex program */\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n\tfragNormal = mat3(modelview) * normal;\r\n\tfragPosition = modelview * vec4(position, 1.0);\r\n\tfragTexcoord2d0 = texcoord2d0;\r\n\tgl_Position = projection * fragPosition;\r\n}\r\n","shaders\\default\\OITRender.frag":"/**\r\n * Weighted Blended Order-Independent Transparency - Compositing program\r\n * Based on http://jcgt.org/published/0002/02/09/\r\n */\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 uv;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform int render_mode;\r\n\r\nuniform sampler2D src;\r\nuniform sampler2D oitAccum;\r\nuniform sampler2D oitWeight;\r\n\r\nvoid addRelevantSample(vec2 coords, float weight, inout vec4 accum) {\r\n\tvec4 sample = texture2D(oitAccum, coords);\r\n\tif (sample.a < 1.0)\r\n\t\treturn;\r\n\tfloat a = texture2D(oitWeight, coords).a;\r\n\tif (a>0.99)\r\n\t\treturn;\r\n\taccum += sample * weight * a;\r\n}\r\n\r\nvec4 avgColor(sampler2D s, vec2 coords) {\r\n\tvec2 step = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\r\n\tvec2 kernel[8];\r\n\tkernel[0] = vec2(-step.x, step.y);\r\n\tkernel[1] = vec2(0.0, step.y);\r\n\tkernel[2] = vec2(step.x, step.y);\r\n\tkernel[3] = vec2(step.x, 0.0);\r\n\tkernel[4] = vec2(-step.x, 0.0);\r\n\tkernel[5] = vec2(-step.x, -step.y);\r\n\tkernel[6] = vec2(0.0, -step.y);\r\n\tkernel[7] = vec2(step.x, -step.y);\r\n\r\n\tvec4 sum = vec4(0.0);\r\n\tfloat weight = 1.0 / (2.0 + 1.0);\r\n\tfloat kernelSize = 1.0;\r\n\r\n\taddRelevantSample(coords, weight, sum);\r\n\r\n\tfor (int i=0; i<8; i++) {\r\n\t\taddRelevantSample(coords + kernel[i] * kernelSize, weight, sum);\r\n\t}\r\n\r\n\tkernelSize = 2.0;\r\n\tfor (int i=0; i<8; i++) {\r\n\t\taddRelevantSample(coords + kernel[i] * kernelSize, weight, sum);\r\n\t}\r\n\r\n\treturn sum;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Blending: ONE_MINUS_SRC_ALPHA, SRC_ALPHA\r\n\r\n\tvec4 solidColor = texture2D(src, uv);\r\n\tfloat reveal = texture2D(oitWeight, uv).a;\r\n\tvec4 transparentColor;\r\n\r\n\t// Blended order transparency\r\n\tif (render_mode == 0) {\r\n\t\ttransparentColor = texture2D(oitAccum, uv);\r\n\r\n\t\tvec4 composite = vec4(transparentColor.rgb / max(transparentColor.a, 1e-5), reveal);\r\n\t\tgl_FragColor = (1.0-composite.a) * composite +  composite.a * solidColor;\r\n\t}\r\n\r\n\t// Stochastic transparency\r\n\telse if (render_mode == 1) {\r\n\t\ttransparentColor = avgColor(oitAccum, uv);\r\n\t\tgl_FragColor = (1.0 - reveal) * transparentColor + reveal * solidColor;\r\n\t}\r\n}\r\n","shaders\\default\\OITRender.vert":"/** Order independent transparency - vertex program */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\positionbuffer.frag":"//Normal buffer\r\nprecision highp float;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform mat4 modelview;\r\n\r\nvarying vec4 worldPosition;\r\nvarying vec4 viewPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec3 viewNormal;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvoid main() {\r\n    float linDepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n    gl_FragColor = pack(linDepth);\r\n}","shaders\\default\\positionbuffer.vert":"//Normal buffer\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 worldPosition;\r\nvarying vec4 viewPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec3 viewNormal;\r\n\r\nvoid main() {\r\n    worldPosition = model * vec4(position, 1.0);\r\n    viewPosition = view * worldPosition;\r\n    worldNormal = normalize(mat3(model)*normal);\r\n    viewNormal = mat3(modelview) * normal;\r\n    \r\n    gl_Position = projection * viewPosition;\r\n}","shaders\\default\\postprocess_blur.frag":"/**\r\n * Blur post-process\r\n * http://www.sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying highp vec2 blurCoords[5];\r\n\r\nvoid main () {\r\n\tlowp vec4 sum = vec4(0.0);\r\n\tsum += texture2D(src, blurCoords[0]) * 0.204164;\r\n\tsum += texture2D(src, blurCoords[1]) * 0.304005;\r\n\tsum += texture2D(src, blurCoords[2]) * 0.304005;\r\n\tsum += texture2D(src, blurCoords[3]) * 0.093913;\r\n\tsum += texture2D(src, blurCoords[4]) * 0.093913;\r\n\tgl_FragColor = sum;\r\n}\r\n","shaders\\default\\postprocess_blur.vert":"/**\r\n * Blur post-process\r\n * http://www.sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu\r\n */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform vec2 BlurSize;\r\n\r\nvarying vec2 blurCoords[5];\r\n\r\nvoid main() {\r\n\tvec2 offset = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y) * BlurSize;\r\n\r\n\tblurCoords[0] = uv0;\r\n\tblurCoords[1] = uv0 + offset * 1.407333;\r\n\tblurCoords[2] = uv0 - offset * 1.407333;\r\n\tblurCoords[3] = uv0 + offset * 3.294215;\r\n\tblurCoords[4] = uv0 - offset * 3.294215;\r\n\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\postprocess_fxaa.frag":'/**\r\n * FXAA post-process\r\n *\r\n * Based on webgl-meincraft FXAA implementation.\r\n * https://github.com/mitsuhiko/webgl-meincraft/blob/master/assets/shaders/fxaa.glsl\r\n */\r\n\r\n/*\r\nCopyright (c) 2011 by Armin Ronacher.\r\n\r\nSome rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n\r\n    * Redistributions in binary form must reproduce the above\r\n      copyright notice, this list of conditions and the following\r\n      disclaimer in the documentation and/or other materials provided\r\n      with the distribution.\r\n\r\n    * The names of the contributors may not be used to endorse or\r\n      promote products derived from this software without specific\r\n      prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n/**\r\n * Basic FXAA implementation based on the code on geeks3d.com with the\r\n * modification that the texture2DLod stuff was removed since it\'s\r\n * unsupported by WebGL.\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform float reduce_min;\r\nuniform float reduce_mul;\r\nuniform float span_max;\r\n\r\nvarying vec2 uv;\r\n\r\nvec4 fxaa(sampler2D tex, vec2 texCoord) {\r\n\tvec4 color;\r\n\tvec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\tvec3 rgbNW = texture2D(tex, texCoord + vec2(-1.0, -1.0) * inverseVP).xyz;\r\n\tvec3 rgbNE = texture2D(tex, texCoord + vec2(1.0, -1.0) * inverseVP).xyz;\r\n\tvec3 rgbSW = texture2D(tex, texCoord + vec2(-1.0, 1.0) * inverseVP).xyz;\r\n\tvec3 rgbSE = texture2D(tex, texCoord + vec2(1.0, 1.0) * inverseVP).xyz;\r\n\tvec3 rgbM = texture2D(tex, texCoord).xyz;\r\n\tvec3 luma = vec3(0.299, 0.587, 0.114);\r\n\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir;\r\n\tdir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\r\n\tdir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));\r\n\r\n\tfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * reduce_mul), reduce_min);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(span_max, span_max), max(vec2(-span_max, -span_max), dir * rcpDirMin)) * inverseVP;\r\n\r\n\tvec3 rgbA = 0.5 * (\r\n\t\ttexture2D(tex, texCoord + dir * (1.0 / 3.0 - 0.5)).xyz +\r\n\t\ttexture2D(tex, texCoord + dir * (2.0 / 3.0 - 0.5)).xyz);\r\n\tvec3 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture2D(tex, texCoord + dir * -0.5).xyz +\r\n\t\ttexture2D(tex, texCoord + dir * 0.5).xyz);\r\n\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax))\r\n\t\tcolor = vec4(rgbA, 1.0);\r\n\telse\r\n\t\tcolor = vec4(rgbB, 1.0);\r\n\treturn color;\r\n}\r\n\r\nvoid main () {\r\n\tgl_FragColor = fxaa(src, uv);\r\n}\r\n',"shaders\\default\\postprocess_fxaa.vert":"/** FXAA post-process effect vertex shader */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\postprocess_ssao.frag":"/*\r\n * Screen space ambient occlusion post process\r\n *\r\n * SSAO GLSL shader v1.2\r\n * assembled by Martins Upitis (martinsh) (devlog-martinsh.blogspot.com)\r\n * original technique is made by Arkano22 (www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)\r\n *\r\n * Changelog:\r\n * 1.2 - added fog calculation to mask AO. Minor fixes.\r\n * 1.1 - added spiral sampling method from here:\r\n * (http://www.cgafaq.info/wiki/Evenly_distributed_points_on_sphere)\r\n */\r\n\r\nprecision highp float;\r\n\r\n#define PI 3.14159265\r\n\r\nuniform sampler2D depth0;\r\nuniform sampler2D oitWeight;\r\nuniform sampler2D src;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform int ssaoOnly;\r\nuniform float gdisplace; // Gauss bell center, default: 0.3\r\nuniform float radius; // AO radius, default: 2.0\r\nuniform float brightness; // AO brightness, default: 1.0\r\nuniform float luminanceInfluence; // how much luminance affects occlusion, default: 0.7\r\n\r\nconst int samples = 16;\r\n// const int samples = 8;\r\n\r\nfloat aoclamp = 0.25; // depth clamp - reduces haloing at screen edges\r\nbool noise = true; // use noise instead of pattern for sample dithering\r\nfloat noiseamount = 0.0002; // dithering amount\r\nfloat diffarea = 0.4; // self-shadowing reduction\r\n\r\nvec2 rand(vec2 coord) {\r\n\tfloat noiseX = ((fract(1.0-coord.s*(ViewportSize.x/2.0))*0.25)+(fract(coord.t*(ViewportSize.y/2.0))*0.75))*2.0-1.0;\r\n\tfloat noiseY = ((fract(1.0-coord.s*(ViewportSize.x/2.0))*0.75)+(fract(coord.t*(ViewportSize.y/2.0))*0.25))*2.0-1.0;\r\n\tif (noise) {\r\n\t\tnoiseX = clamp(fract(sin(dot(coord, vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\r\n\t\tnoiseY = clamp(fract(sin(dot(coord, vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\r\n\t}\r\n\treturn vec2(noiseX, noiseY) * noiseamount;\r\n}\r\n\r\nfloat readDepth(in vec2 coord) {\r\n\treturn texture2D(depth0, coord).r;\r\n}\r\n\r\nfloat compareDepths(in float depth1, in float depth2, inout int far) {\r\n\tfloat garea = 2.0; // gauss bell width\r\n\tfloat diff = (depth1 - depth2)*100.0; // depth difference (0-100)\r\n\t// reduce left bell width to avoid self-shadowing\r\n\tif (diff<gdisplace) {\r\n\t\tgarea = diffarea;\r\n\t}\r\n\telse {\r\n\t\tfar = 1;\r\n\t}\r\n\r\n\tfloat gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));\r\n\treturn gauss;\r\n}\r\n\r\nfloat calAO(vec2 uv, float depth, float dw, float dh) {\r\n\tfloat dd = (1.0-depth) * radius;\r\n\r\n\tfloat temp = 0.0;\r\n\tfloat temp2 = 0.0;\r\n\tfloat coordw = uv.x + dw*dd;\r\n\tfloat coordh = uv.y + dh*dd;\r\n\tfloat coordw2 = uv.x - dw*dd;\r\n\tfloat coordh2 = uv.y - dh*dd;\r\n\r\n\tvec2 coord = vec2(coordw , coordh);\r\n\tvec2 coord2 = vec2(coordw2, coordh2);\r\n\r\n\tint far = 0;\r\n\ttemp = compareDepths(depth, readDepth(coord), far);\r\n\t//DEPTH EXTRAPOLATION:\r\n\tif (far > 0) {\r\n\t\ttemp2 = compareDepths(readDepth(coord2), depth, far);\r\n\t\ttemp += (1.0-temp)*temp2;\r\n\t}\r\n\r\n\treturn temp;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\tvec2 texCoord = gl_FragCoord.xy * inverseVP;\r\n\r\n\tvec2 noise = rand(texCoord);\r\n\tfloat depth = readDepth(texCoord);\r\n\tfloat reveal = texture2D(oitWeight, texCoord).a;\r\n\r\n\tfloat w = inverseVP.x/clamp(depth, aoclamp,1.0)+(noise.x*(1.0-noise.x));\r\n\tfloat h = inverseVP.y/clamp(depth, aoclamp,1.0)+(noise.y*(1.0-noise.y));\r\n\r\n\tfloat pw;\r\n\tfloat ph;\r\n\r\n\tfloat ao;\r\n\r\n\tfloat dl = PI*(3.0-sqrt(5.0));\r\n\tfloat dz = 1.0/float(samples);\r\n\tfloat l = 0.0;\r\n\tfloat z = 1.0 - dz/2.0;\r\n\r\n\tfor (int i = 0; i <= samples; i++) {\r\n\t\tfloat r = sqrt(1.0-z);\r\n\t\tpw = cos(l)*r;\r\n\t\tph = sin(l)*r;\r\n\t\tao += calAO(texCoord, depth, pw*w, ph*h);\r\n\t\tz = z - dz;\r\n\t\tl = l + dl;\r\n\t}\r\n\r\n\tao /= float(samples) * brightness;\r\n\tao = 1.0 - ao * reveal;\r\n\r\n\tvec3 color = texture2D(src, texCoord).rgb;\r\n\tvec3 lumcoeff = vec3(0.299, 0.587, 0.114);\r\n\tfloat lum = dot(color.rgb, lumcoeff);\r\n\tvec3 luminance = vec3(lum, lum, lum);\r\n\tvec3 final = vec3(color*mix(vec3(ao),vec3(1.0), luminance * luminanceInfluence));\r\n\r\n\tif (ssaoOnly == 1) {\r\n\t\tfinal = vec3(mix(vec3(ao),vec3(1.0),luminance * luminanceInfluence));\r\n\t}\r\n\r\n\tgl_FragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\default\\postprocess_ssao.vert":"/*\r\n * Screen space ambient occlusion post process\r\n */\r\nattribute vec3 position;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}","shaders\\default\\reflective.frag":"precision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\nuniform samplerCube env0;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\nuniform int useLighting;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nvec4 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = textureCube(env0, lookup);\r\n\treturn color;\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\tvec4 color = ambientColor + (diffuseColor + specularColor) * shadow;\r\n\treturn color;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = reflection();\r\n\r\n\tif (useLighting == 1) {\r\n\t\tcolor = mix(color, lighting(shadow), materialBlend);\r\n\t}\r\n\telse {\r\n\t\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\t\tcolor = mix(color, diffuse * textureColor, materialBlend);\r\n\t}\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\default\\reflective.vert":"// Diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\reflective_masked.frag":"precision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\nuniform samplerCube env0;\r\nuniform sampler2D mask;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\nuniform int useLighting;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nvec4 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = textureCube(env0, lookup);\r\n\treturn color;\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\tvec4 color = ambientColor + (diffuseColor + specularColor) * shadow;\r\n\treturn color;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tfloat maskValue = texture2D(mask, uv0).r;\r\n\tvec4 color = reflection();\r\n\r\n\tif (useLighting == 1) {\r\n\t\tcolor = mix(color, lighting(shadow), maskValue * materialBlend);\r\n\t}\r\n\telse {\r\n\t\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\t\tcolor = mix(color, diffuse * textureColor, maskValue * materialBlend);\r\n\t}\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\default\\reflective_masked.vert":"// Diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\ScreenQuad.frag":"// Shader for rendering a screen aligned quad for image space effects\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 uv;\r\nuniform sampler2D tex0;\r\n\r\nvoid main () {\r\n\tgl_FragColor = texture2D(tex0, uv);\r\n}\r\n","shaders\\default\\ScreenQuad.vert":"// Shader for rendering a screen aligned quad for image space effects\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\shadow_blur.frag":"/**\r\n * Shadow blur\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying highp vec2 blurCoords[14];\r\n\r\nvoid main () {\r\n\tlowp vec4 sum = vec4(0.0);\r\n\tsum += texture2D(src, blurCoords[ 0])*0.0044299121055113265;\r\n\tsum += texture2D(src, blurCoords[ 1])*0.00895781211794;\r\n\tsum += texture2D(src, blurCoords[ 2])*0.0215963866053;\r\n\tsum += texture2D(src, blurCoords[ 3])*0.0443683338718;\r\n\tsum += texture2D(src, blurCoords[ 4])*0.0776744219933;\r\n\tsum += texture2D(src, blurCoords[ 5])*0.115876621105;\r\n\tsum += texture2D(src, blurCoords[ 6])*0.147308056121;\r\n\tsum += texture2D(src, uv            )*0.159576912161;\r\n\tsum += texture2D(src, blurCoords[ 7])*0.147308056121;\r\n\tsum += texture2D(src, blurCoords[ 8])*0.115876621105;\r\n\tsum += texture2D(src, blurCoords[ 9])*0.0776744219933;\r\n\tsum += texture2D(src, blurCoords[10])*0.0443683338718;\r\n\tsum += texture2D(src, blurCoords[11])*0.0215963866053;\r\n\tsum += texture2D(src, blurCoords[12])*0.00895781211794;\r\n\tsum += texture2D(src, blurCoords[13])*0.0044299121055113265;\r\n\tgl_FragColor = sum;\r\n}\r\n","shaders\\default\\shadow_blurh.vert":"/**\r\n * Shadow blur - horizontal\r\n */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying vec2 blurCoords[14];\r\n\r\nvoid main() {\r\n\tfloat blurSize = 0.2;\r\n\tblurCoords[ 0] = uv0 + vec2(-0.028, 0.0) * blurSize;\r\n\tblurCoords[ 1] = uv0 + vec2(-0.024, 0.0) * blurSize;\r\n\tblurCoords[ 2] = uv0 + vec2(-0.020, 0.0) * blurSize;\r\n\tblurCoords[ 3] = uv0 + vec2(-0.016, 0.0) * blurSize;\r\n\tblurCoords[ 4] = uv0 + vec2(-0.012, 0.0) * blurSize;\r\n\tblurCoords[ 5] = uv0 + vec2(-0.008, 0.0) * blurSize;\r\n\tblurCoords[ 6] = uv0 + vec2(-0.004, 0.0) * blurSize;\r\n\tblurCoords[ 7] = uv0 + vec2( 0.004, 0.0) * blurSize;\r\n\tblurCoords[ 8] = uv0 + vec2( 0.008, 0.0) * blurSize;\r\n\tblurCoords[ 9] = uv0 + vec2( 0.012, 0.0) * blurSize;\r\n\tblurCoords[10] = uv0 + vec2( 0.016, 0.0) * blurSize;\r\n\tblurCoords[11] = uv0 + vec2( 0.020, 0.0) * blurSize;\r\n\tblurCoords[12] = uv0 + vec2( 0.024, 0.0) * blurSize;\r\n\tblurCoords[13] = uv0 + vec2( 0.028, 0.0) * blurSize;\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\shadow_blurv.vert":"/**\r\n * Shadow blur - vertical\r\n */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying vec2 blurCoords[14];\r\n\r\nvoid main() {\r\n\tfloat blurSize = 0.2;\r\n\tblurCoords[ 0] = uv0 + vec2(0.0, -0.028) * blurSize;\r\n\tblurCoords[ 1] = uv0 + vec2(0.0, -0.024) * blurSize;\r\n\tblurCoords[ 2] = uv0 + vec2(0.0, -0.020) * blurSize;\r\n\tblurCoords[ 3] = uv0 + vec2(0.0, -0.016) * blurSize;\r\n\tblurCoords[ 4] = uv0 + vec2(0.0, -0.012) * blurSize;\r\n\tblurCoords[ 5] = uv0 + vec2(0.0, -0.008) * blurSize;\r\n\tblurCoords[ 6] = uv0 + vec2(0.0, -0.004) * blurSize;\r\n\tblurCoords[ 7] = uv0 + vec2(0.0,  0.004) * blurSize;\r\n\tblurCoords[ 8] = uv0 + vec2(0.0,  0.008) * blurSize;\r\n\tblurCoords[ 9] = uv0 + vec2(0.0,  0.012) * blurSize;\r\n\tblurCoords[10] = uv0 + vec2(0.0,  0.016) * blurSize;\r\n\tblurCoords[11] = uv0 + vec2(0.0,  0.020) * blurSize;\r\n\tblurCoords[12] = uv0 + vec2(0.0,  0.024) * blurSize;\r\n\tblurCoords[13] = uv0 + vec2(0.0,  0.028) * blurSize;\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\default\\skybox.frag":"precision mediump float;\r\n\r\nuniform samplerCube skybox0;\r\n\r\nvarying vec3 uv0;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = textureCube(skybox0, uv0);\r\n}\r\n","shaders\\default\\skybox.vert":"attribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec3 uv0;\r\n\r\nvoid main(void) {\r\n\tuv0 = vec3(position.x, -position.yz);\r\n\tgl_Position = projection * view * model * vec4(position, 1.0);\r\n}\r\n","shaders\\default\\ssao.frag":"precision highp float;\r\n\r\nuniform sampler2D position0;\r\n\r\nuniform mat4 projection;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform float ssaoGDisplace;\r\nuniform float ssaoRadius;\r\nuniform float ssaoDivider;\r\n\r\n#define DL 2.399963229728653\r\n#define EULER 2.718281828459045\r\n\r\nfloat unpack(vec4 c) {\r\n    const vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n    return dot(c, bitShifts);\r\n}\r\n\r\nfloat getDepth(vec2 coord) {\r\n    float d = unpack(texture2D(position0, coord.xy));\r\n    if (d == 0.0)\r\n        d = 1.0;\r\n    return d;\r\n}\r\n\r\nfloat doAmbientOcclusion(vec2 coord, vec2 coord2, float d) {\r\n    float diff = getDepth(coord + coord2) - d;\r\n    float gDisplace = -0.0002 - (0.00002 * max(min(ssaoGDisplace, 10.0), 0.0));\r\n    //float gDisplace = -0.00032;\r\n    return (diff < gDisplace) ? pow(EULER, -2.0 * (diff - gDisplace) * (diff - gDisplace) * 10000.0 / 0.16) : 0.0;\r\n}\r\n\r\nvoid main() {\r\n    vec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n    \r\n    vec2 c = gl_FragCoord.xy * inverseVP;\r\n    \r\n    float ao = 0.0;\r\n\r\n    float dz = 1.0 / 8.0;\r\n    float z = 1.0 - dz / 2.0;\r\n    float l = 0.0;\r\n\r\n    float depth = getDepth(c);\r\n\r\n    for (int i = 0; i <= 8; i++) {\r\n        float r = sqrt(1.0 - z);\r\n\r\n        vec2 p = vec2(cos(l) * r, sin(l) * r);\r\n        ao += doAmbientOcclusion(c, p * ssaoRadius * inverseVP.x * (1.0 - depth), depth);\r\n        z = z - dz;\r\n        l = l + DL;\r\n    }\r\n\r\n    ao /= 8.0 + max(min(ssaoDivider, 1.0), -1.0);\r\n    //ao /= 8.5;\r\n    \r\n    ao = max(0.0, ao * 2.0 - 1.0);\r\n    ao = 1.0 - ao;\r\n    gl_FragColor = vec4(ao, ao, ao, 1.0);\r\n    //gl_FragColor = vec4(depth, depth, depth, 1.0);\r\n    //gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n}","shaders\\default\\ssao.vert":"attribute vec3 position;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position.xy, 0.0, 1.0);\r\n}","shaders\\default\\ssaoblur.frag":"precision highp float;\r\n\r\nuniform sampler2D ao0;\r\nuniform sampler2D src;\r\n\r\nuniform mat4 projection;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform int ssaoBlurSize;\r\nuniform int ssaoOnly;\r\n\r\nfloat random(vec2 co) {\r\n    //co = mod(co, 128.0);\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main() {\r\n    vec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n    \r\n    const int MAXIMUM_BLUR = 32;\r\n    float result = 0.0;\r\n    vec2 hlim = vec2(float(-ssaoBlurSize) * 0.5 + 0.5);\r\n    for (int i = 0; i < MAXIMUM_BLUR; i++) {\r\n        if (i >= ssaoBlurSize)\r\n            break;\r\n        for (int j = 0; j < MAXIMUM_BLUR; j++) {\r\n            if (j >= ssaoBlurSize)\r\n                break;\r\n            vec2 offset = (hlim + vec2(float(i), float(j))) * inverseVP;\r\n            result += texture2D(ao0, gl_FragCoord.xy * inverseVP + offset).r;\r\n        }\r\n    }\r\n    result = result / float(ssaoBlurSize * ssaoBlurSize);\r\n\r\n    if (ssaoOnly == 1) {\r\n        gl_FragColor = vec4(vec3(result), 1.0);\r\n    }\r\n    else {\r\n        gl_FragColor = vec4(texture2D(src, gl_FragCoord.xy * inverseVP).xyz * result, 1.0);\r\n    }\r\n    //gl_FragColor = vec4(texture2D(src, gl_FragCoord.xy * inverseVP).xyz * texture2D(ao0, gl_FragCoord.xy * inverseVP/* / 2.0 + 0.5*/).xyz, 1.0);\r\n}","shaders\\default\\ssaoblur.vert":"attribute vec3 position;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position.xy, 0.0, 1.0);\r\n}","shaders\\default\\terrain.frag":"// Terrain shader for the forward renderer\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying vec3 bc;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\tvec4 color = lighting(shadow);\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n\r\n\t// gl_FragColor = vec4(bc, 1.0); // for debug\r\n}\r\n","shaders\\default\\terrain.vert":"// Terrain shader for the forward renderer\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\nattribute vec3 barycentric;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nuniform sampler2D height;\r\n\r\nuniform float verticalScale;\r\nuniform vec2 uvOffset;\r\nuniform vec2 uvScale;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying vec3 bc;\r\n\r\nfloat snap(float f, float step) {\r\n\treturn step * floor(f / step);\r\n}\r\n\r\nvoid main() {\r\n\tbc = barycentric;\r\n\tuv0 = texcoord2d0 * uvScale + uvOffset;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\r\n\t// worldPosition.x = snap(worldPosition.x, worldPosition.y);\r\n\t// worldPosition.z = snap(worldPosition.z, worldPosition.y);\r\n\r\n\tfloat height = texture2D(height, uv0).r;\r\n\tworldPosition.y = height * verticalScale;\r\n\t// worldPosition.y = 0.0;\r\n\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\default\\test.frag":"// Test fragment shader drawing in blue \r\n\r\nprecision mediump float; \r\n\r\nvoid main(void) { \r\n\tgl_FragColor = vec4(0.1, 0.5, 0.8, 1.0); \r\n}","shaders\\default\\test.vert":"// Test pass-through shader that doesn't transform vertex\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\n\r\nvoid main(void) { \r\n\tfragNormal=mat3(modelview)*normal;\r\n\tfragPosition=projection*modelview*vec4(position, 1.0);\r\n\tgl_Position = fragPosition; \r\n}\r\n","shaders\\default\\transparent.frag":"// Unlit transparency shader\r\nprecision mediump float; \r\n\r\nuniform vec4 diffuse;\r\n\r\nuniform sampler2D diffuse0;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = diffuse*texture2D(diffuse0, fragTexcoord2d0);\r\n}","shaders\\default\\transparent.vert":"// Unlit transparency shader\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n\tfragNormal=mat3(modelview)*normal;\r\n\tfragPosition=modelview*vec4(position, 1.0);\r\n\tfragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=projection*fragPosition;\r\n}\r\n","shaders\\default\\wireframe.frag":"// Test fragment shader drawing in blue \r\nprecision mediump float; \r\n\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main(void) { \r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, \r\n\t\t\tpow(1.0-fragBarycentric.r, 32.0)+pow(1.0-fragBarycentric.g, 32.0)+pow(1.0-fragBarycentric.b, 32.0));\r\n}","shaders\\default\\wireframe.vert":"// Diffuse shader\r\nattribute vec3 position; \r\nattribute vec3 barycentric; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main(void) { \r\n\tgl_Position=projection*modelview*vec4(position, 1.0); \r\n\tfragBarycentric = barycentric;\r\n}"},webgl2:{"shaders\\webgl2\\attributes.frag":"#version 300 es\r\n\r\n// Attributes shader\r\nprecision mediump float;\r\n\r\nuniform float texCoord2d0Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d1Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d2Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float texCoord2d3Multiplier;\t\t// Texture coordinates output multiplier between 0 and 1\r\nuniform float positionMultiplier;\t\t\t\t// Position output multiplier between 0 and 1\r\nuniform float tangentMultiplier;\t\t\t\t// Tangent output multiplier between 0 and 1\r\nuniform float bitangentMultiplier;\t\t\t// BiTangent output multiplier between 0 and 1\r\nuniform float normalMultiplier;\t\t\t\t\t// Normal output multiplier between 0 and 1\r\nuniform float barycentricMultiplier;\t\t// Barycentric output multiplier between 0 and 1\r\n\r\nin vec2 fragTexcoord2d0;\r\nin vec2 fragTexcoord2d1;\r\nin vec2 fragTexcoord2d2;\r\nin vec2 fragTexcoord2d3;\r\nin vec4 fragPosition;\r\nin vec4 fragTangent;\r\nin vec4 fragBitangent;\r\nin vec4 fragNormal;\r\nin vec3 fragBarycentric;\r\n\r\nout vec4 fragColor;\r\n\r\nvoid main(void) {\r\n\tfragColor =\r\n\t\tvec4(fragTexcoord2d0, 0.0, 1.0) * texCoord2d0Multiplier +\r\n\t\tvec4(fragTexcoord2d1, 0.0, 1.0) * texCoord2d1Multiplier +\r\n\t\tvec4(fragTexcoord2d2, 0.0, 1.0) * texCoord2d2Multiplier +\r\n\t\tvec4(fragTexcoord2d3, 0.0, 1.0) * texCoord2d3Multiplier +\r\n\t\tvec4(fragPosition.rgb, 1.0) * positionMultiplier +\r\n\t\tvec4(fragTangent.rgb, 1.0) * tangentMultiplier +\r\n\t\tvec4(fragBitangent.rgb, 1.0) * bitangentMultiplier +\r\n\t\tvec4(fragNormal.rgb, 1.0) * normalMultiplier +\r\n\t\tvec4(fragBarycentric, 1.0) * barycentricMultiplier;\r\n}\r\n","shaders\\webgl2\\attributes.vert":"#version 300 es\r\n\r\n// Attributes shader\r\nin vec3 position;\r\nin vec3 tangent;\r\nin vec3 bitangent;\r\nin vec3 normal;\r\nin vec3 barycentric;\r\nin vec2 texcoord2d0;\r\nin vec2 texcoord2d1;\r\nin vec2 texcoord2d2;\r\nin vec2 texcoord2d3;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec2 fragTexcoord2d0;\r\nout vec2 fragTexcoord2d1;\r\nout vec2 fragTexcoord2d2;\r\nout vec2 fragTexcoord2d3;\r\nout vec4 fragPosition;\r\nout vec4 fragTangent;\r\nout vec4 fragBitangent;\r\nout vec4 fragNormal;\r\nout vec3 fragBarycentric;\r\n\r\nvoid main() {\r\n\tfragNormal = projection * modelview * vec4(normal, 1.0);\r\n\tfragPosition = projection * modelview * vec4(position, 1.0);\r\n\tfragTangent = projection * modelview * vec4(tangent, 1.0);\r\n\tfragBitangent = projection * modelview * vec4(bitangent, 1.0);\r\n\tfragTexcoord2d0 = texcoord2d0;\r\n\tfragTexcoord2d1 = texcoord2d1;\r\n\tfragTexcoord2d2 = texcoord2d2;\r\n\tfragTexcoord2d3 = texcoord2d3;\r\n\tfragBarycentric = barycentric;\r\n\tgl_Position = fragPosition;\r\n}\r\n","shaders\\webgl2\\debug.frag":"#version 300 es\r\n\r\n// Fallback shader\r\nprecision mediump float;\r\n\r\nuniform vec4 color;\r\n\r\nout vec4 fragColor;\r\n\r\nvoid main(void) {\r\n\tfragColor = color;\r\n}\r\n","shaders\\webgl2\\debug.vert":"#version 300 es\r\n\r\n// Debug shader\r\nin vec3 position;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec4 fragPosition;\r\n\r\nvoid main() {\r\n\tfragPosition = projection * modelview * vec4(position, 1.0);\r\n\tgl_Position = fragPosition;\r\n}\r\n","shaders\\webgl2\\DebugPackedDepthTexture.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\n#define USE_VSM\r\n\r\nuniform mat4 modelview;\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nin vec4 viewPosition;\r\nin vec3 viewNormal;\r\nin vec2 uv0;\r\n\r\nout vec4 fragColor;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (256.0 * 256.0 * 256.0), 1.0 / (256.0 * 256.0), 1.0 / 256.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nfloat unpackHalf(vec2 c) {\r\n\treturn c.x + (c.y / 255.0);\r\n}\r\n\r\nvoid main(void) {\r\n\tvec4 texel = texture(diffuse0, uv0);\r\n\r\n#ifdef USE_VSM\r\n\tfragColor = vec4(0.0, unpackHalf(texel.xy), unpackHalf(texel.zw), 1.0);\r\n#else\r\n\tfloat depth = unpack(texel);\r\n\tfragColor = vec4(depth, depth, depth, 1.0);\r\n#endif\r\n}\r\n","shaders\\webgl2\\DebugPackedDepthTexture.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec4 viewPosition;\r\nout vec3 viewNormal;\r\nout vec2 uv0;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tviewPosition = modelview * vec4(position, 1.0);\r\n\tviewNormal = normalize(mat3(modelview)*normal);\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\deferred_background.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 color;\r\n\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvoid main () {\r\n\tfragColor = color;\r\n}\r\n","shaders\\webgl2\\deferred_background.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec2 uv0;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_gbuffer.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\nuniform float lightContribution;\r\nuniform float reflectivity;\r\nuniform int useNormalmap;\r\nuniform int useReflection;\r\nuniform int receiveShadows;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D normal0;\r\nuniform samplerCube env0;\r\nuniform sampler2D mask;\r\n\r\nin float depth;\r\nin vec2 uv0;\r\nin vec4 worldPosition;\r\nin vec3 worldNormal;\r\nin vec4 viewPosition;\r\nin vec3 viewNormal;\r\n\r\nin mat3 tbn;\r\n\r\nlayout(location = 0) out vec4 gbuf_color;\r\nlayout(location = 1) out vec4 gbuf_normal;\r\nlayout(location = 2) out vec4 gbuf_position;\r\nlayout(location = 3) out vec4 gbuf_params;\r\n\r\nvec3 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = texture(env0, lookup);\r\n\treturn color.rgb;\r\n}\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture(diffuse0, uv0);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tvec3 N = viewNormal;\r\n\tif (useNormalmap == 1) {\r\n\t\tvec4 encodedNormal = texture(normal0, uv0);\r\n\t\tvec3 localCoords = vec3(2.0 * encodedNormal.rg - vec2(1.0), encodedNormal.b);\r\n\t\tN = normalize(tbn * localCoords);\r\n\t\tN = normalize(mat3(view) * N);\r\n\t}\r\n\r\n\tif (useReflection == 1) {\r\n\t\tvec3 refl = reflection();\r\n\t\tfloat maskValue = texture(mask, uv0).r;\r\n\t\tcolor.rgb = mix(refl, color.rgb, maskValue * materialBlend);\r\n\t}\r\n\r\n\tgbuf_color = vec4(color.rgb, specularStrength);\r\n\tgbuf_normal = vec4(N, depth);\r\n\tgbuf_position = vec4(worldPosition.xyz, float(specularPower)/255.0);\r\n\tgbuf_params = vec4(lightContribution, receiveShadows, reflectivity, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_gbuffer.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\nin vec3 tangent;\r\nin vec3 bitangent;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float zNear;\r\nuniform float zFar;\r\n\r\nout float depth;\r\nout vec2 uv0;\r\nout vec4 worldPosition;\r\nout vec3 worldNormal;\r\nout vec4 viewPosition;\r\nout vec3 viewNormal;\r\n\r\nout mat3 tbn;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tdepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n\r\n\ttbn[0] = normalize(vec3(model * vec4(tangent, 0.0)));\r\n\ttbn[1] = normalize(vec3(model * vec4(bitangent, 0.0)));\r\n\ttbn[2] = worldNormal;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\deferred_light_ambient.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\nuniform sampler2D shadow0;\r\n\r\nuniform vec4 lightColor;\r\n\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvoid main () {\r\n\tvec4 data0 = texture(gb0, uv);\r\n\tvec3 color = data0.rgb * lightColor.rgb;\r\n\tfragColor = vec4(color, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_light_ambient.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec2 texcoord2d0;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = texcoord2d0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_light_directional.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\nuniform sampler2D shadow0;\r\n\r\nuniform vec3 cameraPosition;\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\n\r\nuniform mat4 view;\r\nuniform mat4 lightView;\r\nuniform mat4 lightProjection;\r\nuniform float shadowBias;\r\n\r\nuniform int useShadows;\r\nuniform int useSoftShadows;\r\nuniform int shadowOnly;\r\n\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap(vec4 worldPosition) {\r\n\tvec4 shadowPosition = lightProjection * lightView * worldPosition;\r\n\tvec2 shadowUV = shadowPosition.xy / shadowPosition.w;\r\n\tshadowUV = shadowUV * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture(shadow0, shadowUV);\r\n\r\n\treturn VSM(shadowTexel.xy, shadowPosition.z);\r\n\t// return step(shadowPosition.z - shadowBias, shadowTexel.r);\r\n}\r\n\r\nvoid main () {\r\n\tvec4 data2 = texture(gb2, uv); // position, specularPower/255\r\n\tvec4 data3 = texture(gb3, uv); // material parameters: (lightContribution, receiveShadows, reflectivity, unused)\r\n\tvec4 P = vec4(data2.xyz, 1.0);\r\n\r\n\tfloat shadow = 1.0;\r\n\r\n\tif (useShadows == 1 && data3.g > 0.0) {\r\n\t\tif (useSoftShadows == 1)\r\n\t\t\tshadow = texture(shadow0, uv).r;\r\n\t\telse\r\n\t\t\tshadow = shadowmap(P);\r\n\t}\r\n\r\n\tif (shadowOnly == 1) {\r\n\t\tfragColor = vec4(shadow, shadow, shadow, 1.0);\r\n\t\treturn;\r\n\t}\r\n\r\n\tvec4 data0 = texture(gb0, uv); // color, specularIntensity\r\n\r\n\tvec4 data1 = texture(gb1, uv); // normal, depth\r\n\r\n\tvec3 C = data0.xyz;\r\n\tvec3 N = data1.xyz;\r\n\tfloat specularIntensity = data0.w;\r\n\tfloat specularPower = 255.0*data2.w;\r\n\r\n\tvec4 viewPosition = view * P;\r\n\tvec3 L = normalize(mat3(view) * lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0);\r\n\tfloat specularLight = pow(clamp(dot(N, H), 0.0, 1.0), float(specularPower));\r\n\tvec3 diffuseColor = C * lightColor.rgb * diffuseLight * lightIntensity;\r\n\tvec3 specularColor = lightColor.rgb * specularLight * specularIntensity;\r\n\r\n\tvec3 lighting = diffuseColor + specularColor;\r\n\r\n\tvec3 final = shadow * mix(C, lighting, data3.r);\r\n\r\n\tfragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_light_directional.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec2 texcoord2d0;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = texcoord2d0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_light_omni.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D gb0;\r\nuniform sampler2D gb1;\r\nuniform sampler2D gb2;\r\nuniform sampler2D gb3;\r\n\r\nuniform vec4 lightColor;\r\nuniform vec3 lightPosition;\r\nuniform float lightIntensity;\r\nuniform float lightRadius;\r\n\r\nuniform mat4 view;\r\nuniform vec3 cameraPosition;\r\n\r\nin vec4 screenPosition;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n\tvec2 uv = screenPosition.xy;\r\n\tuv /= screenPosition.w;\r\n\tuv = 0.5 * (vec2(uv.x, uv.y) + 1.0);\r\n\r\n\tvec4 data0 = texture(gb0, uv); // color.rgb, specularIntensity\r\n\tvec4 data1 = texture(gb1, uv); // normal.xyz, depth\r\n\tvec4 data2 = texture(gb2, uv); // position.xyz, specularPower/255\r\n\t// vec4 data3 = texture(gb3, uv); // unused\r\n\r\n\tvec3 C = data0.xyz;\r\n\tvec3 N = data1.xyz;\r\n\tvec3 P = data2.xyz;\r\n\tfloat specularIntensity = data0.w;\r\n\tfloat specularPower = 255.0*data2.w;\r\n\r\n\tvec3 lightVector = lightPosition - P;\r\n\tfloat attenuation = clamp(1.0 - length(lightVector)/lightRadius, 0.0, 1.0);\r\n\tlightVector = normalize(lightVector);\r\n\r\n\tvec4 viewPosition = view * vec4(P, 1.0);\r\n\tvec3 L = normalize(mat3(view) * lightVector);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0);\r\n\tfloat specularLight = pow(clamp(dot(N, H), 0.0, 1.0), float(specularPower));\r\n\tvec3 diffuseColor = C * lightColor.rgb * diffuseLight * lightIntensity;\r\n\tvec3 specularColor = lightColor.rgb * specularLight * specularIntensity;\r\n\r\n\tvec3 final = attenuation * (diffuseColor + specularColor);\r\n\r\n\tfragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_light_omni.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec4 screenPosition;\r\n\r\nvoid main() {\r\n\tscreenPosition = projection * view * model * vec4(position, 1.0);\r\n\tgl_Position = screenPosition;\r\n}\r\n","shaders\\webgl2\\deferred_shadow_directional.frag":"#version 300 es\r\n/** Directional light shadow-map */\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nin float depth;\r\nin vec2 uv;\r\n\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat dx = dFdx(depth);\r\n\tfloat dy = dFdy(depth);\r\n\tfragColor = vec4(depth, pow(depth, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\deferred_shadow_directional.vert":"#version 300 es\r\n/** Directional light shadow-map */\r\nin vec3 position;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout float depth;\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tvec4 clipPosition = projection * viewPosition;\r\n\tdepth = clipPosition.z;\r\n\tuv = texcoord2d0;\r\n\tgl_Position = clipPosition;\r\n}\r\n","shaders\\webgl2\\depth.frag":"#version 300 es\r\n\r\n// Shader for rendering linear depth values into a floating point texture\r\nprecision mediump float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nin float depth;\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfragColor = vec4(depth, depth, depth, depth);\r\n}\r\n","shaders\\webgl2\\depth.vert":"#version 300 es\r\n\r\n// Shader for rendering linear depth values into a floating point texture\r\nin vec3 position;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float zNear;\r\nuniform float zFar;\r\n\r\nout float depth;\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tdepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n\tuv = texcoord2d0;\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\DepthRGBA.frag":"#version 300 es\r\n\r\n// Shader for rendering linear depth values into RGBA texture\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\n// uniform float linearDepthConstant;\r\n\r\n/** Packing Type:\r\n\t1 - packs depth value into RGBA\r\n\t2 - packs depth into RG and depth*depth into BA\r\n**/\r\nuniform int packingType;\r\n\r\nin vec4 viewPosition;\r\nout vec4 fragColor;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvec2 packHalf(float depth) {\r\n\tconst vec2 bias = vec2(1.0 / 255.0, 0.0);\r\n\tvec2 c = vec2(depth, fract(depth * 255.0));\r\n\treturn c - (c.yy * bias);\r\n}\r\n\r\nvoid main () {\r\n\tif (packingType==2) {\r\n\t\tfragColor = vec4(packHalf(gl_FragCoord.z), packHalf(gl_FragCoord.z*gl_FragCoord.z));\r\n\t}\r\n\telse {\r\n\t\tfragColor = pack(gl_FragCoord.z); // less precision, but works on most systems\r\n\t\t// float linearDepth = length(viewPosition) * linearDepthConstant;\r\n\t\t// fragColor = pack(linearDepth);\r\n\t}\r\n}\r\n","shaders\\webgl2\\DepthRGBA.vert":"#version 300 es\r\n\r\n// Shader for rendering linear depth values into RGBA texture\r\nin vec3 position;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec4 viewPosition;\r\n\r\nvoid main() {\r\n\tviewPosition = modelview * vec4(position, 1.0);\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\diffuse.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nin vec2 uv0;\r\nin vec4 worldPosition;\r\nin vec3 worldNormal;\r\nin vec4 viewPosition;\r\nin vec3 viewNormal;\r\nin vec4 shadowPosition;\r\nout vec4 fragColor;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = lighting(shadow);\r\n\tfragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\diffuse.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nout vec2 uv0;\r\nout vec4 worldPosition;\r\nout vec3 worldNormal;\r\nout vec4 viewPosition;\r\nout vec3 viewNormal;\r\nout vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\fallback.frag":"// Fallback shader\r\nprecision mediump float; \r\n\r\nvoid main(void) { \r\n\tgl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n}","shaders\\webgl2\\fallback.vert":"// Fallback shader\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n  fragNormal=modelview*vec4(normal, 1.0);\r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n  fragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\webgl2\\font.frag":"// Diffuse shader\r\nprecision mediump float; \r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform int page;\t\t\t\t\t\t// The font page texture\r\n\r\nuniform sampler2D page0;\t\t\r\nuniform sampler2D page1;\r\nuniform sampler2D page2;\r\nuniform sampler2D page3;\r\nuniform sampler2D page4;\r\nuniform sampler2D page5;\r\nuniform sampler2D page6;\r\nuniform sampler2D page7;\r\n\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main(void) {\r\n\tvec4 c;\r\n\tif(page==0) c = texture2D(page0, fragTexcoord2d0);\r\n\tif(page==1) c = texture2D(page1, fragTexcoord2d0);\r\n\tif(page==2) c = texture2D(page2, fragTexcoord2d0);\r\n\tif(page==3) c = texture2D(page3, fragTexcoord2d0);\r\n\tif(page==4) c = texture2D(page4, fragTexcoord2d0);\r\n\tif(page==5) c = texture2D(page5, fragTexcoord2d0);\r\n\tif(page==6) c = texture2D(page6, fragTexcoord2d0);\r\n\tif(page==7) c = texture2D(page7, fragTexcoord2d0);\r\n\tgl_FragColor=vec4(diffuse.r*c.r, diffuse.g*c.g, diffuse.b*c.b, c.a);\r\n}","shaders\\webgl2\\font.vert":"// Font shader\r\nattribute vec3 position; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n\tfragPosition=projection*modelview*vec4(position, 1.0); \r\n\tfragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=fragPosition;\r\n}\r\n","shaders\\webgl2\\forward_shadow.frag":"#version 300 es\r\n\r\n/** Directional light shadow-map */\r\nprecision highp float;\r\n\r\nuniform int hasFloat;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nin float depth;\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat d = (depth + 1.0) * 0.5;\r\n\r\n\tif (hasFloat == 1) {\r\n\t\tfragColor = vec4(d, d, d, 1.0);\r\n\t}\r\n\telse {\r\n\t\tfragColor = pack(d);\r\n\t}\r\n\r\n}\r\n","shaders\\webgl2\\forward_shadow.vert":"#version 300 es\r\n\r\n/** Directional light shadow-map */\r\nin vec3 position;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout float depth;\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tvec4 viewPosition = modelview * vec4(position, 1.0);\r\n\tvec4 clipPosition = projection * viewPosition;\r\n\tdepth = clipPosition.z;\r\n\tuv = texcoord2d0;\r\n\tgl_Position = clipPosition;\r\n}\r\n","shaders\\webgl2\\forward_shadow_vsm.frag":"#version 300 es\r\n\r\n/** Directional light shadow-map */\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nin float depth;\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvoid main() {\r\n\tvec4 textureColor = texture(diffuse0, uv);\r\n\tvec4 color = diffuse * textureColor;\r\n\tif (color.a < 0.99)\r\n\t\tdiscard;\r\n\r\n\tfloat d = (depth + 1.0) * 0.5;\r\n\tfloat dx = dFdx(d);\r\n\tfloat dy = dFdy(d);\r\n\r\n\tfragColor = vec4(d, pow(d, 2.0) + 0.25*(dx * dx + dy * dy), 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\GaussianBlur.frag":"// Shader for rendering gaussian blurred image (horizontal)\r\nprecision highp float;\r\n\r\n#define MAX_BLUR_KERNEL_SIZE 10\r\n\r\nuniform float screenWidth;\r\nuniform float screenHeight;\r\nuniform int orientation; // 0 - horizontal, 1 - vertical\r\nuniform int kernelSize; // Recommended values: 3, 5, 7, 10 (10 is currently the maximum)\r\nuniform sampler2D tex0;\r\n\r\nvarying vec2 uv0;\r\n\r\nvoid main () {\r\n\tfloat halfSize = float(kernelSize)*0.5;\r\n\tvec2 texelSize = vec2(1.0/screenWidth, 1.0/screenHeight);\r\n\tvec4 color = vec4(0.0);\r\n\r\n\tif (orientation==1) {\r\n\t\t// vertical pass\r\n\t\tfor (int i=0; i<MAX_BLUR_KERNEL_SIZE; ++i) {\r\n\t\t\tif (i>=kernelSize)\r\n\t\t\t\tbreak;\r\n\t\t\tfloat offset = float(i)-halfSize;\r\n\t\t\tcolor += texture2D(tex0, uv0 + vec2(0.0, offset * texelSize.y));\r\n\t\t}\r\n\t}\r\n\telse {\r\n\t\t// horizontal pass\r\n\t\tfor (int i=0; i<MAX_BLUR_KERNEL_SIZE; ++i) {\r\n\t\t\tif (i>=kernelSize)\r\n\t\t\t\tbreak;\r\n\t\t\tfloat offset = float(i)-halfSize;\r\n\t\t\tcolor += texture2D(tex0, uv0 + vec2(offset * texelSize.x, 0.0));\r\n\t\t}\r\n\t}\r\n\tgl_FragColor = color / float(kernelSize);\r\n\t// gl_FragColor = texture2D(tex0, uv0);\r\n}\r\n","shaders\\webgl2\\GaussianBlur.vert":"// Shader for rendering gaussian blurred image (horizontal)\r\nattribute vec3 position;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform float screenWidth;\r\nuniform float screenHeight;\r\n\r\nvarying vec2 uv0;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\t\r\n\t// Resizes the rendered unit-quad to screen size\r\n\tvec4 viewPosition=modelview*vec4(position.x*screenWidth, position.y*screenHeight, position.z, 1.0);\r\n\tgl_Position=projection*viewPosition;\r\n}\r\n","shaders\\webgl2\\lines.frag":"#version 300 es\r\n\r\nprecision mediump float;\r\n\r\nin vec4 fragColor;\r\nin vec4 fragPosition;\r\n\r\nout vec4 outColor;\r\n\r\nvoid main(void) {\r\n\toutColor = fragColor;\r\n}","shaders\\webgl2\\lines.vert":"#version 300 es\n\nin vec3 position;\nin vec3 pointA;\nin vec3 pointB;\nin float width;\nin vec4 color;\n\nuniform vec2 viewport;\n\nuniform mat4 modelview;\nuniform mat4 projection;\n\nout vec4 fragColor;\nout vec4 fragPosition;\n\nvoid main() {\n\tvec4 pA = projection * modelview * vec4(pointA, 1.0);\n\tvec4 pB = projection * modelview * vec4(pointB, 1.0);\n\n\tvec2 screenA = viewport * (0.5 * pA.xy / pA.w + 0.5);\n\tvec2 screenB = viewport * (0.5 * pB.xy / pB.w + 0.5);\n\n\tvec2 xBasis = normalize(screenB - screenA);\n\tvec2 yBasis = vec2(-xBasis.y, xBasis.x);\n\n\tvec2 offsetA = screenA.xy + width * (position.x * xBasis + position.y * yBasis);\n\tvec2 offsetB = screenB.xy + width * (position.x * xBasis + position.y * yBasis);\n\n\tvec2 pt = mix(offsetA, offsetB, position.z);\n\tvec4 clip = mix(pA, pB, position.z);\n\n\tfragColor = color;\n\tfragPosition=modelview*vec4(position, 1.0);\n\tgl_Position=vec4(clip.w * ((2.0 * pt) / viewport - 1.0), clip.z, clip.w);\n}\n","shaders\\webgl2\\normalmapped.frag":"// Normal mapped diffuse shader\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D normal0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying mat3 tbn;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 encodedNormal = texture2D(normal0, uv0);\r\n\t// vec3 localCoords = 2.0 * encodedNormal.rgb - vec3(1.0);\r\n\tvec3 localCoords = vec3(2.0 * encodedNormal.rg - vec2(1.0), encodedNormal.b);\r\n\tvec3 normalDirection = normalize(tbn * localCoords);\r\n\tvec3 N = normalize(mat3(view) * normalDirection);\r\n\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = lighting(shadow);\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\normalmapped.vert":"// Normal mapped diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\nattribute vec3 tangent;\r\nattribute vec3 bitangent;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\nuniform vec3 lightDirection;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying mat3 tbn;\r\n\r\nhighp mat3 transpose(in highp mat3 m) {\r\n\thighp vec3 i0 = m[0];\r\n\thighp vec3 i1 = m[1];\r\n\thighp vec3 i2 = m[2];\r\n\thighp mat3 outMatrix = mat3(\r\n\t\tvec3(i0.x, i1.x, i2.x),\r\n\t\tvec3(i0.y, i1.y, i2.y),\r\n\t\tvec3(i0.z, i1.z, i2.z)\r\n\t);\r\n\treturn outMatrix;\r\n}\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0; // TODO: In the future this will probably need to use texture offset and scale uniforms\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = normalize(mat3(modelview) * normal);\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\ttbn[0] = normalize(vec3(model * vec4(tangent, 0.0)));\r\n\ttbn[1] = normalize(vec3(model * vec4(bitangent, 0.0)));\r\n\ttbn[2] = worldNormal;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\OITAccum.frag":"#version 300 es\r\n\r\n/**\r\n * Based on the following ideas:\r\n *\r\n *   - Weighted Blended Order-Independent Transparency\r\n *     http://jcgt.org/published/0002/02/09/\r\n *\r\n *   - Stochastic Transparency\r\n *     http://www.nvidia.com/object/nvidia_research_pub_016.html\r\n *\r\n *   - Simplex noise (C) Ashima Arts\r\n *     https://github.com/ashima/webgl-noise\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform vec4 diffuse;\r\nuniform sampler2D diffuse0;\r\n\r\nuniform int render_mode;\r\n\r\nuniform mat4 viewInverse;\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform int useReflection;\r\nuniform float reflectivity;\r\n\r\nuniform samplerCube env0;\r\n\r\nin vec3 fragNormal;\r\nin vec4 fragPosition;\r\nin vec2 fragTexcoord2d0;\r\nin vec3 worldNormal;\r\nout vec4 fragColor;\r\n\r\nvec4 mod289(vec4 x) {\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nfloat mod289(float x) {\r\n\treturn x - floor(x * (1.0 / 289.0)) * 289.0;\r\n}\r\n\r\nvec4 permute(vec4 x) {\r\n\treturn mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nfloat permute(float x) {\r\n\treturn mod289(((x*34.0)+1.0)*x);\r\n}\r\n\r\nvec4 taylorInvSqrt(vec4 r) {\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nfloat taylorInvSqrt(float r) {\r\n\treturn 1.79284291400159 - 0.85373472095314 * r;\r\n}\r\n\r\nvec4 grad4(float j, vec4 ip) {\r\n\tconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\r\n\tvec4 p,s;\r\n\tp.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\r\n\tp.w = 1.5 - dot(abs(p.xyz), ones.xyz);\r\n\ts = vec4(lessThan(p, vec4(0.0)));\r\n\tp.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\r\n\treturn p;\r\n}\r\n\r\n// (sqrt(5) - 1)/4 = F4, used once below\r\n#define F4 0.309016994374947451\r\n\r\nfloat snoise(vec4 v) {\r\n\tconst vec4 C = vec4(\r\n\t\t0.138196601125011, // (5 - sqrt(5))/20 G4\r\n\t\t0.276393202250021, // 2 * G4\r\n\t\t0.414589803375032, // 3 * G4\r\n\t\t-0.447213595499958); // -1 + 4 * G4\r\n\r\n\t// First corner\r\n\tvec4 i = floor(v + dot(v, vec4(F4)) );\r\n\tvec4 x0 = v - i + dot(i, C.xxxx);\r\n\r\n\t// Other corners\r\n\t// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\r\n\tvec4 i0;\r\n\tvec3 isX = step( x0.yzw, x0.xxx );\r\n\tvec3 isYZ = step( x0.zww, x0.yyz );\r\n\t// i0.x = dot( isX, vec3( 1.0 ) );\r\n\ti0.x = isX.x + isX.y + isX.z;\r\n\ti0.yzw = 1.0 - isX;\r\n\t// i0.y += dot( isYZ.xy, vec2( 1.0 ) );\r\n\ti0.y += isYZ.x + isYZ.y;\r\n\ti0.zw += 1.0 - isYZ.xy;\r\n\ti0.z += isYZ.z;\r\n\ti0.w += 1.0 - isYZ.z;\r\n\r\n\t// i0 now contains the unique values 0,1,2,3 in each channel\r\n\tvec4 i3 = clamp( i0, 0.0, 1.0 );\r\n\tvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\r\n\tvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\r\n\t// x0 = x0 - 0.0 + 0.0 * C.xxxx\r\n\t// x1 = x0 - i1 + 1.0 * C.xxxx\r\n\t// x2 = x0 - i2 + 2.0 * C.xxxx\r\n\t// x3 = x0 - i3 + 3.0 * C.xxxx\r\n\t// x4 = x0 - 1.0 + 4.0 * C.xxxx\r\n\tvec4 x1 = x0 - i1 + C.xxxx;\r\n\tvec4 x2 = x0 - i2 + C.yyyy;\r\n\tvec4 x3 = x0 - i3 + C.zzzz;\r\n\tvec4 x4 = x0 + C.wwww;\r\n\r\n\t// Permutations\r\n\ti = mod289(i);\r\n\tfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\r\n\tvec4 j1 = permute( permute( permute( permute (\r\n\ti.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\r\n\t+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\r\n\t+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\r\n\t+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\r\n\r\n\t// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\r\n\t// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\r\n\tvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\r\n\tvec4 p0 = grad4(j0, ip);\r\n\tvec4 p1 = grad4(j1.x, ip);\r\n\tvec4 p2 = grad4(j1.y, ip);\r\n\tvec4 p3 = grad4(j1.z, ip);\r\n\tvec4 p4 = grad4(j1.w, ip);\r\n\r\n\t// Normalise gradients\r\n\tvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\r\n\tp0 *= norm.x;\r\n\tp1 *= norm.y;\r\n\tp2 *= norm.z;\r\n\tp3 *= norm.w;\r\n\tp4 *= taylorInvSqrt(dot(p4,p4));\r\n\r\n\t// Mix contributions from the five corners\r\n\tvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\r\n\tvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4) ), 0.0);\r\n\tm0 = m0 * m0;\r\n\tm1 = m1 * m1;\r\n\treturn 49.0 *\r\n\t\t( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\r\n\t\t+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\r\n}\r\n\r\nfloat oit_weight(float z, vec4 color) {\r\n\treturn max(min(1.0, max(max(color.r, color.g), color.b) * color.a), color.a) * clamp(0.03 / (1e-5 + pow(z / 200.0, 4.0)), 1e-2, 3e3);\r\n}\r\n\r\nvec3 reflection() {\r\n\tvec3 eyeDirection = normalize(-fragPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = texture(env0, lookup);\r\n\treturn color.rgb;\r\n}\r\n\r\nvec4 lighting() {\r\n\t/* TODO: proper lighting for transparent surfaces */\r\n\tvec4 textureColor = texture(diffuse0, fragTexcoord2d0);\r\n\tvec4 color = diffuse * textureColor;\r\n\treturn color;\r\n}\r\n\r\nvoid main(void) {\r\n\tvec4 color = lighting();\r\n\r\n\tif (useReflection == 1) {\r\n\t\tvec3 refl = reflection();\r\n\t\tcolor.rgb = mix(refl, color.rgb, clamp(1.0 - reflectivity, 0.0, 1.0));\r\n\t}\r\n\r\n\t// Weighted Blended Order-Independent Transparency color pass\r\n\tif (render_mode == 0) {\r\n\t\tfloat linDepth = 2.0 * zNear * zFar / (zFar + zNear - (2.0 * -fragPosition.z - 1.0) * (zFar - zNear));\r\n\t\tfloat weight = oit_weight(linDepth, color);\r\n\t\tfragColor = vec4(color.rgb * color.a, color.a) * weight;\r\n\t}\r\n\r\n\t// Alpha reveal amount pass\r\n\telse if (render_mode == 1) {\r\n\t\tfragColor = vec4(color.a); // total amount revealed (blending: 0; 1-src.a)\r\n\t}\r\n\r\n\t// Alpha mapping pass\r\n\telse if (render_mode == 2) {\r\n\t\tif (color.a < 0.99)\r\n\t\t\tdiscard;\r\n\t\tfragColor = color;\r\n\t}\r\n\r\n\t// Stochastic transparency pass\r\n\telse if (render_mode == 3) {\r\n\t\tfloat random = snoise(fragPosition*150.0);\r\n\t\tif (random > color.a)\r\n\t\t\tdiscard;\r\n\t\tfragColor = vec4(color.rgb * color.a, 1.0);\r\n\t}\r\n}\r\n","shaders\\webgl2\\OITAccum.vert":"#version 300 es\r\n\r\n/** Order independent transparency - vertex program */\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nout vec3 fragNormal;\r\nout vec4 fragPosition;\r\nout vec2 fragTexcoord2d0;\r\nout vec3 worldNormal;\r\n\r\nvoid main() {\r\n\tfragNormal = mat3(modelview) * normal;\r\n\tfragPosition = modelview * vec4(position, 1.0);\r\n\tfragTexcoord2d0 = texcoord2d0;\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tgl_Position = projection * fragPosition;\r\n}\r\n","shaders\\webgl2\\OITRender.frag":"#version 300 es\r\n\r\n/**\r\n * Weighted Blended Order-Independent Transparency - Compositing program\r\n * Based on http://jcgt.org/published/0002/02/09/\r\n */\r\n\r\nprecision highp float;\r\n\r\nin vec2 uv;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform int render_mode;\r\n\r\nuniform sampler2D src;\r\nuniform sampler2D oitAccum;\r\nuniform sampler2D oitWeight;\r\n\r\nout vec4 fragColor;\r\n\r\n\r\nvoid addRelevantSample(vec2 coords, float weight, inout vec4 accum) {\r\n\tvec4 texel = texture(oitAccum, coords);\r\n\tif (texel.a < 1.0)\r\n\t\treturn;\r\n\tfloat a = texture(oitWeight, coords).a;\r\n\tif (a>0.99)\r\n\t\treturn;\r\n\taccum += texel * weight * a;\r\n}\r\n\r\nvec4 avgColor(sampler2D s, vec2 coords) {\r\n\tvec2 step = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\r\n\tvec2 kernel[8];\r\n\tkernel[0] = vec2(-step.x, step.y);\r\n\tkernel[1] = vec2(0.0, step.y);\r\n\tkernel[2] = vec2(step.x, step.y);\r\n\tkernel[3] = vec2(step.x, 0.0);\r\n\tkernel[4] = vec2(-step.x, 0.0);\r\n\tkernel[5] = vec2(-step.x, -step.y);\r\n\tkernel[6] = vec2(0.0, -step.y);\r\n\tkernel[7] = vec2(step.x, -step.y);\r\n\r\n\tvec4 sum = vec4(0.0);\r\n\tfloat weight = 1.0 / (2.0 + 1.0);\r\n\tfloat kernelSize = 1.0;\r\n\r\n\taddRelevantSample(coords, weight, sum);\r\n\r\n\tfor (int i=0; i<8; i++) {\r\n\t\taddRelevantSample(coords + kernel[i] * kernelSize, weight, sum);\r\n\t}\r\n\r\n\tkernelSize = 2.0;\r\n\tfor (int i=0; i<8; i++) {\r\n\t\taddRelevantSample(coords + kernel[i] * kernelSize, weight, sum);\r\n\t}\r\n\r\n\treturn sum;\r\n}\r\n\r\nvoid main(void) {\r\n\t// Blending: ONE_MINUS_SRC_ALPHA, SRC_ALPHA\r\n\r\n\tvec4 solidColor = texture(src, uv);\r\n\tfloat reveal = texture(oitWeight, uv).a;\r\n\tvec4 transparentColor;\r\n\r\n\t// Blended order transparency\r\n\tif (render_mode == 0) {\r\n\t\ttransparentColor = texture(oitAccum, uv);\r\n\r\n\t\tvec4 composite = vec4(transparentColor.rgb / max(transparentColor.a, 1e-5), reveal);\r\n\t\tfragColor = (1.0-composite.a) * composite +  composite.a * solidColor;\r\n\t}\r\n\r\n\t// Stochastic transparency\r\n\telse if (render_mode == 1) {\r\n\t\ttransparentColor = avgColor(oitAccum, uv);\r\n\t\tfragColor = (1.0 - reveal) * transparentColor + reveal * solidColor;\r\n\t}\r\n}\r\n","shaders\\webgl2\\OITRender.vert":"#version 300 es\r\n\r\n/** Order independent transparency - vertex program */\r\n\r\nin vec3 position;\r\nin vec2 uv0;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\positionbuffer.frag":"//Normal buffer\r\nprecision highp float;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform mat4 modelview;\r\n\r\nvarying vec4 worldPosition;\r\nvarying vec4 viewPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec3 viewNormal;\r\n\r\nvec4 pack(float depth) {\r\n\tconst vec4 bitShift = vec4(255.0 * 255.0 * 255.0, 255.0 * 255.0, 255.0, 1.0);\r\n\tconst vec4 bitMask = vec4(0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\r\n\tvec4 comp = fract(depth * bitShift);\r\n\tcomp -= comp.xxyz * bitMask;\r\n\treturn comp;\r\n}\r\n\r\nvoid main() {\r\n\tfloat linDepth = (-viewPosition.z - zNear) / (zFar - zNear);\r\n\tgl_FragColor = pack(linDepth);\r\n}\r\n","shaders\\webgl2\\positionbuffer.vert":"//Normal buffer\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec4 worldPosition;\r\nvarying vec4 viewPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec3 viewNormal;\r\n\r\nvoid main() {\r\n    worldPosition = model * vec4(position, 1.0);\r\n    viewPosition = view * worldPosition;\r\n    worldNormal = normalize(mat3(model)*normal);\r\n    viewNormal = mat3(modelview) * normal;\r\n    \r\n    gl_Position = projection * viewPosition;\r\n}","shaders\\webgl2\\postprocess_blur.frag":"#version 300 es\r\n\r\n/**\r\n * Blur post-process\r\n * http://www.sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nin highp vec2 blurCoords[5];\r\nout vec4 fragColor;\r\n\r\nvoid main () {\r\n\tlowp vec4 sum = vec4(0.0);\r\n\tsum += texture(src, blurCoords[0]) * 0.204164;\r\n\tsum += texture(src, blurCoords[1]) * 0.304005;\r\n\tsum += texture(src, blurCoords[2]) * 0.304005;\r\n\tsum += texture(src, blurCoords[3]) * 0.093913;\r\n\tsum += texture(src, blurCoords[4]) * 0.093913;\r\n\tfragColor = sum;\r\n}\r\n","shaders\\webgl2\\postprocess_blur.vert":"#version 300 es\r\n\r\n/**\r\n * Blur post-process\r\n * http://www.sunsetlakesoftware.com/2013/10/21/optimizing-gaussian-blurs-mobile-gpu\r\n */\r\n\r\nin vec3 position;\r\nin vec2 uv0;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform vec2 BlurSize;\r\n\r\nout vec2 blurCoords[5];\r\n\r\nvoid main() {\r\n\tvec2 offset = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y) * BlurSize;\r\n\r\n\tblurCoords[0] = uv0;\r\n\tblurCoords[1] = uv0 + offset * 1.407333;\r\n\tblurCoords[2] = uv0 - offset * 1.407333;\r\n\tblurCoords[3] = uv0 + offset * 3.294215;\r\n\tblurCoords[4] = uv0 - offset * 3.294215;\r\n\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\postprocess_fxaa.frag":'#version 300 es\r\n\r\n/**\r\n * FXAA post-process\r\n *\r\n * Based on webgl-meincraft FXAA implementation.\r\n * https://github.com/mitsuhiko/webgl-meincraft/blob/master/assets/shaders/fxaa.glsl\r\n */\r\n\r\n/*\r\nCopyright (c) 2011 by Armin Ronacher.\r\n\r\nSome rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are\r\nmet:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n\r\n    * Redistributions in binary form must reproduce the above\r\n      copyright notice, this list of conditions and the following\r\n      disclaimer in the documentation and/or other materials provided\r\n      with the distribution.\r\n\r\n    * The names of the contributors may not be used to endorse or\r\n      promote products derived from this software without specific\r\n      prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\n/**\r\n * Basic FXAA implementation based on the code on geeks3d.com with the\r\n * modification that the texture2DLod stuff was removed since it\'s\r\n * unsupported by WebGL.\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nuniform vec2 ViewportSize;\r\nuniform float reduce_min;\r\nuniform float reduce_mul;\r\nuniform float span_max;\r\n\r\nin vec2 uv;\r\nout vec4 fragColor;\r\n\r\nvec4 fxaa(sampler2D tex, vec2 texCoord) {\r\n\tvec4 color;\r\n\tvec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\tvec3 rgbNW = texture(tex, texCoord + vec2(-1.0, -1.0) * inverseVP).xyz;\r\n\tvec3 rgbNE = texture(tex, texCoord + vec2(1.0, -1.0) * inverseVP).xyz;\r\n\tvec3 rgbSW = texture(tex, texCoord + vec2(-1.0, 1.0) * inverseVP).xyz;\r\n\tvec3 rgbSE = texture(tex, texCoord + vec2(1.0, 1.0) * inverseVP).xyz;\r\n\tvec3 rgbM = texture(tex, texCoord).xyz;\r\n\tvec3 luma = vec3(0.299, 0.587, 0.114);\r\n\r\n\tfloat lumaNW = dot(rgbNW, luma);\r\n\tfloat lumaNE = dot(rgbNE, luma);\r\n\tfloat lumaSW = dot(rgbSW, luma);\r\n\tfloat lumaSE = dot(rgbSE, luma);\r\n\tfloat lumaM = dot(rgbM, luma);\r\n\tfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\r\n\tfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\r\n\r\n\tvec2 dir;\r\n\tdir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\r\n\tdir.y = ((lumaNW + lumaSW) - (lumaNE + lumaSE));\r\n\r\n\tfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * reduce_mul), reduce_min);\r\n\r\n\tfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\r\n\tdir = min(vec2(span_max, span_max), max(vec2(-span_max, -span_max), dir * rcpDirMin)) * inverseVP;\r\n\r\n\tvec3 rgbA = 0.5 * (\r\n\t\ttexture(tex, texCoord + dir * (1.0 / 3.0 - 0.5)).xyz +\r\n\t\ttexture(tex, texCoord + dir * (2.0 / 3.0 - 0.5)).xyz);\r\n\tvec3 rgbB = rgbA * 0.5 + 0.25 * (\r\n\t\ttexture(tex, texCoord + dir * -0.5).xyz +\r\n\t\ttexture(tex, texCoord + dir * 0.5).xyz);\r\n\r\n\tfloat lumaB = dot(rgbB, luma);\r\n\tif ((lumaB < lumaMin) || (lumaB > lumaMax))\r\n\t\tcolor = vec4(rgbA, 1.0);\r\n\telse\r\n\t\tcolor = vec4(rgbB, 1.0);\r\n\treturn color;\r\n}\r\n\r\nvoid main () {\r\n\tfragColor = fxaa(src, uv);\r\n}\r\n',"shaders\\webgl2\\postprocess_fxaa.vert":"#version 300 es\r\n\r\n/** FXAA post-process effect vertex shader */\r\n\r\nin vec3 position;\r\nin vec2 uv0;\r\n\r\nout vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\postprocess_ssao.frag":"#version 300 es\r\n\r\n/*\r\n * Screen space ambient occlusion post process\r\n *\r\n * SSAO GLSL shader v1.2\r\n * assembled by Martins Upitis (martinsh) (devlog-martinsh.blogspot.com)\r\n * original technique is made by Arkano22 (www.gamedev.net/topic/550699-ssao-no-halo-artifacts/)\r\n *\r\n * Changelog:\r\n * 1.2 - added fog calculation to mask AO. Minor fixes.\r\n * 1.1 - added spiral sampling method from here:\r\n * (http://www.cgafaq.info/wiki/Evenly_distributed_points_on_sphere)\r\n */\r\n\r\nprecision highp float;\r\n\r\n#define PI 3.14159265\r\n\r\nuniform sampler2D depth0;\r\nuniform sampler2D oitWeight;\r\nuniform sampler2D src;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform int ssaoOnly;\r\nuniform float gdisplace; // Gauss bell center, default: 0.3\r\nuniform float radius; // AO radius, default: 2.0\r\nuniform float brightness; // AO brightness, default: 1.0\r\nuniform float luminanceInfluence; // how much luminance affects occlusion, default: 0.7\r\n\r\nout vec4 fragColor;\r\n\r\nconst int samples = 16;\r\n// const int samples = 8;\r\n\r\nfloat aoclamp = 0.25; // depth clamp - reduces haloing at screen edges\r\nbool noise = true; // use noise instead of pattern for sample dithering\r\nfloat noiseamount = 0.0002; // dithering amount\r\nfloat diffarea = 0.4; // self-shadowing reduction\r\n\r\nvec2 rand(vec2 coord) {\r\n\tfloat noiseX = ((fract(1.0-coord.s*(ViewportSize.x/2.0))*0.25)+(fract(coord.t*(ViewportSize.y/2.0))*0.75))*2.0-1.0;\r\n\tfloat noiseY = ((fract(1.0-coord.s*(ViewportSize.x/2.0))*0.75)+(fract(coord.t*(ViewportSize.y/2.0))*0.25))*2.0-1.0;\r\n\tif (noise) {\r\n\t\tnoiseX = clamp(fract(sin(dot(coord, vec2(12.9898,78.233))) * 43758.5453),0.0,1.0)*2.0-1.0;\r\n\t\tnoiseY = clamp(fract(sin(dot(coord, vec2(12.9898,78.233)*2.0)) * 43758.5453),0.0,1.0)*2.0-1.0;\r\n\t}\r\n\treturn vec2(noiseX, noiseY) * noiseamount;\r\n}\r\n\r\nfloat readDepth(in vec2 coord) {\r\n\treturn texture(depth0, coord).r;\r\n}\r\n\r\nfloat compareDepths(in float depth1, in float depth2, inout int far) {\r\n\tfloat garea = 2.0; // gauss bell width\r\n\tfloat diff = (depth1 - depth2)*100.0; // depth difference (0-100)\r\n\t// reduce left bell width to avoid self-shadowing\r\n\tif (diff<gdisplace) {\r\n\t\tgarea = diffarea;\r\n\t}\r\n\telse {\r\n\t\tfar = 1;\r\n\t}\r\n\r\n\tfloat gauss = pow(2.7182,-2.0*(diff-gdisplace)*(diff-gdisplace)/(garea*garea));\r\n\treturn gauss;\r\n}\r\n\r\nfloat calAO(vec2 uv, float depth, float dw, float dh) {\r\n\tfloat dd = (1.0-depth) * radius;\r\n\r\n\tfloat temp = 0.0;\r\n\tfloat temp2 = 0.0;\r\n\tfloat coordw = uv.x + dw*dd;\r\n\tfloat coordh = uv.y + dh*dd;\r\n\tfloat coordw2 = uv.x - dw*dd;\r\n\tfloat coordh2 = uv.y - dh*dd;\r\n\r\n\tvec2 coord = vec2(coordw , coordh);\r\n\tvec2 coord2 = vec2(coordw2, coordh2);\r\n\r\n\tint far = 0;\r\n\ttemp = compareDepths(depth, readDepth(coord), far);\r\n\t//DEPTH EXTRAPOLATION:\r\n\tif (far > 0) {\r\n\t\ttemp2 = compareDepths(readDepth(coord2), depth, far);\r\n\t\ttemp += (1.0-temp)*temp2;\r\n\t}\r\n\r\n\treturn temp;\r\n}\r\n\r\nvoid main() {\r\n\tvec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n\tvec2 texCoord = gl_FragCoord.xy * inverseVP;\r\n\r\n\tvec2 noise = rand(texCoord);\r\n\tfloat depth = readDepth(texCoord);\r\n\tfloat reveal = texture(oitWeight, texCoord).a;\r\n\r\n\tfloat w = inverseVP.x/clamp(depth, aoclamp,1.0)+(noise.x*(1.0-noise.x));\r\n\tfloat h = inverseVP.y/clamp(depth, aoclamp,1.0)+(noise.y*(1.0-noise.y));\r\n\r\n\tfloat pw;\r\n\tfloat ph;\r\n\r\n\tfloat ao;\r\n\r\n\tfloat dl = PI*(3.0-sqrt(5.0));\r\n\tfloat dz = 1.0/float(samples);\r\n\tfloat l = 0.0;\r\n\tfloat z = 1.0 - dz/2.0;\r\n\r\n\tfor (int i = 0; i <= samples; i++) {\r\n\t\tfloat r = sqrt(1.0-z);\r\n\t\tpw = cos(l)*r;\r\n\t\tph = sin(l)*r;\r\n\t\tao += calAO(texCoord, depth, pw*w, ph*h);\r\n\t\tz = z - dz;\r\n\t\tl = l + dl;\r\n\t}\r\n\r\n\tao /= float(samples) * brightness;\r\n\tao = 1.0 - ao * reveal;\r\n\r\n\tvec3 color = texture(src, texCoord).rgb;\r\n\tvec3 lumcoeff = vec3(0.299, 0.587, 0.114);\r\n\tfloat lum = dot(color.rgb, lumcoeff);\r\n\tvec3 luminance = vec3(lum, lum, lum);\r\n\tvec3 final = vec3(color*mix(vec3(ao),vec3(1.0), luminance * luminanceInfluence));\r\n\r\n\tif (ssaoOnly == 1) {\r\n\t\tfinal = vec3(mix(vec3(ao),vec3(1.0),luminance * luminanceInfluence));\r\n\t}\r\n\r\n\tfragColor = vec4(final, 1.0);\r\n}\r\n","shaders\\webgl2\\postprocess_ssao.vert":"#version 300 es\r\n\r\n/*\r\n * Screen space ambient occlusion post process\r\n */\r\nin vec3 position;\r\n\r\nvoid main() {\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\reflective.frag":"precision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\nuniform samplerCube env0;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\nuniform int useLighting;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nvec4 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = textureCube(env0, lookup);\r\n\treturn color;\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\tvec4 color = ambientColor + (diffuseColor + specularColor) * shadow;\r\n\treturn color;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tvec4 color = reflection();\r\n\r\n\tif (useLighting == 1) {\r\n\t\tcolor = mix(color, lighting(shadow), materialBlend);\r\n\t}\r\n\telse {\r\n\t\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\t\tcolor = mix(color, diffuse * textureColor, materialBlend);\r\n\t}\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\reflective.vert":"// Diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\reflective_masked.frag":"precision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\nuniform mat4 viewInverse;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\nuniform samplerCube env0;\r\nuniform sampler2D mask;\r\n\r\nuniform float materialBlend;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\nuniform int useLighting;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\nvec4 reflection() {\r\n\tvec3 eyeDirection = normalize(-viewPosition.xyz);\r\n\tvec3 worldEyeDirection = normalize(mat3(viewInverse) * eyeDirection);\r\n\tvec3 lookup = reflect(worldEyeDirection, worldNormal) * vec3(-1.0, 1.0, 1.0);\r\n\tvec4 color = textureCube(env0, lookup);\r\n\treturn color;\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\tvec4 color = ambientColor + (diffuseColor + specularColor) * shadow;\r\n\treturn color;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\r\n\tfloat maskValue = texture2D(mask, uv0).r;\r\n\tvec4 color = reflection();\r\n\r\n\tif (useLighting == 1) {\r\n\t\tcolor = mix(color, lighting(shadow), maskValue * materialBlend);\r\n\t}\r\n\telse {\r\n\t\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\t\tcolor = mix(color, diffuse * textureColor, maskValue * materialBlend);\r\n\t}\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\reflective_masked.vert":"// Diffuse shader\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvoid main() {\r\n\tuv0 = texcoord2d0;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\ScreenQuad.frag":"// Shader for rendering a screen aligned quad for image space effects\r\n\r\nprecision highp float;\r\n\r\nvarying vec2 uv;\r\nuniform sampler2D tex0;\r\n\r\nvoid main () {\r\n\tgl_FragColor = texture2D(tex0, uv);\r\n}\r\n","shaders\\webgl2\\ScreenQuad.vert":"// Shader for rendering a screen aligned quad for image space effects\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nvarying vec2 uv;\r\n\r\nvoid main() {\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\shadow_blur.frag":"/**\r\n * Shadow blur\r\n */\r\n\r\nprecision highp float;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying highp vec2 blurCoords[14];\r\n\r\nvoid main () {\r\n\tlowp vec4 sum = vec4(0.0);\r\n\tsum += texture2D(src, blurCoords[ 0])*0.0044299121055113265;\r\n\tsum += texture2D(src, blurCoords[ 1])*0.00895781211794;\r\n\tsum += texture2D(src, blurCoords[ 2])*0.0215963866053;\r\n\tsum += texture2D(src, blurCoords[ 3])*0.0443683338718;\r\n\tsum += texture2D(src, blurCoords[ 4])*0.0776744219933;\r\n\tsum += texture2D(src, blurCoords[ 5])*0.115876621105;\r\n\tsum += texture2D(src, blurCoords[ 6])*0.147308056121;\r\n\tsum += texture2D(src, uv            )*0.159576912161;\r\n\tsum += texture2D(src, blurCoords[ 7])*0.147308056121;\r\n\tsum += texture2D(src, blurCoords[ 8])*0.115876621105;\r\n\tsum += texture2D(src, blurCoords[ 9])*0.0776744219933;\r\n\tsum += texture2D(src, blurCoords[10])*0.0443683338718;\r\n\tsum += texture2D(src, blurCoords[11])*0.0215963866053;\r\n\tsum += texture2D(src, blurCoords[12])*0.00895781211794;\r\n\tsum += texture2D(src, blurCoords[13])*0.0044299121055113265;\r\n\tgl_FragColor = sum;\r\n}\r\n","shaders\\webgl2\\shadow_blurh.vert":"/**\r\n * Shadow blur - horizontal\r\n */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying vec2 blurCoords[14];\r\n\r\nvoid main() {\r\n\tfloat blurSize = 0.2;\r\n\tblurCoords[ 0] = uv0 + vec2(-0.028, 0.0) * blurSize;\r\n\tblurCoords[ 1] = uv0 + vec2(-0.024, 0.0) * blurSize;\r\n\tblurCoords[ 2] = uv0 + vec2(-0.020, 0.0) * blurSize;\r\n\tblurCoords[ 3] = uv0 + vec2(-0.016, 0.0) * blurSize;\r\n\tblurCoords[ 4] = uv0 + vec2(-0.012, 0.0) * blurSize;\r\n\tblurCoords[ 5] = uv0 + vec2(-0.008, 0.0) * blurSize;\r\n\tblurCoords[ 6] = uv0 + vec2(-0.004, 0.0) * blurSize;\r\n\tblurCoords[ 7] = uv0 + vec2( 0.004, 0.0) * blurSize;\r\n\tblurCoords[ 8] = uv0 + vec2( 0.008, 0.0) * blurSize;\r\n\tblurCoords[ 9] = uv0 + vec2( 0.012, 0.0) * blurSize;\r\n\tblurCoords[10] = uv0 + vec2( 0.016, 0.0) * blurSize;\r\n\tblurCoords[11] = uv0 + vec2( 0.020, 0.0) * blurSize;\r\n\tblurCoords[12] = uv0 + vec2( 0.024, 0.0) * blurSize;\r\n\tblurCoords[13] = uv0 + vec2( 0.028, 0.0) * blurSize;\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\shadow_blurv.vert":"/**\r\n * Shadow blur - vertical\r\n */\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv0;\r\n\r\nuniform sampler2D src;\r\n\r\nvarying vec2 uv;\r\nvarying vec2 blurCoords[14];\r\n\r\nvoid main() {\r\n\tfloat blurSize = 0.2;\r\n\tblurCoords[ 0] = uv0 + vec2(0.0, -0.028) * blurSize;\r\n\tblurCoords[ 1] = uv0 + vec2(0.0, -0.024) * blurSize;\r\n\tblurCoords[ 2] = uv0 + vec2(0.0, -0.020) * blurSize;\r\n\tblurCoords[ 3] = uv0 + vec2(0.0, -0.016) * blurSize;\r\n\tblurCoords[ 4] = uv0 + vec2(0.0, -0.012) * blurSize;\r\n\tblurCoords[ 5] = uv0 + vec2(0.0, -0.008) * blurSize;\r\n\tblurCoords[ 6] = uv0 + vec2(0.0, -0.004) * blurSize;\r\n\tblurCoords[ 7] = uv0 + vec2(0.0,  0.004) * blurSize;\r\n\tblurCoords[ 8] = uv0 + vec2(0.0,  0.008) * blurSize;\r\n\tblurCoords[ 9] = uv0 + vec2(0.0,  0.012) * blurSize;\r\n\tblurCoords[10] = uv0 + vec2(0.0,  0.016) * blurSize;\r\n\tblurCoords[11] = uv0 + vec2(0.0,  0.020) * blurSize;\r\n\tblurCoords[12] = uv0 + vec2(0.0,  0.024) * blurSize;\r\n\tblurCoords[13] = uv0 + vec2(0.0,  0.028) * blurSize;\r\n\tuv = uv0;\r\n\tgl_Position = vec4(position.xy, 0.0, 1.0);\r\n}\r\n","shaders\\webgl2\\skybox.frag":"#version 300 es\r\n\r\nprecision highp float;\r\n\r\nuniform samplerCube skybox0;\r\n\r\nin vec3 uv0;\r\nout vec4 fragColor;\r\n\r\nvoid main(void) {\r\n\tfragColor = texture(skybox0, uv0);\r\n}\r\n","shaders\\webgl2\\skybox.vert":"#version 300 es\r\n\r\nin vec3 position;\r\nin vec3 normal;\r\nin vec2 texcoord2d0;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nout vec3 uv0;\r\n\r\nvoid main(void) {\r\n\tuv0 = vec3(position.x, -position.yz);\r\n\tgl_Position = projection * view * model * vec4(position, 1.0);\r\n}\r\n","shaders\\webgl2\\ssao.frag":"precision highp float;\r\n\r\nuniform sampler2D position0;\r\n\r\nuniform mat4 projection;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform float ssaoGDisplace;\r\nuniform float ssaoRadius;\r\nuniform float ssaoDivider;\r\n\r\n#define DL 2.399963229728653\r\n#define EULER 2.718281828459045\r\n\r\nfloat unpack(vec4 c) {\r\n    const vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n    return dot(c, bitShifts);\r\n}\r\n\r\nfloat getDepth(vec2 coord) {\r\n    float d = unpack(texture2D(position0, coord.xy));\r\n    if (d == 0.0)\r\n        d = 1.0;\r\n    return d;\r\n}\r\n\r\nfloat doAmbientOcclusion(vec2 coord, vec2 coord2, float d) {\r\n    float diff = getDepth(coord + coord2) - d;\r\n    float gDisplace = -0.0002 - (0.00002 * max(min(ssaoGDisplace, 10.0), 0.0));\r\n    //float gDisplace = -0.00032;\r\n    return (diff < gDisplace) ? pow(EULER, -2.0 * (diff - gDisplace) * (diff - gDisplace) * 10000.0 / 0.16) : 0.0;\r\n}\r\n\r\nvoid main() {\r\n    vec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n    \r\n    vec2 c = gl_FragCoord.xy * inverseVP;\r\n    \r\n    float ao = 0.0;\r\n\r\n    float dz = 1.0 / 8.0;\r\n    float z = 1.0 - dz / 2.0;\r\n    float l = 0.0;\r\n\r\n    float depth = getDepth(c);\r\n\r\n    for (int i = 0; i <= 8; i++) {\r\n        float r = sqrt(1.0 - z);\r\n\r\n        vec2 p = vec2(cos(l) * r, sin(l) * r);\r\n        ao += doAmbientOcclusion(c, p * ssaoRadius * inverseVP.x * (1.0 - depth), depth);\r\n        z = z - dz;\r\n        l = l + DL;\r\n    }\r\n\r\n    ao /= 8.0 + max(min(ssaoDivider, 1.0), -1.0);\r\n    //ao /= 8.5;\r\n    \r\n    ao = max(0.0, ao * 2.0 - 1.0);\r\n    ao = 1.0 - ao;\r\n    gl_FragColor = vec4(ao, ao, ao, 1.0);\r\n    //gl_FragColor = vec4(depth, depth, depth, 1.0);\r\n    //gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n}","shaders\\webgl2\\ssao.vert":"attribute vec3 position;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position.xy, 0.0, 1.0);\r\n}","shaders\\webgl2\\ssaoblur.frag":"precision highp float;\r\n\r\nuniform sampler2D ao0;\r\nuniform sampler2D src;\r\n\r\nuniform mat4 projection;\r\n\r\nuniform float zNear;\r\nuniform float zFar;\r\nuniform vec2 ViewportSize;\r\n\r\nuniform int ssaoBlurSize;\r\nuniform int ssaoOnly;\r\n\r\nfloat random(vec2 co) {\r\n    //co = mod(co, 128.0);\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\nvoid main() {\r\n    vec2 inverseVP = vec2(1.0 / ViewportSize.x, 1.0 / ViewportSize.y);\r\n    \r\n    const int MAXIMUM_BLUR = 32;\r\n    float result = 0.0;\r\n    vec2 hlim = vec2(float(-ssaoBlurSize) * 0.5 + 0.5);\r\n    for (int i = 0; i < MAXIMUM_BLUR; i++) {\r\n        if (i >= ssaoBlurSize)\r\n            break;\r\n        for (int j = 0; j < MAXIMUM_BLUR; j++) {\r\n            if (j >= ssaoBlurSize)\r\n                break;\r\n            vec2 offset = (hlim + vec2(float(i), float(j))) * inverseVP;\r\n            result += texture2D(ao0, gl_FragCoord.xy * inverseVP + offset).r;\r\n        }\r\n    }\r\n    result = result / float(ssaoBlurSize * ssaoBlurSize);\r\n\r\n    if (ssaoOnly == 1) {\r\n        gl_FragColor = vec4(vec3(result), 1.0);\r\n    }\r\n    else {\r\n        gl_FragColor = vec4(texture2D(src, gl_FragCoord.xy * inverseVP).xyz * result, 1.0);\r\n    }\r\n    //gl_FragColor = vec4(texture2D(src, gl_FragCoord.xy * inverseVP).xyz * texture2D(ao0, gl_FragCoord.xy * inverseVP/* / 2.0 + 0.5*/).xyz, 1.0);\r\n}","shaders\\webgl2\\ssaoblur.vert":"attribute vec3 position;\r\n\r\nvoid main() {\r\n    gl_Position = vec4(position.xy, 0.0, 1.0);\r\n}","shaders\\webgl2\\terrain.frag":"// Terrain shader for the forward renderer\r\n\r\nprecision highp float;\r\n\r\nuniform mat4 modelview;\r\nuniform mat4 view;\r\n\r\nuniform vec4 ambient;\r\nuniform vec4 diffuse;\r\nuniform float specularStrength;\r\nuniform int specularPower;\r\n\r\nuniform vec3 lightDirection;\r\nuniform vec4 lightColor;\r\nuniform float lightIntensity;\r\nuniform float shadowBias;\r\n\r\nuniform sampler2D diffuse0;\r\nuniform sampler2D shadow0;\r\n\r\nuniform int hasFloat;\r\nuniform int useVSM;\r\nuniform int useShadows;\r\nuniform int receiveShadows;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying vec3 bc;\r\n\r\nfloat unpack(vec4 c) {\r\n\tconst vec4 bitShifts = vec4(1.0 / (255.0 * 255.0 * 255.0), 1.0 / (255.0 * 255.0), 1.0 / 255.0, 1.0);\r\n\treturn dot(c, bitShifts);\r\n}\r\n\r\n/** Computes color and directional lighting */\r\nvec4 lighting(float shadow) {\r\n\tvec4 textureColor = texture2D(diffuse0, uv0);\r\n\tvec3 N = normalize(viewNormal);\r\n\tvec3 L = normalize(mat3(view)*lightDirection);\r\n\tvec3 V = normalize(-viewPosition.xyz);\r\n\tvec3 H = normalize(L + V);\r\n\tfloat diffuseLight = max(dot(N, L), 0.0) * lightIntensity;\r\n\tfloat specularLight = min(max(dot(N, H), 0.0), 1.0);\r\n\tspecularLight = pow(specularLight, float(specularPower));\r\n\r\n\tvec4 ambientColor = ambient * textureColor;\r\n\tvec4 diffuseColor = diffuse * diffuse * textureColor * lightColor * diffuseLight;\r\n\tvec4 specularColor = lightColor * specularLight * specularStrength;\r\n\r\n\treturn ambientColor + (diffuseColor + specularColor) * shadow;\r\n}\r\n\r\nfloat linstep(float low, float high, float v) {\r\n\treturn clamp((v-low)/(high-low), 0.0, 1.0);\r\n}\r\n\r\nfloat VSM(vec2 moments, float compare) {\r\n\tfloat p = smoothstep(compare - shadowBias, compare, moments.x);\r\n\tfloat variance = max(moments.y - moments.x*moments.x, -0.001);\r\n\tfloat d = compare - moments.x;\r\n\tfloat p_max = linstep(0.2, 1.0, variance / (variance + d*d));\r\n\treturn clamp(max(p, p_max), 0.0, 1.0);\r\n}\r\n\r\nfloat shadowmap() {\r\n\tvec2 uv = shadowPosition.xy / shadowPosition.w;\r\n\tuv = uv * 0.5 + 0.5;\r\n\tvec4 shadowTexel = texture2D(shadow0, uv);\r\n\r\n\tfloat depth;\r\n\tif (hasFloat == 1)\r\n\t\tdepth = shadowTexel.r;\r\n\telse\r\n\t\tdepth = unpack(shadowTexel);\r\n\r\n\tfloat lightDepth = (shadowPosition.z + 1.0) * 0.5;\r\n\r\n\tif (useVSM == 1)\r\n\t\treturn VSM(shadowTexel.xy, lightDepth);\r\n\r\n\treturn step(lightDepth - shadowBias, depth);\r\n}\r\n\r\nvoid main(void) {\r\n\tfloat shadow = 1.0;\r\n\tif (useShadows > 0 && receiveShadows > 0) {\r\n\t\tshadow = shadowmap();\r\n\t}\r\n\tvec4 color = lighting(shadow);\r\n\tgl_FragColor = clamp(color, 0.0, 1.0);\r\n\r\n\t// gl_FragColor = vec4(bc, 1.0); // for debug\r\n}\r\n","shaders\\webgl2\\terrain.vert":"// Terrain shader for the forward renderer\r\n\r\nattribute vec3 position;\r\nattribute vec3 normal;\r\nattribute vec2 texcoord2d0;\r\nattribute vec3 barycentric;\r\n\r\nuniform mat4 model;\r\nuniform mat4 view;\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\nuniform mat4 lightProjection;\r\nuniform mat4 lightView;\r\n\r\nuniform sampler2D height;\r\n\r\nuniform float verticalScale;\r\nuniform vec2 uvOffset;\r\nuniform vec2 uvScale;\r\n\r\nvarying vec2 uv0;\r\nvarying vec4 worldPosition;\r\nvarying vec3 worldNormal;\r\nvarying vec4 viewPosition;\r\nvarying vec3 viewNormal;\r\nvarying vec4 shadowPosition;\r\n\r\nvarying vec3 bc;\r\n\r\nfloat snap(float f, float step) {\r\n\treturn step * floor(f / step);\r\n}\r\n\r\nvoid main() {\r\n\tbc = barycentric;\r\n\tuv0 = texcoord2d0 * uvScale + uvOffset;\r\n\tworldPosition = model * vec4(position, 1.0);\r\n\r\n\t// worldPosition.x = snap(worldPosition.x, worldPosition.y);\r\n\t// worldPosition.z = snap(worldPosition.z, worldPosition.y);\r\n\r\n\tfloat height = texture2D(height, uv0).r;\r\n\tworldPosition.y = height * verticalScale;\r\n\t// worldPosition.y = 0.0;\r\n\r\n\tworldNormal = normalize(mat3(model) * normal);\r\n\tviewPosition = view * worldPosition;\r\n\tviewNormal = mat3(modelview) * normal;\r\n\r\n\tshadowPosition = lightProjection * lightView * worldPosition;\r\n\r\n\tgl_Position = projection * viewPosition;\r\n}\r\n","shaders\\webgl2\\test.frag":"// Test fragment shader drawing in blue \r\n\r\nprecision mediump float; \r\n\r\nvoid main(void) { \r\n\tgl_FragColor = vec4(0.1, 0.5, 0.8, 1.0); \r\n}","shaders\\webgl2\\test.vert":"// Test pass-through shader that doesn't transform vertex\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\n\r\nvoid main(void) { \r\n\tfragNormal=mat3(modelview)*normal;\r\n\tfragPosition=projection*modelview*vec4(position, 1.0);\r\n\tgl_Position = fragPosition; \r\n}\r\n","shaders\\webgl2\\transparent.frag":"// Unlit transparency shader\r\nprecision mediump float; \r\n\r\nuniform vec4 diffuse;\r\n\r\nuniform sampler2D diffuse0;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main(void) {\r\n\tgl_FragColor = diffuse*texture2D(diffuse0, fragTexcoord2d0);\r\n}","shaders\\webgl2\\transparent.vert":"// Unlit transparency shader\r\nattribute vec3 position; \r\nattribute vec3 normal; \r\nattribute vec2 texcoord2d0; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragNormal;\r\nvarying vec4 fragPosition;\r\nvarying vec2 fragTexcoord2d0;\r\n\r\nvoid main() {\r\n\tfragNormal=mat3(modelview)*normal;\r\n\tfragPosition=modelview*vec4(position, 1.0);\r\n\tfragTexcoord2d0=texcoord2d0;\r\n\tgl_Position=projection*fragPosition;\r\n}\r\n","shaders\\webgl2\\wireframe.frag":"// Test fragment shader drawing in blue \r\nprecision mediump float; \r\n\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main(void) { \r\n\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, \r\n\t\t\tpow(1.0-fragBarycentric.r, 32.0)+pow(1.0-fragBarycentric.g, 32.0)+pow(1.0-fragBarycentric.b, 32.0));\r\n}","shaders\\webgl2\\wireframe.vert":"// Diffuse shader\r\nattribute vec3 position; \r\nattribute vec3 barycentric; \r\n\r\nuniform mat4 modelview;\r\nuniform mat4 projection;\r\n\r\nvarying vec3 fragBarycentric;\r\n\r\nvoid main(void) { \r\n\tgl_Position=projection*modelview*vec4(position, 1.0); \r\n\tfragBarycentric = barycentric;\r\n}"}};